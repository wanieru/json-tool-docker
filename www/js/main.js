/*! For license information please see main.js.LICENSE.txt */
(()=>{var __webpack_modules__={5096:(e,t,r)=>{"use strict";var a=r(7153),s=r(3610),o=r(7531),i=r(4022),n=r(5035),l=r(1516),c=r(7753),u=r(3978),h=r(2889);e.exports=y,y.prototype.validate=function(e,t){var r;if("string"==typeof e){if(!(r=this.getSchema(e)))throw new Error('no schema with key or ref "'+e+'"')}else{var a=this._addSchema(e);r=a.validate||this._compile(a)}var s=r(t);return!0!==r.$async&&(this.errors=r.errors),s},y.prototype.compile=function(e,t){var r=this._addSchema(e,void 0,t);return r.validate||this._compile(r)},y.prototype.addSchema=function(e,t,r,a){if(Array.isArray(e)){for(var o=0;o<e.length;o++)this.addSchema(e[o],void 0,r,a);return this}var i=this._getId(e);if(void 0!==i&&"string"!=typeof i)throw new Error("schema id must be string");return _(this,t=s.normalizeId(t||i)),this._schemas[t]=this._addSchema(e,r,a,!0),this},y.prototype.addMetaSchema=function(e,t,r){return this.addSchema(e,t,r,!0),this},y.prototype.validateSchema=function(e,t){var r,a,s=e.$schema;if(void 0!==s&&"string"!=typeof s)throw new Error("$schema must be a string");if(!(s=s||this._opts.defaultMeta||(r=this,a=r._opts.meta,r._opts.defaultMeta="object"==typeof a?r._getId(a)||a:r.getSchema(m)?m:void 0,r._opts.defaultMeta)))return this.logger.warn("meta-schema not available"),this.errors=null,!0;var o=this.validate(s,e);if(!o&&t){var i="schema is invalid: "+this.errorsText();if("log"!=this._opts.validateSchema)throw new Error(i);this.logger.error(i)}return o},y.prototype.getSchema=function(e){var t=g(this,e);switch(typeof t){case"object":return t.validate||this._compile(t);case"string":return this.getSchema(t);case"undefined":return function(e,t){var r=s.schema.call(e,{schema:{}},t);if(r){var o=r.schema,n=r.root,l=r.baseId,c=a.call(e,o,n,void 0,l);return e._fragments[t]=new i({ref:t,fragment:!0,schema:o,root:n,baseId:l,validate:c}),c}}(this,e)}},y.prototype.removeSchema=function(e){if(e instanceof RegExp)return P(this,this._schemas,e),P(this,this._refs,e),this;switch(typeof e){case"undefined":return P(this,this._schemas),P(this,this._refs),this._cache.clear(),this;case"string":var t=g(this,e);return t&&this._cache.del(t.cacheKey),delete this._schemas[e],delete this._refs[e],this;case"object":var r=this._opts.serialize,a=r?r(e):e;this._cache.del(a);var o=this._getId(e);o&&(o=s.normalizeId(o),delete this._schemas[o],delete this._refs[o])}return this},y.prototype.addFormat=function(e,t){return"string"==typeof t&&(t=new RegExp(t)),this._formats[e]=t,this},y.prototype.errorsText=function(e,t){if(!(e=e||this.errors))return"No errors";for(var r=void 0===(t=t||{}).separator?", ":t.separator,a=void 0===t.dataVar?"data":t.dataVar,s="",o=0;o<e.length;o++){var i=e[o];i&&(s+=a+i.dataPath+" "+i.message+r)}return s.slice(0,-r.length)},y.prototype._addSchema=function(e,t,r,a){if("object"!=typeof e&&"boolean"!=typeof e)throw new Error("schema should be object or boolean");var o=this._opts.serialize,n=o?o(e):e,l=this._cache.get(n);if(l)return l;a=a||!1!==this._opts.addUsedSchema;var c=s.normalizeId(this._getId(e));c&&a&&_(this,c);var u,h=!1!==this._opts.validateSchema&&!t;h&&!(u=c&&c==s.normalizeId(e.$schema))&&this.validateSchema(e,!0);var p=s.ids.call(this,e),d=new i({id:c,schema:e,localRefs:p,cacheKey:n,meta:r});return"#"!=c[0]&&a&&(this._refs[c]=d),this._cache.put(n,d),h&&u&&this.validateSchema(e,!0),d},y.prototype._compile=function(e,t){if(e.compiling)return e.validate=o,o.schema=e.schema,o.errors=null,o.root=t||o,!0===e.schema.$async&&(o.$async=!0),o;var r,s;e.compiling=!0,e.meta&&(r=this._opts,this._opts=this._metaOpts);try{s=a.call(this,e.schema,t,e.localRefs)}catch(t){throw delete e.validate,t}finally{e.compiling=!1,e.meta&&(this._opts=r)}return e.validate=s,e.refs=s.refs,e.refVal=s.refVal,e.root=s.root,s;function o(){var t=e.validate,r=t.apply(this,arguments);return o.errors=t.errors,r}},y.prototype.compileAsync=r(2931);var p=r(4895);y.prototype.addKeyword=p.add,y.prototype.getKeyword=p.get,y.prototype.removeKeyword=p.remove,y.prototype.validateKeyword=p.validate;var d=r(7802);y.ValidationError=d.Validation,y.MissingRefError=d.MissingRef,y.$dataMetaSchema=u;var m="http://json-schema.org/draft-07/schema",f=["removeAdditional","useDefaults","coerceTypes","strictDefaults"],v=["/properties"];function y(e){if(!(this instanceof y))return new y(e);e=this._opts=h.copy(e)||{},function(e){var t=e._opts.logger;if(!1===t)e.logger={log:S,warn:S,error:S};else{if(void 0===t&&(t=console),!("object"==typeof t&&t.log&&t.warn&&t.error))throw new Error("logger must implement log, warn and error methods");e.logger=t}}(this),this._schemas={},this._refs={},this._fragments={},this._formats=l(e.format),this._cache=e.cache||new o,this._loadingSchemas={},this._compilations=[],this.RULES=c(),this._getId=function(e){switch(e.schemaId){case"auto":return w;case"id":return b;default:return E}}(e),e.loopRequired=e.loopRequired||1/0,"property"==e.errorDataPath&&(e._errorDataPathProperty=!0),void 0===e.serialize&&(e.serialize=n),this._metaOpts=function(e){for(var t=h.copy(e._opts),r=0;r<f.length;r++)delete t[f[r]];return t}(this),e.formats&&function(e){for(var t in e._opts.formats){var r=e._opts.formats[t];e.addFormat(t,r)}}(this),e.keywords&&function(e){for(var t in e._opts.keywords){var r=e._opts.keywords[t];e.addKeyword(t,r)}}(this),function(e){var t;if(e._opts.$data&&(t=r(894),e.addMetaSchema(t,t.$id,!0)),!1!==e._opts.meta){var a=r(6680);e._opts.$data&&(a=u(a,v)),e.addMetaSchema(a,m,!0),e._refs["http://json-schema.org/schema"]=m}}(this),"object"==typeof e.meta&&this.addMetaSchema(e.meta),e.nullable&&this.addKeyword("nullable",{metaSchema:{type:"boolean"}}),function(e){var t=e._opts.schemas;if(t)if(Array.isArray(t))e.addSchema(t);else for(var r in t)e.addSchema(t[r],r)}(this)}function g(e,t){return t=s.normalizeId(t),e._schemas[t]||e._refs[t]||e._fragments[t]}function P(e,t,r){for(var a in t){var s=t[a];s.meta||r&&!r.test(a)||(e._cache.del(s.cacheKey),delete t[a])}}function b(e){return e.$id&&this.logger.warn("schema $id ignored",e.$id),e.id}function E(e){return e.id&&this.logger.warn("schema id ignored",e.id),e.$id}function w(e){if(e.$id&&e.id&&e.$id!=e.id)throw new Error("schema $id is different from id");return e.$id||e.id}function _(e,t){if(e._schemas[t]||e._refs[t])throw new Error('schema with key or id "'+t+'" already exists')}function S(){}},7531:e=>{"use strict";var t=e.exports=function(){this._cache={}};t.prototype.put=function(e,t){this._cache[e]=t},t.prototype.get=function(e){return this._cache[e]},t.prototype.del=function(e){delete this._cache[e]},t.prototype.clear=function(){this._cache={}}},2931:(e,t,r)=>{"use strict";var a=r(7802).MissingRef;e.exports=function e(t,r,s){var o=this;if("function"!=typeof this._opts.loadSchema)throw new Error("options.loadSchema should be a function");"function"==typeof r&&(s=r,r=void 0);var i=n(t).then((function(){var e=o._addSchema(t,void 0,r);return e.validate||l(e)}));return s&&i.then((function(e){s(null,e)}),s),i;function n(t){var r=t.$schema;return r&&!o.getSchema(r)?e.call(o,{$ref:r},!0):Promise.resolve()}function l(e){try{return o._compile(e)}catch(t){if(t instanceof a)return function(t){var a=t.missingSchema;if(c(a))throw new Error("Schema "+a+" is loaded but "+t.missingRef+" cannot be resolved");var s=o._loadingSchemas[a];return s||(s=o._loadingSchemas[a]=o._opts.loadSchema(a)).then(i,i),s.then((function(e){if(!c(a))return n(e).then((function(){c(a)||o.addSchema(e,a,void 0,r)}))})).then((function(){return l(e)}));function i(){delete o._loadingSchemas[a]}function c(e){return o._refs[e]||o._schemas[e]}}(t);throw t}}}},7802:(e,t,r)=>{"use strict";var a=r(3610);function s(e,t,r){this.message=r||s.message(e,t),this.missingRef=a.url(e,t),this.missingSchema=a.normalizeId(a.fullPath(this.missingRef))}function o(e){return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}e.exports={Validation:o((function(e){this.message="validation failed",this.errors=e,this.ajv=this.validation=!0})),MissingRef:o(s)},s.message=function(e,t){return"can't resolve reference "+t+" from id "+e}},1516:(e,t,r)=>{"use strict";var a=r(2889),s=/^(\d\d\d\d)-(\d\d)-(\d\d)$/,o=[0,31,28,31,30,31,30,31,31,30,31,30,31],i=/^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i,n=/^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i,l=/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,c=/^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i,u=/^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i,h=/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,p=/^(?:\/(?:[^~/]|~0|~1)*)*$/,d=/^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,m=/^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;function f(e){return e="full"==e?"full":"fast",a.copy(f[e])}function v(e){var t=e.match(s);if(!t)return!1;var r=+t[1],a=+t[2],i=+t[3];return a>=1&&a<=12&&i>=1&&i<=(2==a&&function(e){return e%4==0&&(e%100!=0||e%400==0)}(r)?29:o[a])}function y(e,t){var r=e.match(i);if(!r)return!1;var a=r[1],s=r[2],o=r[3],n=r[5];return(a<=23&&s<=59&&o<=59||23==a&&59==s&&60==o)&&(!t||n)}e.exports=f,f.fast={date:/^\d\d\d\d-[0-1]\d-[0-3]\d$/,time:/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,"date-time":/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,uri:/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,"uri-reference":/^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,"uri-template":c,url:u,email:/^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,hostname:n,ipv4:/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,ipv6:/^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,regex:E,uuid:h,"json-pointer":p,"json-pointer-uri-fragment":d,"relative-json-pointer":m},f.full={date:v,time:y,"date-time":function(e){var t=e.split(g);return 2==t.length&&v(t[0])&&y(t[1],!0)},uri:function(e){return P.test(e)&&l.test(e)},"uri-reference":/^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,"uri-template":c,url:u,email:/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,hostname:n,ipv4:/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,ipv6:/^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,regex:E,uuid:h,"json-pointer":p,"json-pointer-uri-fragment":d,"relative-json-pointer":m};var g=/t|\s/i,P=/\/|:/,b=/[^\\]\\Z/;function E(e){if(b.test(e))return!1;try{return new RegExp(e),!0}catch(e){return!1}}},7153:(e,t,r)=>{"use strict";var a=r(3610),s=r(2889),o=r(7802),i=r(5035),n=r(9508),l=s.ucs2length,c=r(4063),u=o.Validation;function h(e,t,r){var a=d.call(this,e,t,r);return a>=0?{index:a,compiling:!0}:(a=this._compilations.length,this._compilations[a]={schema:e,root:t,baseId:r},{index:a,compiling:!1})}function p(e,t,r){var a=d.call(this,e,t,r);a>=0&&this._compilations.splice(a,1)}function d(e,t,r){for(var a=0;a<this._compilations.length;a++){var s=this._compilations[a];if(s.schema==e&&s.root==t&&s.baseId==r)return a}return-1}function m(e,t){return"var pattern"+e+" = new RegExp("+s.toQuotedString(t[e])+");"}function f(e){return"var default"+e+" = defaults["+e+"];"}function v(e,t){return void 0===t[e]?"":"var refVal"+e+" = refVal["+e+"];"}function y(e){return"var customRule"+e+" = customRules["+e+"];"}function g(e,t){if(!e.length)return"";for(var r="",a=0;a<e.length;a++)r+=t(a,e);return r}e.exports=function e(t,r,d,P){var b=this,E=this._opts,w=[void 0],_={},S=[],x={},j=[],T={},F=[];r=r||{schema:t,refVal:w,refs:_};var $=h.call(this,t,r,P),D=this._compilations[$.index];if($.compiling)return D.callValidate=function e(){var t=D.validate,r=t.apply(this,arguments);return e.errors=t.errors,r};var O=this._formats,R=this.RULES;try{var C=I(t,r,d,P);D.validate=C;var k=D.callValidate;return k&&(k.schema=C.schema,k.errors=null,k.refs=C.refs,k.refVal=C.refVal,k.root=C.root,k.$async=C.$async,E.sourceCode&&(k.source=C.source)),C}finally{p.call(this,t,r,P)}function I(t,i,h,p){var d=!i||i&&i.schema==t;if(i.schema!=r.schema)return e.call(b,t,i,h,p);var P,x=!0===t.$async,T=n({isTop:!0,schema:t,isRoot:d,baseId:p,root:i,schemaPath:"",errSchemaPath:"#",errorPath:'""',MissingRefError:o.MissingRef,RULES:R,validate:n,util:s,resolve:a,resolveRef:A,usePattern:N,useDefault:q,useCustomRule:z,opts:E,formats:O,logger:b.logger,self:b});T=g(w,v)+g(S,m)+g(j,f)+g(F,y)+T,E.processCode&&(T=E.processCode(T,t));try{P=new Function("self","RULES","formats","root","refVal","defaults","customRules","equal","ucs2length","ValidationError",T)(b,R,O,r,w,j,F,c,l,u),w[0]=P}catch(e){throw b.logger.error("Error compiling schema, function code:",T),e}return P.schema=t,P.errors=null,P.refs=_,P.refVal=w,P.root=d?P:i,x&&(P.$async=!0),!0===E.sourceCode&&(P.source={code:T,patterns:S,defaults:j}),P}function A(t,s,o){s=a.url(t,s);var i,n,l=_[s];if(void 0!==l)return V(i=w[l],n="refVal["+l+"]");if(!o&&r.refs){var c=r.refs[s];if(void 0!==c)return V(i=r.refVal[c],n=L(s,i))}n=L(s);var u=a.call(b,I,r,s);if(void 0===u){var h=d&&d[s];h&&(u=a.inlineRef(h,E.inlineRefs)?h:e.call(b,h,r,d,t))}if(void 0!==u)return function(e,t){var r=_[e];w[r]=t}(s,u),V(u,n);!function(e){delete _[e]}(s)}function L(e,t){var r=w.length;return w[r]=t,_[e]=r,"refVal"+r}function V(e,t){return"object"==typeof e||"boolean"==typeof e?{code:t,schema:e,inline:!0}:{code:t,$async:e&&!!e.$async}}function N(e){var t=x[e];return void 0===t&&(t=x[e]=S.length,S[t]=e),"pattern"+t}function q(e){switch(typeof e){case"boolean":case"number":return""+e;case"string":return s.toQuotedString(e);case"object":if(null===e)return"null";var t=i(e),r=T[t];return void 0===r&&(r=T[t]=j.length,j[r]=e),"default"+r}}function z(e,t,r,a){if(!1!==b._opts.validateSchema){var s=e.definition.dependencies;if(s&&!s.every((function(e){return Object.prototype.hasOwnProperty.call(r,e)})))throw new Error("parent schema must have all required keywords: "+s.join(","));var o=e.definition.validateSchema;if(o&&!o(t)){var i="keyword schema is invalid: "+b.errorsText(o.errors);if("log"!=b._opts.validateSchema)throw new Error(i);b.logger.error(i)}}var n,l=e.definition.compile,c=e.definition.inline,u=e.definition.macro;if(l)n=l.call(b,t,r,a);else if(u)n=u.call(b,t,r,a),!1!==E.validateSchema&&b.validateSchema(n,!0);else if(c)n=c.call(b,a,e.keyword,t,r);else if(!(n=e.definition.validate))return;if(void 0===n)throw new Error('custom keyword "'+e.keyword+'"failed to compile');var h=F.length;return F[h]=n,{code:"customRule"+h,validate:n}}}},3610:(e,t,r)=>{"use strict";var a=r(540),s=r(4063),o=r(2889),i=r(4022),n=r(9461);function l(e,t,r){var a=this._refs[r];if("string"==typeof a){if(!this._refs[a])return l.call(this,e,t,a);a=this._refs[a]}if((a=a||this._schemas[r])instanceof i)return m(a.schema,this._opts.inlineRefs)?a.schema:a.validate||this._compile(a);var s,o,n,u=c.call(this,t,r);return u&&(s=u.schema,t=u.root,n=u.baseId),s instanceof i?o=s.validate||e.call(this,s.schema,t,void 0,n):void 0!==s&&(o=m(s,this._opts.inlineRefs)?s:e.call(this,s,t,void 0,n)),o}function c(e,t){var r=a.parse(t),s=g(r),o=y(this._getId(e.schema));if(0===Object.keys(e.schema).length||s!==o){var n=b(s),l=this._refs[n];if("string"==typeof l)return u.call(this,e,l,r);if(l instanceof i)l.validate||this._compile(l),e=l;else{if(!((l=this._schemas[n])instanceof i))return;if(l.validate||this._compile(l),n==b(t))return{schema:l,root:e,baseId:o};e=l}if(!e.schema)return;o=y(this._getId(e.schema))}return p.call(this,r,o,e.schema,e)}function u(e,t,r){var a=c.call(this,e,t);if(a){var s=a.schema,o=a.baseId;e=a.root;var i=this._getId(s);return i&&(o=E(o,i)),p.call(this,r,o,s,e)}}e.exports=l,l.normalizeId=b,l.fullPath=y,l.url=E,l.ids=function(e){var t=b(this._getId(e)),r={"":t},i={"":y(t,!1)},l={},c=this;return n(e,{allKeys:!0},(function(e,t,n,u,h,p,d){if(""!==t){var m=c._getId(e),f=r[u],v=i[u]+"/"+h;if(void 0!==d&&(v+="/"+("number"==typeof d?d:o.escapeFragment(d))),"string"==typeof m){m=f=b(f?a.resolve(f,m):m);var y=c._refs[m];if("string"==typeof y&&(y=c._refs[y]),y&&y.schema){if(!s(e,y.schema))throw new Error('id "'+m+'" resolves to more than one schema')}else if(m!=b(v))if("#"==m[0]){if(l[m]&&!s(e,l[m]))throw new Error('id "'+m+'" resolves to more than one schema');l[m]=e}else c._refs[m]=v}r[t]=f,i[t]=v}})),l},l.inlineRef=m,l.schema=c;var h=o.toHash(["properties","patternProperties","enum","dependencies","definitions"]);function p(e,t,r,a){if(e.fragment=e.fragment||"","/"==e.fragment.slice(0,1)){for(var s=e.fragment.split("/"),i=1;i<s.length;i++){var n=s[i];if(n){if(void 0===(r=r[n=o.unescapeFragment(n)]))break;var l;if(!h[n]&&((l=this._getId(r))&&(t=E(t,l)),r.$ref)){var u=E(t,r.$ref),p=c.call(this,a,u);p&&(r=p.schema,a=p.root,t=p.baseId)}}}return void 0!==r&&r!==a.schema?{schema:r,root:a,baseId:t}:void 0}}var d=o.toHash(["type","format","pattern","maxLength","minLength","maxProperties","minProperties","maxItems","minItems","maximum","minimum","uniqueItems","multipleOf","required","enum"]);function m(e,t){return!1!==t&&(void 0===t||!0===t?f(e):t?v(e)<=t:void 0)}function f(e){var t;if(Array.isArray(e)){for(var r=0;r<e.length;r++)if("object"==typeof(t=e[r])&&!f(t))return!1}else for(var a in e){if("$ref"==a)return!1;if("object"==typeof(t=e[a])&&!f(t))return!1}return!0}function v(e){var t,r=0;if(Array.isArray(e)){for(var a=0;a<e.length;a++)if("object"==typeof(t=e[a])&&(r+=v(t)),r==1/0)return 1/0}else for(var s in e){if("$ref"==s)return 1/0;if(d[s])r++;else if("object"==typeof(t=e[s])&&(r+=v(t)+1),r==1/0)return 1/0}return r}function y(e,t){return!1!==t&&(e=b(e)),g(a.parse(e))}function g(e){return a.serialize(e).split("#")[0]+"#"}var P=/#\/?$/;function b(e){return e?e.replace(P,""):""}function E(e,t){return t=b(t),a.resolve(e,t)}},7753:(e,t,r)=>{"use strict";var a=r(6674),s=r(2889).toHash;e.exports=function(){var e=[{type:"number",rules:[{maximum:["exclusiveMaximum"]},{minimum:["exclusiveMinimum"]},"multipleOf","format"]},{type:"string",rules:["maxLength","minLength","pattern","format"]},{type:"array",rules:["maxItems","minItems","items","contains","uniqueItems"]},{type:"object",rules:["maxProperties","minProperties","required","dependencies","propertyNames",{properties:["additionalProperties","patternProperties"]}]},{rules:["$ref","const","enum","not","anyOf","oneOf","allOf","if"]}],t=["type","$comment"];return e.all=s(t),e.types=s(["number","integer","string","array","object","boolean","null"]),e.forEach((function(r){r.rules=r.rules.map((function(r){var s;if("object"==typeof r){var o=Object.keys(r)[0];s=r[o],r=o,s.forEach((function(r){t.push(r),e.all[r]=!0}))}return t.push(r),e.all[r]={keyword:r,code:a[r],implements:s}})),e.all.$comment={keyword:"$comment",code:a.$comment},r.type&&(e.types[r.type]=r)})),e.keywords=s(t.concat(["$schema","$id","id","$data","$async","title","description","default","definitions","examples","readOnly","writeOnly","contentMediaType","contentEncoding","additionalItems","then","else"])),e.custom={},e}},4022:(e,t,r)=>{"use strict";var a=r(2889);e.exports=function(e){a.copy(e,this)}},4442:e=>{"use strict";e.exports=function(e){for(var t,r=0,a=e.length,s=0;s<a;)r++,(t=e.charCodeAt(s++))>=55296&&t<=56319&&s<a&&56320==(64512&(t=e.charCodeAt(s)))&&s++;return r}},2889:(e,t,r)=>{"use strict";function a(e,t,r,a){var s=a?" !== ":" === ",o=a?" || ":" && ",i=a?"!":"",n=a?"":"!";switch(e){case"null":return t+s+"null";case"array":return i+"Array.isArray("+t+")";case"object":return"("+i+t+o+"typeof "+t+s+'"object"'+o+n+"Array.isArray("+t+"))";case"integer":return"(typeof "+t+s+'"number"'+o+n+"("+t+" % 1)"+o+t+s+t+(r?o+i+"isFinite("+t+")":"")+")";case"number":return"(typeof "+t+s+'"'+e+'"'+(r?o+i+"isFinite("+t+")":"")+")";default:return"typeof "+t+s+'"'+e+'"'}}e.exports={copy:function(e,t){for(var r in t=t||{},e)t[r]=e[r];return t},checkDataType:a,checkDataTypes:function(e,t,r){if(1===e.length)return a(e[0],t,r,!0);var s="",i=o(e);for(var n in i.array&&i.object&&(s=i.null?"(":"(!"+t+" || ",s+="typeof "+t+' !== "object")',delete i.null,delete i.array,delete i.object),i.number&&delete i.integer,i)s+=(s?" && ":"")+a(n,t,r,!0);return s},coerceToTypes:function(e,t){if(Array.isArray(t)){for(var r=[],a=0;a<t.length;a++){var o=t[a];(s[o]||"array"===e&&"array"===o)&&(r[r.length]=o)}if(r.length)return r}else{if(s[t])return[t];if("array"===e&&"array"===t)return["array"]}},toHash:o,getProperty:l,escapeQuotes:c,equal:r(4063),ucs2length:r(4442),varOccurences:function(e,t){t+="[^0-9]";var r=e.match(new RegExp(t,"g"));return r?r.length:0},varReplace:function(e,t,r){return t+="([^0-9])",r=r.replace(/\$/g,"$$$$"),e.replace(new RegExp(t,"g"),r+"$1")},schemaHasRules:function(e,t){if("boolean"==typeof e)return!e;for(var r in e)if(t[r])return!0},schemaHasRulesExcept:function(e,t,r){if("boolean"==typeof e)return!e&&"not"!=r;for(var a in e)if(a!=r&&t[a])return!0},schemaUnknownRules:function(e,t){if("boolean"!=typeof e)for(var r in e)if(!t[r])return r},toQuotedString:u,getPathExpr:function(e,t,r,a){return d(e,r?"'/' + "+t+(a?"":".replace(/~/g, '~0').replace(/\\//g, '~1')"):a?"'[' + "+t+" + ']'":"'[\\'' + "+t+" + '\\']'")},getPath:function(e,t,r){return d(e,u(r?"/"+m(t):l(t)))},getData:function(e,t,r){var a,s,o,i;if(""===e)return"rootData";if("/"==e[0]){if(!h.test(e))throw new Error("Invalid JSON-pointer: "+e);s=e,o="rootData"}else{if(!(i=e.match(p)))throw new Error("Invalid JSON-pointer: "+e);if(a=+i[1],"#"==(s=i[2])){if(a>=t)throw new Error("Cannot access property/index "+a+" levels up, current level is "+t);return r[t-a]}if(a>t)throw new Error("Cannot access data "+a+" levels up, current level is "+t);if(o="data"+(t-a||""),!s)return o}for(var n=o,c=s.split("/"),u=0;u<c.length;u++){var d=c[u];d&&(n+=" && "+(o+=l(f(d))))}return n},unescapeFragment:function(e){return f(decodeURIComponent(e))},unescapeJsonPointer:f,escapeFragment:function(e){return encodeURIComponent(m(e))},escapeJsonPointer:m};var s=o(["string","number","integer","boolean","null"]);function o(e){for(var t={},r=0;r<e.length;r++)t[e[r]]=!0;return t}var i=/^[a-z$_][a-z$_0-9]*$/i,n=/'|\\/g;function l(e){return"number"==typeof e?"["+e+"]":i.test(e)?"."+e:"['"+c(e)+"']"}function c(e){return e.replace(n,"\\$&").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\f/g,"\\f").replace(/\t/g,"\\t")}function u(e){return"'"+c(e)+"'"}var h=/^\/(?:[^~]|~0|~1)*$/,p=/^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;function d(e,t){return'""'==e?t:(e+" + "+t).replace(/([^\\])' \+ '/g,"$1")}function m(e){return e.replace(/~/g,"~0").replace(/\//g,"~1")}function f(e){return e.replace(/~1/g,"/").replace(/~0/g,"~")}},3978:e=>{"use strict";var t=["multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxLength","minLength","pattern","additionalItems","maxItems","minItems","uniqueItems","maxProperties","minProperties","required","additionalProperties","enum","format","const"];e.exports=function(e,r){for(var a=0;a<r.length;a++){e=JSON.parse(JSON.stringify(e));var s,o=r[a].split("/"),i=e;for(s=1;s<o.length;s++)i=i[o[s]];for(s=0;s<t.length;s++){var n=t[s],l=i[n];l&&(i[n]={anyOf:[l,{$ref:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"}]})}}return e}},1128:(e,t,r)=>{"use strict";var a=r(6680);e.exports={$id:"https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js",definitions:{simpleTypes:a.definitions.simpleTypes},type:"object",dependencies:{schema:["validate"],$data:["validate"],statements:["inline"],valid:{not:{required:["macro"]}}},properties:{type:a.properties.type,schema:{type:"boolean"},statements:{type:"boolean"},dependencies:{type:"array",items:{type:"string"}},metaSchema:{type:"object"},modifying:{type:"boolean"},valid:{type:"boolean"},$data:{type:"boolean"},async:{type:"boolean"},errors:{anyOf:[{type:"boolean"},{const:"full"}]}}}},8210:e=>{"use strict";e.exports=function(e,t,r){var a,s=" ",o=e.level,i=e.dataLevel,n=e.schema[t],l=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,h="data"+(i||""),p=e.opts.$data&&n&&n.$data;p?(s+=" var schema"+o+" = "+e.util.getData(n.$data,i,e.dataPathArr)+"; ",a="schema"+o):a=n;var d="maximum"==t,m=d?"exclusiveMaximum":"exclusiveMinimum",f=e.schema[m],v=e.opts.$data&&f&&f.$data,y=d?"<":">",g=d?">":"<",P=void 0;if(!p&&"number"!=typeof n&&void 0!==n)throw new Error(t+" must be number");if(!v&&void 0!==f&&"number"!=typeof f&&"boolean"!=typeof f)throw new Error(m+" must be number or boolean");if(v){var b,E=e.util.getData(f.$data,i,e.dataPathArr),w="exclusive"+o,_="exclType"+o,S="exclIsNumber"+o,x="' + "+(T="op"+o)+" + '";s+=" var schemaExcl"+o+" = "+E+"; ",s+=" var "+w+"; var "+_+" = typeof "+(E="schemaExcl"+o)+"; if ("+_+" != 'boolean' && "+_+" != 'undefined' && "+_+" != 'number') { ",P=m,(b=b||[]).push(s),s="",!1!==e.createErrors?(s+=" { keyword: '"+(P||"_exclusiveLimit")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: {} ",!1!==e.opts.messages&&(s+=" , message: '"+m+" should be boolean' "),e.opts.verbose&&(s+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),s+=" } "):s+=" {} ";var j=s;s=b.pop(),!e.compositeRule&&u?e.async?s+=" throw new ValidationError(["+j+"]); ":s+=" validate.errors = ["+j+"]; return false; ":s+=" var err = "+j+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s+=" } else if ( ",p&&(s+=" ("+a+" !== undefined && typeof "+a+" != 'number') || "),s+=" "+_+" == 'number' ? ( ("+w+" = "+a+" === undefined || "+E+" "+y+"= "+a+") ? "+h+" "+g+"= "+E+" : "+h+" "+g+" "+a+" ) : ( ("+w+" = "+E+" === true) ? "+h+" "+g+"= "+a+" : "+h+" "+g+" "+a+" ) || "+h+" !== "+h+") { var op"+o+" = "+w+" ? '"+y+"' : '"+y+"='; ",void 0===n&&(P=m,c=e.errSchemaPath+"/"+m,a=E,p=v)}else if(x=y,(S="number"==typeof f)&&p){var T="'"+x+"'";s+=" if ( ",p&&(s+=" ("+a+" !== undefined && typeof "+a+" != 'number') || "),s+=" ( "+a+" === undefined || "+f+" "+y+"= "+a+" ? "+h+" "+g+"= "+f+" : "+h+" "+g+" "+a+" ) || "+h+" !== "+h+") { "}else S&&void 0===n?(w=!0,P=m,c=e.errSchemaPath+"/"+m,a=f,g+="="):(S&&(a=Math[d?"min":"max"](f,n)),f===(!S||a)?(w=!0,P=m,c=e.errSchemaPath+"/"+m,g+="="):(w=!1,x+="=")),T="'"+x+"'",s+=" if ( ",p&&(s+=" ("+a+" !== undefined && typeof "+a+" != 'number') || "),s+=" "+h+" "+g+" "+a+" || "+h+" !== "+h+") { ";return P=P||t,(b=b||[]).push(s),s="",!1!==e.createErrors?(s+=" { keyword: '"+(P||"_limit")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { comparison: "+T+", limit: "+a+", exclusive: "+w+" } ",!1!==e.opts.messages&&(s+=" , message: 'should be "+x+" ",s+=p?"' + "+a:a+"'"),e.opts.verbose&&(s+=" , schema:  ",s+=p?"validate.schema"+l:""+n,s+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),s+=" } "):s+=" {} ",j=s,s=b.pop(),!e.compositeRule&&u?e.async?s+=" throw new ValidationError(["+j+"]); ":s+=" validate.errors = ["+j+"]; return false; ":s+=" var err = "+j+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s+=" } ",u&&(s+=" else { "),s}},3038:e=>{"use strict";e.exports=function(e,t,r){var a,s=" ",o=e.level,i=e.dataLevel,n=e.schema[t],l=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,h="data"+(i||""),p=e.opts.$data&&n&&n.$data;if(p?(s+=" var schema"+o+" = "+e.util.getData(n.$data,i,e.dataPathArr)+"; ",a="schema"+o):a=n,!p&&"number"!=typeof n)throw new Error(t+" must be number");s+="if ( ",p&&(s+=" ("+a+" !== undefined && typeof "+a+" != 'number') || "),s+=" "+h+".length "+("maxItems"==t?">":"<")+" "+a+") { ";var d=t,m=m||[];m.push(s),s="",!1!==e.createErrors?(s+=" { keyword: '"+(d||"_limitItems")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { limit: "+a+" } ",!1!==e.opts.messages&&(s+=" , message: 'should NOT have ",s+="maxItems"==t?"more":"fewer",s+=" than ",s+=p?"' + "+a+" + '":""+n,s+=" items' "),e.opts.verbose&&(s+=" , schema:  ",s+=p?"validate.schema"+l:""+n,s+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),s+=" } "):s+=" {} ";var f=s;return s=m.pop(),!e.compositeRule&&u?e.async?s+=" throw new ValidationError(["+f+"]); ":s+=" validate.errors = ["+f+"]; return false; ":s+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s+="} ",u&&(s+=" else { "),s}},425:e=>{"use strict";e.exports=function(e,t,r){var a,s=" ",o=e.level,i=e.dataLevel,n=e.schema[t],l=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,h="data"+(i||""),p=e.opts.$data&&n&&n.$data;if(p?(s+=" var schema"+o+" = "+e.util.getData(n.$data,i,e.dataPathArr)+"; ",a="schema"+o):a=n,!p&&"number"!=typeof n)throw new Error(t+" must be number");var d="maxLength"==t?">":"<";s+="if ( ",p&&(s+=" ("+a+" !== undefined && typeof "+a+" != 'number') || "),!1===e.opts.unicode?s+=" "+h+".length ":s+=" ucs2length("+h+") ",s+=" "+d+" "+a+") { ";var m=t,f=f||[];f.push(s),s="",!1!==e.createErrors?(s+=" { keyword: '"+(m||"_limitLength")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { limit: "+a+" } ",!1!==e.opts.messages&&(s+=" , message: 'should NOT be ",s+="maxLength"==t?"longer":"shorter",s+=" than ",s+=p?"' + "+a+" + '":""+n,s+=" characters' "),e.opts.verbose&&(s+=" , schema:  ",s+=p?"validate.schema"+l:""+n,s+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),s+=" } "):s+=" {} ";var v=s;return s=f.pop(),!e.compositeRule&&u?e.async?s+=" throw new ValidationError(["+v+"]); ":s+=" validate.errors = ["+v+"]; return false; ":s+=" var err = "+v+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s+="} ",u&&(s+=" else { "),s}},8204:e=>{"use strict";e.exports=function(e,t,r){var a,s=" ",o=e.level,i=e.dataLevel,n=e.schema[t],l=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,h="data"+(i||""),p=e.opts.$data&&n&&n.$data;if(p?(s+=" var schema"+o+" = "+e.util.getData(n.$data,i,e.dataPathArr)+"; ",a="schema"+o):a=n,!p&&"number"!=typeof n)throw new Error(t+" must be number");s+="if ( ",p&&(s+=" ("+a+" !== undefined && typeof "+a+" != 'number') || "),s+=" Object.keys("+h+").length "+("maxProperties"==t?">":"<")+" "+a+") { ";var d=t,m=m||[];m.push(s),s="",!1!==e.createErrors?(s+=" { keyword: '"+(d||"_limitProperties")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { limit: "+a+" } ",!1!==e.opts.messages&&(s+=" , message: 'should NOT have ",s+="maxProperties"==t?"more":"fewer",s+=" than ",s+=p?"' + "+a+" + '":""+n,s+=" properties' "),e.opts.verbose&&(s+=" , schema:  ",s+=p?"validate.schema"+l:""+n,s+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),s+=" } "):s+=" {} ";var f=s;return s=m.pop(),!e.compositeRule&&u?e.async?s+=" throw new ValidationError(["+f+"]); ":s+=" validate.errors = ["+f+"]; return false; ":s+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s+="} ",u&&(s+=" else { "),s}},2988:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.schema[t],o=e.schemaPath+e.util.getProperty(t),i=e.errSchemaPath+"/"+t,n=!e.opts.allErrors,l=e.util.copy(e),c="";l.level++;var u="valid"+l.level,h=l.baseId,p=!0,d=s;if(d)for(var m,f=-1,v=d.length-1;f<v;)m=d[f+=1],(e.opts.strictKeywords?"object"==typeof m&&Object.keys(m).length>0||!1===m:e.util.schemaHasRules(m,e.RULES.all))&&(p=!1,l.schema=m,l.schemaPath=o+"["+f+"]",l.errSchemaPath=i+"/"+f,a+="  "+e.validate(l)+" ",l.baseId=h,n&&(a+=" if ("+u+") { ",c+="}"));return n&&(a+=p?" if (true) { ":" "+c.slice(0,-1)+" "),a}},9996:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,i=e.schema[t],n=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,u="data"+(o||""),h="valid"+s,p="errs__"+s,d=e.util.copy(e),m="";d.level++;var f="valid"+d.level,v=i.every((function(t){return e.opts.strictKeywords?"object"==typeof t&&Object.keys(t).length>0||!1===t:e.util.schemaHasRules(t,e.RULES.all)}));if(v){var y=d.baseId;a+=" var "+p+" = errors; var "+h+" = false;  ";var g=e.compositeRule;e.compositeRule=d.compositeRule=!0;var P=i;if(P)for(var b,E=-1,w=P.length-1;E<w;)b=P[E+=1],d.schema=b,d.schemaPath=n+"["+E+"]",d.errSchemaPath=l+"/"+E,a+="  "+e.validate(d)+" ",d.baseId=y,a+=" "+h+" = "+h+" || "+f+"; if (!"+h+") { ",m+="}";e.compositeRule=d.compositeRule=g,a+=" "+m+" if (!"+h+") {   var err =   ",!1!==e.createErrors?(a+=" { keyword: 'anyOf' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: {} ",!1!==e.opts.messages&&(a+=" , message: 'should match some schema in anyOf' "),e.opts.verbose&&(a+=" , schema: validate.schema"+n+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ",a+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&c&&(e.async?a+=" throw new ValidationError(vErrors); ":a+=" validate.errors = vErrors; return false; "),a+=" } else {  errors = "+p+"; if (vErrors !== null) { if ("+p+") vErrors.length = "+p+"; else vErrors = null; } ",e.opts.allErrors&&(a+=" } ")}else c&&(a+=" if (true) { ");return a}},7812:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.schema[t],o=e.errSchemaPath+"/"+t,i=(e.opts.allErrors,e.util.toQuotedString(s));return!0===e.opts.$comment?a+=" console.log("+i+");":"function"==typeof e.opts.$comment&&(a+=" self._opts.$comment("+i+", "+e.util.toQuotedString(o)+", validate.root.schema);"),a}},5306:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,i=e.schema[t],n=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,u="data"+(o||""),h="valid"+s,p=e.opts.$data&&i&&i.$data;p&&(a+=" var schema"+s+" = "+e.util.getData(i.$data,o,e.dataPathArr)+"; "),p||(a+=" var schema"+s+" = validate.schema"+n+";"),a+="var "+h+" = equal("+u+", schema"+s+"); if (!"+h+") {   ";var d=d||[];d.push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'const' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { allowedValue: schema"+s+" } ",!1!==e.opts.messages&&(a+=" , message: 'should be equal to constant' "),e.opts.verbose&&(a+=" , schema: validate.schema"+n+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ";var m=a;return a=d.pop(),!e.compositeRule&&c?e.async?a+=" throw new ValidationError(["+m+"]); ":a+=" validate.errors = ["+m+"]; return false; ":a+=" var err = "+m+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" }",c&&(a+=" else { "),a}},2840:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,i=e.schema[t],n=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,u="data"+(o||""),h="valid"+s,p="errs__"+s,d=e.util.copy(e);d.level++;var m="valid"+d.level,f="i"+s,v=d.dataLevel=e.dataLevel+1,y="data"+v,g=e.baseId,P=e.opts.strictKeywords?"object"==typeof i&&Object.keys(i).length>0||!1===i:e.util.schemaHasRules(i,e.RULES.all);if(a+="var "+p+" = errors;var "+h+";",P){var b=e.compositeRule;e.compositeRule=d.compositeRule=!0,d.schema=i,d.schemaPath=n,d.errSchemaPath=l,a+=" var "+m+" = false; for (var "+f+" = 0; "+f+" < "+u+".length; "+f+"++) { ",d.errorPath=e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers,!0);var E=u+"["+f+"]";d.dataPathArr[v]=f;var w=e.validate(d);d.baseId=g,e.util.varOccurences(w,y)<2?a+=" "+e.util.varReplace(w,y,E)+" ":a+=" var "+y+" = "+E+"; "+w+" ",a+=" if ("+m+") break; }  ",e.compositeRule=d.compositeRule=b,a+="  if (!"+m+") {"}else a+=" if ("+u+".length == 0) {";var _=_||[];_.push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'contains' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: {} ",!1!==e.opts.messages&&(a+=" , message: 'should contain a valid item' "),e.opts.verbose&&(a+=" , schema: validate.schema"+n+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ";var S=a;return a=_.pop(),!e.compositeRule&&c?e.async?a+=" throw new ValidationError(["+S+"]); ":a+=" validate.errors = ["+S+"]; return false; ":a+=" var err = "+S+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" } else { ",P&&(a+="  errors = "+p+"; if (vErrors !== null) { if ("+p+") vErrors.length = "+p+"; else vErrors = null; } "),e.opts.allErrors&&(a+=" } "),a}},4165:e=>{"use strict";e.exports=function(e,t,r){var a,s,o=" ",i=e.level,n=e.dataLevel,l=e.schema[t],c=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,h=!e.opts.allErrors,p="data"+(n||""),d="valid"+i,m="errs__"+i,f=e.opts.$data&&l&&l.$data;f?(o+=" var schema"+i+" = "+e.util.getData(l.$data,n,e.dataPathArr)+"; ",s="schema"+i):s=l;var v,y,g,P,b,E=this,w="definition"+i,_=E.definition,S="";if(f&&_.$data){b="keywordValidate"+i;var x=_.validateSchema;o+=" var "+w+" = RULES.custom['"+t+"'].definition; var "+b+" = "+w+".validate;"}else{if(!(P=e.useCustomRule(E,l,e.schema,e)))return;s="validate.schema"+c,b=P.code,v=_.compile,y=_.inline,g=_.macro}var j=b+".errors",T="i"+i,F="ruleErr"+i,$=_.async;if($&&!e.async)throw new Error("async keyword in sync schema");if(y||g||(o+=j+" = null;"),o+="var "+m+" = errors;var "+d+";",f&&_.$data&&(S+="}",o+=" if ("+s+" === undefined) { "+d+" = true; } else { ",x&&(S+="}",o+=" "+d+" = "+w+".validateSchema("+s+"); if ("+d+") { ")),y)_.statements?o+=" "+P.validate+" ":o+=" "+d+" = "+P.validate+"; ";else if(g){var D=e.util.copy(e);S="",D.level++;var O="valid"+D.level;D.schema=P.validate,D.schemaPath="";var R=e.compositeRule;e.compositeRule=D.compositeRule=!0;var C=e.validate(D).replace(/validate\.schema/g,b);e.compositeRule=D.compositeRule=R,o+=" "+C}else{(L=L||[]).push(o),o="",o+="  "+b+".call( ",e.opts.passContext?o+="this":o+="self",v||!1===_.schema?o+=" , "+p+" ":o+=" , "+s+" , "+p+" , validate.schema"+e.schemaPath+" ",o+=" , (dataPath || '')",'""'!=e.errorPath&&(o+=" + "+e.errorPath);var k=n?"data"+(n-1||""):"parentData",I=n?e.dataPathArr[n]:"parentDataProperty",A=o+=" , "+k+" , "+I+" , rootData )  ";o=L.pop(),!1===_.errors?(o+=" "+d+" = ",$&&(o+="await "),o+=A+"; "):o+=$?" var "+(j="customErrors"+i)+" = null; try { "+d+" = await "+A+"; } catch (e) { "+d+" = false; if (e instanceof ValidationError) "+j+" = e.errors; else throw e; } ":" "+j+" = null; "+d+" = "+A+"; "}if(_.modifying&&(o+=" if ("+k+") "+p+" = "+k+"["+I+"];"),o+=""+S,_.valid)h&&(o+=" if (true) { ");else{var L;o+=" if ( ",void 0===_.valid?(o+=" !",o+=g?""+O:""+d):o+=" "+!_.valid+" ",o+=") { ",a=E.keyword,(L=L||[]).push(o),o="",(L=L||[]).push(o),o="",!1!==e.createErrors?(o+=" { keyword: '"+(a||"custom")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { keyword: '"+E.keyword+"' } ",!1!==e.opts.messages&&(o+=" , message: 'should pass \""+E.keyword+"\" keyword validation' "),e.opts.verbose&&(o+=" , schema: validate.schema"+c+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),o+=" } "):o+=" {} ";var V=o;o=L.pop(),!e.compositeRule&&h?e.async?o+=" throw new ValidationError(["+V+"]); ":o+=" validate.errors = ["+V+"]; return false; ":o+=" var err = "+V+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";var N=o;o=L.pop(),y?_.errors?"full"!=_.errors&&(o+="  for (var "+T+"="+m+"; "+T+"<errors; "+T+"++) { var "+F+" = vErrors["+T+"]; if ("+F+".dataPath === undefined) "+F+".dataPath = (dataPath || '') + "+e.errorPath+"; if ("+F+".schemaPath === undefined) { "+F+'.schemaPath = "'+u+'"; } ',e.opts.verbose&&(o+=" "+F+".schema = "+s+"; "+F+".data = "+p+"; "),o+=" } "):!1===_.errors?o+=" "+N+" ":(o+=" if ("+m+" == errors) { "+N+" } else {  for (var "+T+"="+m+"; "+T+"<errors; "+T+"++) { var "+F+" = vErrors["+T+"]; if ("+F+".dataPath === undefined) "+F+".dataPath = (dataPath || '') + "+e.errorPath+"; if ("+F+".schemaPath === undefined) { "+F+'.schemaPath = "'+u+'"; } ',e.opts.verbose&&(o+=" "+F+".schema = "+s+"; "+F+".data = "+p+"; "),o+=" } } "):g?(o+="   var err =   ",!1!==e.createErrors?(o+=" { keyword: '"+(a||"custom")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { keyword: '"+E.keyword+"' } ",!1!==e.opts.messages&&(o+=" , message: 'should pass \""+E.keyword+"\" keyword validation' "),e.opts.verbose&&(o+=" , schema: validate.schema"+c+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+p+" "),o+=" } "):o+=" {} ",o+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&h&&(e.async?o+=" throw new ValidationError(vErrors); ":o+=" validate.errors = vErrors; return false; ")):!1===_.errors?o+=" "+N+" ":(o+=" if (Array.isArray("+j+")) { if (vErrors === null) vErrors = "+j+"; else vErrors = vErrors.concat("+j+"); errors = vErrors.length;  for (var "+T+"="+m+"; "+T+"<errors; "+T+"++) { var "+F+" = vErrors["+T+"]; if ("+F+".dataPath === undefined) "+F+".dataPath = (dataPath || '') + "+e.errorPath+";  "+F+'.schemaPath = "'+u+'";  ',e.opts.verbose&&(o+=" "+F+".schema = "+s+"; "+F+".data = "+p+"; "),o+=" } } else { "+N+" } "),o+=" } ",h&&(o+=" else { ")}return o}},6659:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,i=e.schema[t],n=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,u="data"+(o||""),h="errs__"+s,p=e.util.copy(e),d="";p.level++;var m="valid"+p.level,f={},v={},y=e.opts.ownProperties;for(E in i)if("__proto__"!=E){var g=i[E],P=Array.isArray(g)?v:f;P[E]=g}a+="var "+h+" = errors;";var b=e.errorPath;for(var E in a+="var missing"+s+";",v)if((P=v[E]).length){if(a+=" if ( "+u+e.util.getProperty(E)+" !== undefined ",y&&(a+=" && Object.prototype.hasOwnProperty.call("+u+", '"+e.util.escapeQuotes(E)+"') "),c){a+=" && ( ";var w=P;if(w)for(var _=-1,S=w.length-1;_<S;)D=w[_+=1],_&&(a+=" || "),a+=" ( ( "+(k=u+(C=e.util.getProperty(D)))+" === undefined ",y&&(a+=" || ! Object.prototype.hasOwnProperty.call("+u+", '"+e.util.escapeQuotes(D)+"') "),a+=") && (missing"+s+" = "+e.util.toQuotedString(e.opts.jsonPointers?D:C)+") ) ";a+=")) {  ";var x="missing"+s,j="' + "+x+" + '";e.opts._errorDataPathProperty&&(e.errorPath=e.opts.jsonPointers?e.util.getPathExpr(b,x,!0):b+" + "+x);var T=T||[];T.push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'dependencies' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { property: '"+e.util.escapeQuotes(E)+"', missingProperty: '"+j+"', depsCount: "+P.length+", deps: '"+e.util.escapeQuotes(1==P.length?P[0]:P.join(", "))+"' } ",!1!==e.opts.messages&&(a+=" , message: 'should have ",1==P.length?a+="property "+e.util.escapeQuotes(P[0]):a+="properties "+e.util.escapeQuotes(P.join(", ")),a+=" when property "+e.util.escapeQuotes(E)+" is present' "),e.opts.verbose&&(a+=" , schema: validate.schema"+n+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ";var F=a;a=T.pop(),!e.compositeRule&&c?e.async?a+=" throw new ValidationError(["+F+"]); ":a+=" validate.errors = ["+F+"]; return false; ":a+=" var err = "+F+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}else{a+=" ) { ";var $=P;if($)for(var D,O=-1,R=$.length-1;O<R;){D=$[O+=1];var C=e.util.getProperty(D),k=(j=e.util.escapeQuotes(D),u+C);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(b,D,e.opts.jsonPointers)),a+=" if ( "+k+" === undefined ",y&&(a+=" || ! Object.prototype.hasOwnProperty.call("+u+", '"+e.util.escapeQuotes(D)+"') "),a+=") {  var err =   ",!1!==e.createErrors?(a+=" { keyword: 'dependencies' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { property: '"+e.util.escapeQuotes(E)+"', missingProperty: '"+j+"', depsCount: "+P.length+", deps: '"+e.util.escapeQuotes(1==P.length?P[0]:P.join(", "))+"' } ",!1!==e.opts.messages&&(a+=" , message: 'should have ",1==P.length?a+="property "+e.util.escapeQuotes(P[0]):a+="properties "+e.util.escapeQuotes(P.join(", ")),a+=" when property "+e.util.escapeQuotes(E)+" is present' "),e.opts.verbose&&(a+=" , schema: validate.schema"+n+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ",a+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } "}}a+=" }   ",c&&(d+="}",a+=" else { ")}e.errorPath=b;var I=p.baseId;for(var E in f)g=f[E],(e.opts.strictKeywords?"object"==typeof g&&Object.keys(g).length>0||!1===g:e.util.schemaHasRules(g,e.RULES.all))&&(a+=" "+m+" = true; if ( "+u+e.util.getProperty(E)+" !== undefined ",y&&(a+=" && Object.prototype.hasOwnProperty.call("+u+", '"+e.util.escapeQuotes(E)+"') "),a+=") { ",p.schema=g,p.schemaPath=n+e.util.getProperty(E),p.errSchemaPath=l+"/"+e.util.escapeFragment(E),a+="  "+e.validate(p)+" ",p.baseId=I,a+=" }  ",c&&(a+=" if ("+m+") { ",d+="}"));return c&&(a+="   "+d+" if ("+h+" == errors) {"),a}},1740:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,i=e.schema[t],n=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,u="data"+(o||""),h="valid"+s,p=e.opts.$data&&i&&i.$data;p&&(a+=" var schema"+s+" = "+e.util.getData(i.$data,o,e.dataPathArr)+"; ");var d="i"+s,m="schema"+s;p||(a+=" var "+m+" = validate.schema"+n+";"),a+="var "+h+";",p&&(a+=" if (schema"+s+" === undefined) "+h+" = true; else if (!Array.isArray(schema"+s+")) "+h+" = false; else {"),a+=h+" = false;for (var "+d+"=0; "+d+"<"+m+".length; "+d+"++) if (equal("+u+", "+m+"["+d+"])) { "+h+" = true; break; }",p&&(a+="  }  "),a+=" if (!"+h+") {   ";var f=f||[];f.push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'enum' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { allowedValues: schema"+s+" } ",!1!==e.opts.messages&&(a+=" , message: 'should be equal to one of the allowed values' "),e.opts.verbose&&(a+=" , schema: validate.schema"+n+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ";var v=a;return a=f.pop(),!e.compositeRule&&c?e.async?a+=" throw new ValidationError(["+v+"]); ":a+=" validate.errors = ["+v+"]; return false; ":a+=" var err = "+v+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" }",c&&(a+=" else { "),a}},9014:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,i=e.schema[t],n=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,u="data"+(o||"");if(!1===e.opts.format)return c&&(a+=" if (true) { "),a;var h,p=e.opts.$data&&i&&i.$data;p?(a+=" var schema"+s+" = "+e.util.getData(i.$data,o,e.dataPathArr)+"; ",h="schema"+s):h=i;var d=e.opts.unknownFormats,m=Array.isArray(d);if(p)a+=" var "+(f="format"+s)+" = formats["+h+"]; var "+(v="isObject"+s)+" = typeof "+f+" == 'object' && !("+f+" instanceof RegExp) && "+f+".validate; var "+(y="formatType"+s)+" = "+v+" && "+f+".type || 'string'; if ("+v+") { ",e.async&&(a+=" var async"+s+" = "+f+".async; "),a+=" "+f+" = "+f+".validate; } if (  ",p&&(a+=" ("+h+" !== undefined && typeof "+h+" != 'string') || "),a+=" (","ignore"!=d&&(a+=" ("+h+" && !"+f+" ",m&&(a+=" && self._opts.unknownFormats.indexOf("+h+") == -1 "),a+=") || "),a+=" ("+f+" && "+y+" == '"+r+"' && !(typeof "+f+" == 'function' ? ",e.async?a+=" (async"+s+" ? await "+f+"("+u+") : "+f+"("+u+")) ":a+=" "+f+"("+u+") ",a+=" : "+f+".test("+u+"))))) {";else{var f;if(!(f=e.formats[i])){if("ignore"==d)return e.logger.warn('unknown format "'+i+'" ignored in schema at path "'+e.errSchemaPath+'"'),c&&(a+=" if (true) { "),a;if(m&&d.indexOf(i)>=0)return c&&(a+=" if (true) { "),a;throw new Error('unknown format "'+i+'" is used in schema at path "'+e.errSchemaPath+'"')}var v,y=(v="object"==typeof f&&!(f instanceof RegExp)&&f.validate)&&f.type||"string";if(v){var g=!0===f.async;f=f.validate}if(y!=r)return c&&(a+=" if (true) { "),a;if(g){if(!e.async)throw new Error("async format in sync schema");a+=" if (!(await "+(P="formats"+e.util.getProperty(i)+".validate")+"("+u+"))) { "}else{a+=" if (! ";var P="formats"+e.util.getProperty(i);v&&(P+=".validate"),a+="function"==typeof f?" "+P+"("+u+") ":" "+P+".test("+u+") ",a+=") { "}}var b=b||[];b.push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'format' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { format:  ",a+=p?""+h:""+e.util.toQuotedString(i),a+="  } ",!1!==e.opts.messages&&(a+=" , message: 'should match format \"",a+=p?"' + "+h+" + '":""+e.util.escapeQuotes(i),a+="\"' "),e.opts.verbose&&(a+=" , schema:  ",a+=p?"validate.schema"+n:""+e.util.toQuotedString(i),a+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ";var E=a;return a=b.pop(),!e.compositeRule&&c?e.async?a+=" throw new ValidationError(["+E+"]); ":a+=" validate.errors = ["+E+"]; return false; ":a+=" var err = "+E+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" } ",c&&(a+=" else { "),a}},7231:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,i=e.schema[t],n=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,u="data"+(o||""),h="valid"+s,p="errs__"+s,d=e.util.copy(e);d.level++;var m="valid"+d.level,f=e.schema.then,v=e.schema.else,y=void 0!==f&&(e.opts.strictKeywords?"object"==typeof f&&Object.keys(f).length>0||!1===f:e.util.schemaHasRules(f,e.RULES.all)),g=void 0!==v&&(e.opts.strictKeywords?"object"==typeof v&&Object.keys(v).length>0||!1===v:e.util.schemaHasRules(v,e.RULES.all)),P=d.baseId;if(y||g){var b;d.createErrors=!1,d.schema=i,d.schemaPath=n,d.errSchemaPath=l,a+=" var "+p+" = errors; var "+h+" = true;  ";var E=e.compositeRule;e.compositeRule=d.compositeRule=!0,a+="  "+e.validate(d)+" ",d.baseId=P,d.createErrors=!0,a+="  errors = "+p+"; if (vErrors !== null) { if ("+p+") vErrors.length = "+p+"; else vErrors = null; }  ",e.compositeRule=d.compositeRule=E,y?(a+=" if ("+m+") {  ",d.schema=e.schema.then,d.schemaPath=e.schemaPath+".then",d.errSchemaPath=e.errSchemaPath+"/then",a+="  "+e.validate(d)+" ",d.baseId=P,a+=" "+h+" = "+m+"; ",y&&g?a+=" var "+(b="ifClause"+s)+" = 'then'; ":b="'then'",a+=" } ",g&&(a+=" else { ")):a+=" if (!"+m+") { ",g&&(d.schema=e.schema.else,d.schemaPath=e.schemaPath+".else",d.errSchemaPath=e.errSchemaPath+"/else",a+="  "+e.validate(d)+" ",d.baseId=P,a+=" "+h+" = "+m+"; ",y&&g?a+=" var "+(b="ifClause"+s)+" = 'else'; ":b="'else'",a+=" } "),a+=" if (!"+h+") {   var err =   ",!1!==e.createErrors?(a+=" { keyword: 'if' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { failingKeyword: "+b+" } ",!1!==e.opts.messages&&(a+=" , message: 'should match \"' + "+b+" + '\" schema' "),e.opts.verbose&&(a+=" , schema: validate.schema"+n+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ",a+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&c&&(e.async?a+=" throw new ValidationError(vErrors); ":a+=" validate.errors = vErrors; return false; "),a+=" }   ",c&&(a+=" else { ")}else c&&(a+=" if (true) { ");return a}},6674:(e,t,r)=>{"use strict";e.exports={$ref:r(2392),allOf:r(2988),anyOf:r(9996),$comment:r(7812),const:r(5306),contains:r(2840),dependencies:r(6659),enum:r(1740),format:r(9014),if:r(7231),items:r(7482),maximum:r(8210),minimum:r(8210),maxItems:r(3038),minItems:r(3038),maxLength:r(425),minLength:r(425),maxProperties:r(8204),minProperties:r(8204),multipleOf:r(3673),not:r(8528),oneOf:r(9709),pattern:r(9614),properties:r(1175),propertyNames:r(8441),required:r(1287),uniqueItems:r(3603),validate:r(9508)}},7482:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,i=e.schema[t],n=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,u="data"+(o||""),h="valid"+s,p="errs__"+s,d=e.util.copy(e),m="";d.level++;var f="valid"+d.level,v="i"+s,y=d.dataLevel=e.dataLevel+1,g="data"+y,P=e.baseId;if(a+="var "+p+" = errors;var "+h+";",Array.isArray(i)){var b=e.schema.additionalItems;if(!1===b){a+=" "+h+" = "+u+".length <= "+i.length+"; ";var E=l;l=e.errSchemaPath+"/additionalItems",a+="  if (!"+h+") {   ";var w=w||[];w.push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'additionalItems' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { limit: "+i.length+" } ",!1!==e.opts.messages&&(a+=" , message: 'should NOT have more than "+i.length+" items' "),e.opts.verbose&&(a+=" , schema: false , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ";var _=a;a=w.pop(),!e.compositeRule&&c?e.async?a+=" throw new ValidationError(["+_+"]); ":a+=" validate.errors = ["+_+"]; return false; ":a+=" var err = "+_+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" } ",l=E,c&&(m+="}",a+=" else { ")}var S=i;if(S)for(var x,j=-1,T=S.length-1;j<T;)if(x=S[j+=1],e.opts.strictKeywords?"object"==typeof x&&Object.keys(x).length>0||!1===x:e.util.schemaHasRules(x,e.RULES.all)){a+=" "+f+" = true; if ("+u+".length > "+j+") { ";var F=u+"["+j+"]";d.schema=x,d.schemaPath=n+"["+j+"]",d.errSchemaPath=l+"/"+j,d.errorPath=e.util.getPathExpr(e.errorPath,j,e.opts.jsonPointers,!0),d.dataPathArr[y]=j;var $=e.validate(d);d.baseId=P,e.util.varOccurences($,g)<2?a+=" "+e.util.varReplace($,g,F)+" ":a+=" var "+g+" = "+F+"; "+$+" ",a+=" }  ",c&&(a+=" if ("+f+") { ",m+="}")}"object"==typeof b&&(e.opts.strictKeywords?"object"==typeof b&&Object.keys(b).length>0||!1===b:e.util.schemaHasRules(b,e.RULES.all))&&(d.schema=b,d.schemaPath=e.schemaPath+".additionalItems",d.errSchemaPath=e.errSchemaPath+"/additionalItems",a+=" "+f+" = true; if ("+u+".length > "+i.length+") {  for (var "+v+" = "+i.length+"; "+v+" < "+u+".length; "+v+"++) { ",d.errorPath=e.util.getPathExpr(e.errorPath,v,e.opts.jsonPointers,!0),F=u+"["+v+"]",d.dataPathArr[y]=v,$=e.validate(d),d.baseId=P,e.util.varOccurences($,g)<2?a+=" "+e.util.varReplace($,g,F)+" ":a+=" var "+g+" = "+F+"; "+$+" ",c&&(a+=" if (!"+f+") break; "),a+=" } }  ",c&&(a+=" if ("+f+") { ",m+="}"))}else(e.opts.strictKeywords?"object"==typeof i&&Object.keys(i).length>0||!1===i:e.util.schemaHasRules(i,e.RULES.all))&&(d.schema=i,d.schemaPath=n,d.errSchemaPath=l,a+="  for (var "+v+" = 0; "+v+" < "+u+".length; "+v+"++) { ",d.errorPath=e.util.getPathExpr(e.errorPath,v,e.opts.jsonPointers,!0),F=u+"["+v+"]",d.dataPathArr[y]=v,$=e.validate(d),d.baseId=P,e.util.varOccurences($,g)<2?a+=" "+e.util.varReplace($,g,F)+" ":a+=" var "+g+" = "+F+"; "+$+" ",c&&(a+=" if (!"+f+") break; "),a+=" }");return c&&(a+=" "+m+" if ("+p+" == errors) {"),a}},3673:e=>{"use strict";e.exports=function(e,t,r){var a,s=" ",o=e.level,i=e.dataLevel,n=e.schema[t],l=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,h="data"+(i||""),p=e.opts.$data&&n&&n.$data;if(p?(s+=" var schema"+o+" = "+e.util.getData(n.$data,i,e.dataPathArr)+"; ",a="schema"+o):a=n,!p&&"number"!=typeof n)throw new Error(t+" must be number");s+="var division"+o+";if (",p&&(s+=" "+a+" !== undefined && ( typeof "+a+" != 'number' || "),s+=" (division"+o+" = "+h+" / "+a+", ",e.opts.multipleOfPrecision?s+=" Math.abs(Math.round(division"+o+") - division"+o+") > 1e-"+e.opts.multipleOfPrecision+" ":s+=" division"+o+" !== parseInt(division"+o+") ",s+=" ) ",p&&(s+="  )  "),s+=" ) {   ";var d=d||[];d.push(s),s="",!1!==e.createErrors?(s+=" { keyword: 'multipleOf' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { multipleOf: "+a+" } ",!1!==e.opts.messages&&(s+=" , message: 'should be multiple of ",s+=p?"' + "+a:a+"'"),e.opts.verbose&&(s+=" , schema:  ",s+=p?"validate.schema"+l:""+n,s+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),s+=" } "):s+=" {} ";var m=s;return s=d.pop(),!e.compositeRule&&u?e.async?s+=" throw new ValidationError(["+m+"]); ":s+=" validate.errors = ["+m+"]; return false; ":s+=" var err = "+m+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s+="} ",u&&(s+=" else { "),s}},8528:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,i=e.schema[t],n=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,u="data"+(o||""),h="errs__"+s,p=e.util.copy(e);p.level++;var d="valid"+p.level;if(e.opts.strictKeywords?"object"==typeof i&&Object.keys(i).length>0||!1===i:e.util.schemaHasRules(i,e.RULES.all)){p.schema=i,p.schemaPath=n,p.errSchemaPath=l,a+=" var "+h+" = errors;  ";var m,f=e.compositeRule;e.compositeRule=p.compositeRule=!0,p.createErrors=!1,p.opts.allErrors&&(m=p.opts.allErrors,p.opts.allErrors=!1),a+=" "+e.validate(p)+" ",p.createErrors=!0,m&&(p.opts.allErrors=m),e.compositeRule=p.compositeRule=f,a+=" if ("+d+") {   ";var v=v||[];v.push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'not' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: {} ",!1!==e.opts.messages&&(a+=" , message: 'should NOT be valid' "),e.opts.verbose&&(a+=" , schema: validate.schema"+n+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ";var y=a;a=v.pop(),!e.compositeRule&&c?e.async?a+=" throw new ValidationError(["+y+"]); ":a+=" validate.errors = ["+y+"]; return false; ":a+=" var err = "+y+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" } else {  errors = "+h+"; if (vErrors !== null) { if ("+h+") vErrors.length = "+h+"; else vErrors = null; } ",e.opts.allErrors&&(a+=" } ")}else a+="  var err =   ",!1!==e.createErrors?(a+=" { keyword: 'not' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: {} ",!1!==e.opts.messages&&(a+=" , message: 'should NOT be valid' "),e.opts.verbose&&(a+=" , schema: validate.schema"+n+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ",a+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",c&&(a+=" if (false) { ");return a}},9709:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,i=e.schema[t],n=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,u="data"+(o||""),h="valid"+s,p="errs__"+s,d=e.util.copy(e),m="";d.level++;var f="valid"+d.level,v=d.baseId,y="prevValid"+s,g="passingSchemas"+s;a+="var "+p+" = errors , "+y+" = false , "+h+" = false , "+g+" = null; ";var P=e.compositeRule;e.compositeRule=d.compositeRule=!0;var b=i;if(b)for(var E,w=-1,_=b.length-1;w<_;)E=b[w+=1],(e.opts.strictKeywords?"object"==typeof E&&Object.keys(E).length>0||!1===E:e.util.schemaHasRules(E,e.RULES.all))?(d.schema=E,d.schemaPath=n+"["+w+"]",d.errSchemaPath=l+"/"+w,a+="  "+e.validate(d)+" ",d.baseId=v):a+=" var "+f+" = true; ",w&&(a+=" if ("+f+" && "+y+") { "+h+" = false; "+g+" = ["+g+", "+w+"]; } else { ",m+="}"),a+=" if ("+f+") { "+h+" = "+y+" = true; "+g+" = "+w+"; }";return e.compositeRule=d.compositeRule=P,a+=m+"if (!"+h+") {   var err =   ",!1!==e.createErrors?(a+=" { keyword: 'oneOf' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { passingSchemas: "+g+" } ",!1!==e.opts.messages&&(a+=" , message: 'should match exactly one schema in oneOf' "),e.opts.verbose&&(a+=" , schema: validate.schema"+n+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ",a+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&c&&(e.async?a+=" throw new ValidationError(vErrors); ":a+=" validate.errors = vErrors; return false; "),a+="} else {  errors = "+p+"; if (vErrors !== null) { if ("+p+") vErrors.length = "+p+"; else vErrors = null; }",e.opts.allErrors&&(a+=" } "),a}},9614:e=>{"use strict";e.exports=function(e,t,r){var a,s=" ",o=e.level,i=e.dataLevel,n=e.schema[t],l=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,h="data"+(i||""),p=e.opts.$data&&n&&n.$data;p?(s+=" var schema"+o+" = "+e.util.getData(n.$data,i,e.dataPathArr)+"; ",a="schema"+o):a=n,s+="if ( ",p&&(s+=" ("+a+" !== undefined && typeof "+a+" != 'string') || "),s+=" !"+(p?"(new RegExp("+a+"))":e.usePattern(n))+".test("+h+") ) {   ";var d=d||[];d.push(s),s="",!1!==e.createErrors?(s+=" { keyword: 'pattern' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { pattern:  ",s+=p?""+a:""+e.util.toQuotedString(n),s+="  } ",!1!==e.opts.messages&&(s+=" , message: 'should match pattern \"",s+=p?"' + "+a+" + '":""+e.util.escapeQuotes(n),s+="\"' "),e.opts.verbose&&(s+=" , schema:  ",s+=p?"validate.schema"+l:""+e.util.toQuotedString(n),s+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),s+=" } "):s+=" {} ";var m=s;return s=d.pop(),!e.compositeRule&&u?e.async?s+=" throw new ValidationError(["+m+"]); ":s+=" validate.errors = ["+m+"]; return false; ":s+=" var err = "+m+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s+="} ",u&&(s+=" else { "),s}},1175:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,i=e.schema[t],n=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,u="data"+(o||""),h="errs__"+s,p=e.util.copy(e),d="";p.level++;var m="valid"+p.level,f="key"+s,v="idx"+s,y=p.dataLevel=e.dataLevel+1,g="data"+y,P="dataProperties"+s,b=Object.keys(i||{}).filter(C),E=e.schema.patternProperties||{},w=Object.keys(E).filter(C),_=e.schema.additionalProperties,S=b.length||w.length,x=!1===_,j="object"==typeof _&&Object.keys(_).length,T=e.opts.removeAdditional,F=x||j||T,$=e.opts.ownProperties,D=e.baseId,O=e.schema.required;if(O&&(!e.opts.$data||!O.$data)&&O.length<e.opts.loopRequired)var R=e.util.toHash(O);function C(e){return"__proto__"!==e}if(a+="var "+h+" = errors;var "+m+" = true;",$&&(a+=" var "+P+" = undefined;"),F){if(a+=$?" "+P+" = "+P+" || Object.keys("+u+"); for (var "+v+"=0; "+v+"<"+P+".length; "+v+"++) { var "+f+" = "+P+"["+v+"]; ":" for (var "+f+" in "+u+") { ",S){if(a+=" var isAdditional"+s+" = !(false ",b.length)if(b.length>8)a+=" || validate.schema"+n+".hasOwnProperty("+f+") ";else{var k=b;if(k)for(var I=-1,A=k.length-1;I<A;)Z=k[I+=1],a+=" || "+f+" == "+e.util.toQuotedString(Z)+" "}if(w.length){var L=w;if(L)for(var V=-1,N=L.length-1;V<N;)oe=L[V+=1],a+=" || "+e.usePattern(oe)+".test("+f+") "}a+=" ); if (isAdditional"+s+") { "}if("all"==T)a+=" delete "+u+"["+f+"]; ";else{var q=e.errorPath,z="' + "+f+" + '";if(e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers)),x)if(T)a+=" delete "+u+"["+f+"]; ";else{a+=" "+m+" = false; ";var Q=l;l=e.errSchemaPath+"/additionalProperties",(re=re||[]).push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'additionalProperties' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { additionalProperty: '"+z+"' } ",!1!==e.opts.messages&&(a+=" , message: '",e.opts._errorDataPathProperty?a+="is an invalid additional property":a+="should NOT have additional properties",a+="' "),e.opts.verbose&&(a+=" , schema: false , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ";var U=a;a=re.pop(),!e.compositeRule&&c?e.async?a+=" throw new ValidationError(["+U+"]); ":a+=" validate.errors = ["+U+"]; return false; ":a+=" var err = "+U+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",l=Q,c&&(a+=" break; ")}else if(j)if("failing"==T){a+=" var "+h+" = errors;  ";var M=e.compositeRule;e.compositeRule=p.compositeRule=!0,p.schema=_,p.schemaPath=e.schemaPath+".additionalProperties",p.errSchemaPath=e.errSchemaPath+"/additionalProperties",p.errorPath=e.opts._errorDataPathProperty?e.errorPath:e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers);var H=u+"["+f+"]";p.dataPathArr[y]=f;var J=e.validate(p);p.baseId=D,e.util.varOccurences(J,g)<2?a+=" "+e.util.varReplace(J,g,H)+" ":a+=" var "+g+" = "+H+"; "+J+" ",a+=" if (!"+m+") { errors = "+h+"; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete "+u+"["+f+"]; }  ",e.compositeRule=p.compositeRule=M}else p.schema=_,p.schemaPath=e.schemaPath+".additionalProperties",p.errSchemaPath=e.errSchemaPath+"/additionalProperties",p.errorPath=e.opts._errorDataPathProperty?e.errorPath:e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers),H=u+"["+f+"]",p.dataPathArr[y]=f,J=e.validate(p),p.baseId=D,e.util.varOccurences(J,g)<2?a+=" "+e.util.varReplace(J,g,H)+" ":a+=" var "+g+" = "+H+"; "+J+" ",c&&(a+=" if (!"+m+") break; ");e.errorPath=q}S&&(a+=" } "),a+=" }  ",c&&(a+=" if ("+m+") { ",d+="}")}var K=e.opts.useDefaults&&!e.compositeRule;if(b.length){var B=b;if(B)for(var Z,G=-1,W=B.length-1;G<W;){var X=i[Z=B[G+=1]];if(e.opts.strictKeywords?"object"==typeof X&&Object.keys(X).length>0||!1===X:e.util.schemaHasRules(X,e.RULES.all)){var Y=e.util.getProperty(Z),ee=(H=u+Y,K&&void 0!==X.default);if(p.schema=X,p.schemaPath=n+Y,p.errSchemaPath=l+"/"+e.util.escapeFragment(Z),p.errorPath=e.util.getPath(e.errorPath,Z,e.opts.jsonPointers),p.dataPathArr[y]=e.util.toQuotedString(Z),J=e.validate(p),p.baseId=D,e.util.varOccurences(J,g)<2){J=e.util.varReplace(J,g,H);var te=H}else te=g,a+=" var "+g+" = "+H+"; ";if(ee)a+=" "+J+" ";else{if(R&&R[Z]){a+=" if ( "+te+" === undefined ",$&&(a+=" || ! Object.prototype.hasOwnProperty.call("+u+", '"+e.util.escapeQuotes(Z)+"') "),a+=") { "+m+" = false; ",q=e.errorPath,Q=l;var re,ae=e.util.escapeQuotes(Z);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(q,Z,e.opts.jsonPointers)),l=e.errSchemaPath+"/required",(re=re||[]).push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { missingProperty: '"+ae+"' } ",!1!==e.opts.messages&&(a+=" , message: '",e.opts._errorDataPathProperty?a+="is a required property":a+="should have required property \\'"+ae+"\\'",a+="' "),e.opts.verbose&&(a+=" , schema: validate.schema"+n+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ",U=a,a=re.pop(),!e.compositeRule&&c?e.async?a+=" throw new ValidationError(["+U+"]); ":a+=" validate.errors = ["+U+"]; return false; ":a+=" var err = "+U+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",l=Q,e.errorPath=q,a+=" } else { "}else c?(a+=" if ( "+te+" === undefined ",$&&(a+=" || ! Object.prototype.hasOwnProperty.call("+u+", '"+e.util.escapeQuotes(Z)+"') "),a+=") { "+m+" = true; } else { "):(a+=" if ("+te+" !== undefined ",$&&(a+=" &&   Object.prototype.hasOwnProperty.call("+u+", '"+e.util.escapeQuotes(Z)+"') "),a+=" ) { ");a+=" "+J+" } "}}c&&(a+=" if ("+m+") { ",d+="}")}}if(w.length){var se=w;if(se)for(var oe,ie=-1,ne=se.length-1;ie<ne;)X=E[oe=se[ie+=1]],(e.opts.strictKeywords?"object"==typeof X&&Object.keys(X).length>0||!1===X:e.util.schemaHasRules(X,e.RULES.all))&&(p.schema=X,p.schemaPath=e.schemaPath+".patternProperties"+e.util.getProperty(oe),p.errSchemaPath=e.errSchemaPath+"/patternProperties/"+e.util.escapeFragment(oe),a+=$?" "+P+" = "+P+" || Object.keys("+u+"); for (var "+v+"=0; "+v+"<"+P+".length; "+v+"++) { var "+f+" = "+P+"["+v+"]; ":" for (var "+f+" in "+u+") { ",a+=" if ("+e.usePattern(oe)+".test("+f+")) { ",p.errorPath=e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers),H=u+"["+f+"]",p.dataPathArr[y]=f,J=e.validate(p),p.baseId=D,e.util.varOccurences(J,g)<2?a+=" "+e.util.varReplace(J,g,H)+" ":a+=" var "+g+" = "+H+"; "+J+" ",c&&(a+=" if (!"+m+") break; "),a+=" } ",c&&(a+=" else "+m+" = true; "),a+=" }  ",c&&(a+=" if ("+m+") { ",d+="}"))}return c&&(a+=" "+d+" if ("+h+" == errors) {"),a}},8441:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,i=e.schema[t],n=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,u="data"+(o||""),h="errs__"+s,p=e.util.copy(e);p.level++;var d="valid"+p.level;if(a+="var "+h+" = errors;",e.opts.strictKeywords?"object"==typeof i&&Object.keys(i).length>0||!1===i:e.util.schemaHasRules(i,e.RULES.all)){p.schema=i,p.schemaPath=n,p.errSchemaPath=l;var m="key"+s,f="idx"+s,v="i"+s,y="' + "+m+" + '",g="data"+(p.dataLevel=e.dataLevel+1),P="dataProperties"+s,b=e.opts.ownProperties,E=e.baseId;b&&(a+=" var "+P+" = undefined; "),a+=b?" "+P+" = "+P+" || Object.keys("+u+"); for (var "+f+"=0; "+f+"<"+P+".length; "+f+"++) { var "+m+" = "+P+"["+f+"]; ":" for (var "+m+" in "+u+") { ",a+=" var startErrs"+s+" = errors; ";var w=m,_=e.compositeRule;e.compositeRule=p.compositeRule=!0;var S=e.validate(p);p.baseId=E,e.util.varOccurences(S,g)<2?a+=" "+e.util.varReplace(S,g,w)+" ":a+=" var "+g+" = "+w+"; "+S+" ",e.compositeRule=p.compositeRule=_,a+=" if (!"+d+") { for (var "+v+"=startErrs"+s+"; "+v+"<errors; "+v+"++) { vErrors["+v+"].propertyName = "+m+"; }   var err =   ",!1!==e.createErrors?(a+=" { keyword: 'propertyNames' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { propertyName: '"+y+"' } ",!1!==e.opts.messages&&(a+=" , message: 'property name \\'"+y+"\\' is invalid' "),e.opts.verbose&&(a+=" , schema: validate.schema"+n+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ",a+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&c&&(e.async?a+=" throw new ValidationError(vErrors); ":a+=" validate.errors = vErrors; return false; "),c&&(a+=" break; "),a+=" } }"}return c&&(a+="  if ("+h+" == errors) {"),a}},2392:e=>{"use strict";e.exports=function(e,t,r){var a,s,o=" ",i=e.level,n=e.dataLevel,l=e.schema[t],c=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,h="data"+(n||""),p="valid"+i;if("#"==l||"#/"==l)e.isRoot?(a=e.async,s="validate"):(a=!0===e.root.schema.$async,s="root.refVal[0]");else{var d=e.resolveRef(e.baseId,l,e.isRoot);if(void 0===d){var m=e.MissingRefError.message(e.baseId,l);if("fail"==e.opts.missingRefs){e.logger.error(m),(g=g||[]).push(o),o="",!1!==e.createErrors?(o+=" { keyword: '$ref' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { ref: '"+e.util.escapeQuotes(l)+"' } ",!1!==e.opts.messages&&(o+=" , message: 'can\\'t resolve reference "+e.util.escapeQuotes(l)+"' "),e.opts.verbose&&(o+=" , schema: "+e.util.toQuotedString(l)+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),o+=" } "):o+=" {} ";var f=o;o=g.pop(),!e.compositeRule&&u?e.async?o+=" throw new ValidationError(["+f+"]); ":o+=" validate.errors = ["+f+"]; return false; ":o+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",u&&(o+=" if (false) { ")}else{if("ignore"!=e.opts.missingRefs)throw new e.MissingRefError(e.baseId,l,m);e.logger.warn(m),u&&(o+=" if (true) { ")}}else if(d.inline){var v=e.util.copy(e);v.level++;var y="valid"+v.level;v.schema=d.schema,v.schemaPath="",v.errSchemaPath=l,o+=" "+e.validate(v).replace(/validate\.schema/g,d.code)+" ",u&&(o+=" if ("+y+") { ")}else a=!0===d.$async||e.async&&!1!==d.$async,s=d.code}if(s){var g;(g=g||[]).push(o),o="",e.opts.passContext?o+=" "+s+".call(this, ":o+=" "+s+"( ",o+=" "+h+", (dataPath || '')",'""'!=e.errorPath&&(o+=" + "+e.errorPath);var P=o+=" , "+(n?"data"+(n-1||""):"parentData")+" , "+(n?e.dataPathArr[n]:"parentDataProperty")+", rootData)  ";if(o=g.pop(),a){if(!e.async)throw new Error("async schema referenced by sync schema");u&&(o+=" var "+p+"; "),o+=" try { await "+P+"; ",u&&(o+=" "+p+" = true; "),o+=" } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ",u&&(o+=" "+p+" = false; "),o+=" } ",u&&(o+=" if ("+p+") { ")}else o+=" if (!"+P+") { if (vErrors === null) vErrors = "+s+".errors; else vErrors = vErrors.concat("+s+".errors); errors = vErrors.length; } ",u&&(o+=" else { ")}return o}},1287:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,i=e.schema[t],n=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,u="data"+(o||""),h="valid"+s,p=e.opts.$data&&i&&i.$data;p&&(a+=" var schema"+s+" = "+e.util.getData(i.$data,o,e.dataPathArr)+"; ");var d="schema"+s;if(!p)if(i.length<e.opts.loopRequired&&e.schema.properties&&Object.keys(e.schema.properties).length){var m=[],f=i;if(f)for(var v,y=-1,g=f.length-1;y<g;){v=f[y+=1];var P=e.schema.properties[v];P&&(e.opts.strictKeywords?"object"==typeof P&&Object.keys(P).length>0||!1===P:e.util.schemaHasRules(P,e.RULES.all))||(m[m.length]=v)}}else m=i;if(p||m.length){var b=e.errorPath,E=p||m.length>=e.opts.loopRequired,w=e.opts.ownProperties;if(c)if(a+=" var missing"+s+"; ",E){p||(a+=" var "+d+" = validate.schema"+n+"; ");var _="' + "+($="schema"+s+"["+(T="i"+s)+"]")+" + '";e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(b,$,e.opts.jsonPointers)),a+=" var "+h+" = true; ",p&&(a+=" if (schema"+s+" === undefined) "+h+" = true; else if (!Array.isArray(schema"+s+")) "+h+" = false; else {"),a+=" for (var "+T+" = 0; "+T+" < "+d+".length; "+T+"++) { "+h+" = "+u+"["+d+"["+T+"]] !== undefined ",w&&(a+=" &&   Object.prototype.hasOwnProperty.call("+u+", "+d+"["+T+"]) "),a+="; if (!"+h+") break; } ",p&&(a+="  }  "),a+="  if (!"+h+") {   ",(x=x||[]).push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { missingProperty: '"+_+"' } ",!1!==e.opts.messages&&(a+=" , message: '",e.opts._errorDataPathProperty?a+="is a required property":a+="should have required property \\'"+_+"\\'",a+="' "),e.opts.verbose&&(a+=" , schema: validate.schema"+n+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ";var S=a;a=x.pop(),!e.compositeRule&&c?e.async?a+=" throw new ValidationError(["+S+"]); ":a+=" validate.errors = ["+S+"]; return false; ":a+=" var err = "+S+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" } else { "}else{a+=" if ( ";var x,j=m;if(j)for(var T=-1,F=j.length-1;T<F;)O=j[T+=1],T&&(a+=" || "),a+=" ( ( "+(I=u+(k=e.util.getProperty(O)))+" === undefined ",w&&(a+=" || ! Object.prototype.hasOwnProperty.call("+u+", '"+e.util.escapeQuotes(O)+"') "),a+=") && (missing"+s+" = "+e.util.toQuotedString(e.opts.jsonPointers?O:k)+") ) ";a+=") {  ",_="' + "+($="missing"+s)+" + '",e.opts._errorDataPathProperty&&(e.errorPath=e.opts.jsonPointers?e.util.getPathExpr(b,$,!0):b+" + "+$),(x=x||[]).push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { missingProperty: '"+_+"' } ",!1!==e.opts.messages&&(a+=" , message: '",e.opts._errorDataPathProperty?a+="is a required property":a+="should have required property \\'"+_+"\\'",a+="' "),e.opts.verbose&&(a+=" , schema: validate.schema"+n+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ",S=a,a=x.pop(),!e.compositeRule&&c?e.async?a+=" throw new ValidationError(["+S+"]); ":a+=" validate.errors = ["+S+"]; return false; ":a+=" var err = "+S+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" } else { "}else if(E){var $;p||(a+=" var "+d+" = validate.schema"+n+"; "),_="' + "+($="schema"+s+"["+(T="i"+s)+"]")+" + '",e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(b,$,e.opts.jsonPointers)),p&&(a+=" if ("+d+" && !Array.isArray("+d+")) {  var err =   ",!1!==e.createErrors?(a+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { missingProperty: '"+_+"' } ",!1!==e.opts.messages&&(a+=" , message: '",e.opts._errorDataPathProperty?a+="is a required property":a+="should have required property \\'"+_+"\\'",a+="' "),e.opts.verbose&&(a+=" , schema: validate.schema"+n+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ",a+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if ("+d+" !== undefined) { "),a+=" for (var "+T+" = 0; "+T+" < "+d+".length; "+T+"++) { if ("+u+"["+d+"["+T+"]] === undefined ",w&&(a+=" || ! Object.prototype.hasOwnProperty.call("+u+", "+d+"["+T+"]) "),a+=") {  var err =   ",!1!==e.createErrors?(a+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { missingProperty: '"+_+"' } ",!1!==e.opts.messages&&(a+=" , message: '",e.opts._errorDataPathProperty?a+="is a required property":a+="should have required property \\'"+_+"\\'",a+="' "),e.opts.verbose&&(a+=" , schema: validate.schema"+n+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ",a+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ",p&&(a+="  }  ")}else{var D=m;if(D)for(var O,R=-1,C=D.length-1;R<C;){O=D[R+=1];var k=e.util.getProperty(O),I=(_=e.util.escapeQuotes(O),u+k);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(b,O,e.opts.jsonPointers)),a+=" if ( "+I+" === undefined ",w&&(a+=" || ! Object.prototype.hasOwnProperty.call("+u+", '"+e.util.escapeQuotes(O)+"') "),a+=") {  var err =   ",!1!==e.createErrors?(a+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { missingProperty: '"+_+"' } ",!1!==e.opts.messages&&(a+=" , message: '",e.opts._errorDataPathProperty?a+="is a required property":a+="should have required property \\'"+_+"\\'",a+="' "),e.opts.verbose&&(a+=" , schema: validate.schema"+n+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+u+" "),a+=" } "):a+=" {} ",a+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } "}}e.errorPath=b}else c&&(a+=" if (true) {");return a}},3603:e=>{"use strict";e.exports=function(e,t,r){var a,s=" ",o=e.level,i=e.dataLevel,n=e.schema[t],l=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,h="data"+(i||""),p="valid"+o,d=e.opts.$data&&n&&n.$data;if(d?(s+=" var schema"+o+" = "+e.util.getData(n.$data,i,e.dataPathArr)+"; ",a="schema"+o):a=n,(n||d)&&!1!==e.opts.uniqueItems){d&&(s+=" var "+p+"; if ("+a+" === false || "+a+" === undefined) "+p+" = true; else if (typeof "+a+" != 'boolean') "+p+" = false; else { "),s+=" var i = "+h+".length , "+p+" = true , j; if (i > 1) { ";var m=e.schema.items&&e.schema.items.type,f=Array.isArray(m);if(!m||"object"==m||"array"==m||f&&(m.indexOf("object")>=0||m.indexOf("array")>=0))s+=" outer: for (;i--;) { for (j = i; j--;) { if (equal("+h+"[i], "+h+"[j])) { "+p+" = false; break outer; } } } ";else{s+=" var itemIndices = {}, item; for (;i--;) { var item = "+h+"[i]; ";var v="checkDataType"+(f?"s":"");s+=" if ("+e.util[v](m,"item",e.opts.strictNumbers,!0)+") continue; ",f&&(s+=" if (typeof item == 'string') item = '\"' + item; "),s+=" if (typeof itemIndices[item] == 'number') { "+p+" = false; j = itemIndices[item]; break; } itemIndices[item] = i; } "}s+=" } ",d&&(s+="  }  "),s+=" if (!"+p+") {   ";var y=y||[];y.push(s),s="",!1!==e.createErrors?(s+=" { keyword: 'uniqueItems' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { i: i, j: j } ",!1!==e.opts.messages&&(s+=" , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' "),e.opts.verbose&&(s+=" , schema:  ",s+=d?"validate.schema"+l:""+n,s+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),s+=" } "):s+=" {} ";var g=s;s=y.pop(),!e.compositeRule&&u?e.async?s+=" throw new ValidationError(["+g+"]); ":s+=" validate.errors = ["+g+"]; return false; ":s+=" var err = "+g+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s+=" } ",u&&(s+=" else { ")}else u&&(s+=" if (true) { ");return s}},9508:e=>{"use strict";e.exports=function(e,t,r){var a="",s=!0===e.schema.$async,o=e.util.schemaHasRulesExcept(e.schema,e.RULES.all,"$ref"),i=e.self._getId(e.schema);if(e.opts.strictKeywords){var n=e.util.schemaUnknownRules(e.schema,e.RULES.keywords);if(n){var l="unknown keyword: "+n;if("log"!==e.opts.strictKeywords)throw new Error(l);e.logger.warn(l)}}if(e.isTop&&(a+=" var validate = ",s&&(e.async=!0,a+="async "),a+="function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; ",i&&(e.opts.sourceCode||e.opts.processCode)&&(a+=" /*# sourceURL="+i+" */ ")),"boolean"==typeof e.schema||!o&&!e.schema.$ref){t="false schema";var c=e.level,u=e.dataLevel,h=e.schema[t],p=e.schemaPath+e.util.getProperty(t),d=e.errSchemaPath+"/"+t,m=!e.opts.allErrors,f="data"+(u||""),v="valid"+c;if(!1===e.schema){e.isTop?m=!0:a+=" var "+v+" = false; ",(H=H||[]).push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'false schema' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(d)+" , params: {} ",!1!==e.opts.messages&&(a+=" , message: 'boolean schema is false' "),e.opts.verbose&&(a+=" , schema: false , parentSchema: validate.schema"+e.schemaPath+" , data: "+f+" "),a+=" } "):a+=" {} ";var y=a;a=H.pop(),!e.compositeRule&&m?e.async?a+=" throw new ValidationError(["+y+"]); ":a+=" validate.errors = ["+y+"]; return false; ":a+=" var err = "+y+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}else e.isTop?a+=s?" return data; ":" validate.errors = null; return true; ":a+=" var "+v+" = true; ";return e.isTop&&(a+=" }; return validate; "),a}if(e.isTop){var g=e.isTop;if(c=e.level=0,u=e.dataLevel=0,f="data",e.rootId=e.resolve.fullPath(e.self._getId(e.root.schema)),e.baseId=e.baseId||e.rootId,delete e.isTop,e.dataPathArr=[""],void 0!==e.schema.default&&e.opts.useDefaults&&e.opts.strictDefaults){var P="default is ignored in the schema root";if("log"!==e.opts.strictDefaults)throw new Error(P);e.logger.warn(P)}a+=" var vErrors = null; ",a+=" var errors = 0;     ",a+=" if (rootData === undefined) rootData = data; "}else{if(c=e.level,f="data"+((u=e.dataLevel)||""),i&&(e.baseId=e.resolve.url(e.baseId,i)),s&&!e.async)throw new Error("async schema in sync schema");a+=" var errs_"+c+" = errors;"}v="valid"+c,m=!e.opts.allErrors;var b="",E="",w=e.schema.type,_=Array.isArray(w);if(w&&e.opts.nullable&&!0===e.schema.nullable&&(_?-1==w.indexOf("null")&&(w=w.concat("null")):"null"!=w&&(w=[w,"null"],_=!0)),_&&1==w.length&&(w=w[0],_=!1),e.schema.$ref&&o){if("fail"==e.opts.extendRefs)throw new Error('$ref: validation keywords used in schema at path "'+e.errSchemaPath+'" (see option extendRefs)');!0!==e.opts.extendRefs&&(o=!1,e.logger.warn('$ref: keywords ignored in schema at path "'+e.errSchemaPath+'"'))}if(e.schema.$comment&&e.opts.$comment&&(a+=" "+e.RULES.all.$comment.code(e,"$comment")),w){if(e.opts.coerceTypes)var S=e.util.coerceToTypes(e.opts.coerceTypes,w);var x=e.RULES.types[w];if(S||_||!0===x||x&&!W(x)){p=e.schemaPath+".type",d=e.errSchemaPath+"/type",p=e.schemaPath+".type",d=e.errSchemaPath+"/type";var j=_?"checkDataTypes":"checkDataType";if(a+=" if ("+e.util[j](w,f,e.opts.strictNumbers,!0)+") { ",S){var T="dataType"+c,F="coerced"+c;a+=" var "+T+" = typeof "+f+"; var "+F+" = undefined; ","array"==e.opts.coerceTypes&&(a+=" if ("+T+" == 'object' && Array.isArray("+f+") && "+f+".length == 1) { "+f+" = "+f+"[0]; "+T+" = typeof "+f+"; if ("+e.util.checkDataType(e.schema.type,f,e.opts.strictNumbers)+") "+F+" = "+f+"; } "),a+=" if ("+F+" !== undefined) ; ";var $=S;if($)for(var D,O=-1,R=$.length-1;O<R;)"string"==(D=$[O+=1])?a+=" else if ("+T+" == 'number' || "+T+" == 'boolean') "+F+" = '' + "+f+"; else if ("+f+" === null) "+F+" = ''; ":"number"==D||"integer"==D?(a+=" else if ("+T+" == 'boolean' || "+f+" === null || ("+T+" == 'string' && "+f+" && "+f+" == +"+f+" ","integer"==D&&(a+=" && !("+f+" % 1)"),a+=")) "+F+" = +"+f+"; "):"boolean"==D?a+=" else if ("+f+" === 'false' || "+f+" === 0 || "+f+" === null) "+F+" = false; else if ("+f+" === 'true' || "+f+" === 1) "+F+" = true; ":"null"==D?a+=" else if ("+f+" === '' || "+f+" === 0 || "+f+" === false) "+F+" = null; ":"array"==e.opts.coerceTypes&&"array"==D&&(a+=" else if ("+T+" == 'string' || "+T+" == 'number' || "+T+" == 'boolean' || "+f+" == null) "+F+" = ["+f+"]; ");a+=" else {   ",(H=H||[]).push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'type' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(d)+" , params: { type: '",a+=_?""+w.join(","):""+w,a+="' } ",!1!==e.opts.messages&&(a+=" , message: 'should be ",a+=_?""+w.join(","):""+w,a+="' "),e.opts.verbose&&(a+=" , schema: validate.schema"+p+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+f+" "),a+=" } "):a+=" {} ",y=a,a=H.pop(),!e.compositeRule&&m?e.async?a+=" throw new ValidationError(["+y+"]); ":a+=" validate.errors = ["+y+"]; return false; ":a+=" var err = "+y+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" } if ("+F+" !== undefined) {  ";var C=u?"data"+(u-1||""):"parentData";a+=" "+f+" = "+F+"; ",u||(a+="if ("+C+" !== undefined)"),a+=" "+C+"["+(u?e.dataPathArr[u]:"parentDataProperty")+"] = "+F+"; } "}else(H=H||[]).push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'type' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(d)+" , params: { type: '",a+=_?""+w.join(","):""+w,a+="' } ",!1!==e.opts.messages&&(a+=" , message: 'should be ",a+=_?""+w.join(","):""+w,a+="' "),e.opts.verbose&&(a+=" , schema: validate.schema"+p+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+f+" "),a+=" } "):a+=" {} ",y=a,a=H.pop(),!e.compositeRule&&m?e.async?a+=" throw new ValidationError(["+y+"]); ":a+=" validate.errors = ["+y+"]; return false; ":a+=" var err = "+y+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";a+=" } "}}if(e.schema.$ref&&!o)a+=" "+e.RULES.all.$ref.code(e,"$ref")+" ",m&&(a+=" } if (errors === ",a+=g?"0":"errs_"+c,a+=") { ",E+="}");else{var k=e.RULES;if(k)for(var I=-1,A=k.length-1;I<A;)if(W(x=k[I+=1])){if(x.type&&(a+=" if ("+e.util.checkDataType(x.type,f,e.opts.strictNumbers)+") { "),e.opts.useDefaults)if("object"==x.type&&e.schema.properties){h=e.schema.properties;var L=Object.keys(h);if(L)for(var V,N=-1,q=L.length-1;N<q;)if(void 0!==(U=h[V=L[N+=1]]).default){var z=f+e.util.getProperty(V);if(e.compositeRule){if(e.opts.strictDefaults){if(P="default is ignored for: "+z,"log"!==e.opts.strictDefaults)throw new Error(P);e.logger.warn(P)}}else a+=" if ("+z+" === undefined ","empty"==e.opts.useDefaults&&(a+=" || "+z+" === null || "+z+" === '' "),a+=" ) "+z+" = ","shared"==e.opts.useDefaults?a+=" "+e.useDefault(U.default)+" ":a+=" "+JSON.stringify(U.default)+" ",a+="; "}}else if("array"==x.type&&Array.isArray(e.schema.items)){var Q=e.schema.items;if(Q){O=-1;for(var U,M=Q.length-1;O<M;)if(void 0!==(U=Q[O+=1]).default)if(z=f+"["+O+"]",e.compositeRule){if(e.opts.strictDefaults){if(P="default is ignored for: "+z,"log"!==e.opts.strictDefaults)throw new Error(P);e.logger.warn(P)}}else a+=" if ("+z+" === undefined ","empty"==e.opts.useDefaults&&(a+=" || "+z+" === null || "+z+" === '' "),a+=" ) "+z+" = ","shared"==e.opts.useDefaults?a+=" "+e.useDefault(U.default)+" ":a+=" "+JSON.stringify(U.default)+" ",a+="; "}}var H,J=x.rules;if(J)for(var K,B=-1,Z=J.length-1;B<Z;)if(X(K=J[B+=1])){var G=K.code(e,K.keyword,x.type);G&&(a+=" "+G+" ",m&&(b+="}"))}if(m&&(a+=" "+b+" ",b=""),x.type&&(a+=" } ",w&&w===x.type&&!S))a+=" else { ",p=e.schemaPath+".type",d=e.errSchemaPath+"/type",(H=H||[]).push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'type' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(d)+" , params: { type: '",a+=_?""+w.join(","):""+w,a+="' } ",!1!==e.opts.messages&&(a+=" , message: 'should be ",a+=_?""+w.join(","):""+w,a+="' "),e.opts.verbose&&(a+=" , schema: validate.schema"+p+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+f+" "),a+=" } "):a+=" {} ",y=a,a=H.pop(),!e.compositeRule&&m?e.async?a+=" throw new ValidationError(["+y+"]); ":a+=" validate.errors = ["+y+"]; return false; ":a+=" var err = "+y+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" } ";m&&(a+=" if (errors === ",a+=g?"0":"errs_"+c,a+=") { ",E+="}")}}function W(e){for(var t=e.rules,r=0;r<t.length;r++)if(X(t[r]))return!0}function X(t){return void 0!==e.schema[t.keyword]||t.implements&&function(t){for(var r=t.implements,a=0;a<r.length;a++)if(void 0!==e.schema[r[a]])return!0}(t)}return m&&(a+=" "+E+" "),g?(s?(a+=" if (errors === 0) return data;           ",a+=" else throw new ValidationError(vErrors); "):(a+=" validate.errors = vErrors; ",a+=" return errors === 0;       "),a+=" }; return validate;"):a+=" var "+v+" = errors === errs_"+c+";",a}},4895:(e,t,r)=>{"use strict";var a=/^[a-z_$][a-z0-9_$-]*$/i,s=r(4165),o=r(1128);e.exports={add:function(e,t){var r=this.RULES;if(r.keywords[e])throw new Error("Keyword "+e+" is already defined");if(!a.test(e))throw new Error("Keyword "+e+" is not a valid identifier");if(t){this.validateKeyword(t,!0);var o=t.type;if(Array.isArray(o))for(var i=0;i<o.length;i++)l(e,o[i],t);else l(e,o,t);var n=t.metaSchema;n&&(t.$data&&this._opts.$data&&(n={anyOf:[n,{$ref:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"}]}),t.validateSchema=this.compile(n,!0))}function l(e,t,a){for(var o,i=0;i<r.length;i++){var n=r[i];if(n.type==t){o=n;break}}o||(o={type:t,rules:[]},r.push(o));var l={keyword:e,definition:a,custom:!0,code:s,implements:a.implements};o.rules.push(l),r.custom[e]=l}return r.keywords[e]=r.all[e]=!0,this},get:function(e){var t=this.RULES.custom[e];return t?t.definition:this.RULES.keywords[e]||!1},remove:function(e){var t=this.RULES;delete t.keywords[e],delete t.all[e],delete t.custom[e];for(var r=0;r<t.length;r++)for(var a=t[r].rules,s=0;s<a.length;s++)if(a[s].keyword==e){a.splice(s,1);break}return this},validate:function e(t,r){e.errors=null;var a=this._validateKeyword=this._validateKeyword||this.compile(o,!0);if(a(t))return!0;if(e.errors=a.errors,r)throw new Error("custom keyword definition is invalid: "+this.errorsText(a.errors));return!1}}},4063:e=>{"use strict";e.exports=function e(t,r){if(t===r)return!0;if(t&&r&&"object"==typeof t&&"object"==typeof r){if(t.constructor!==r.constructor)return!1;var a,s,o;if(Array.isArray(t)){if((a=t.length)!=r.length)return!1;for(s=a;0!=s--;)if(!e(t[s],r[s]))return!1;return!0}if(t.constructor===RegExp)return t.source===r.source&&t.flags===r.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===r.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===r.toString();if((a=(o=Object.keys(t)).length)!==Object.keys(r).length)return!1;for(s=a;0!=s--;)if(!Object.prototype.hasOwnProperty.call(r,o[s]))return!1;for(s=a;0!=s--;){var i=o[s];if(!e(t[i],r[i]))return!1}return!0}return t!=t&&r!=r}},5035:e=>{"use strict";e.exports=function(e,t){t||(t={}),"function"==typeof t&&(t={cmp:t});var r,a="boolean"==typeof t.cycles&&t.cycles,s=t.cmp&&(r=t.cmp,function(e){return function(t,a){var s={key:t,value:e[t]},o={key:a,value:e[a]};return r(s,o)}}),o=[];return function e(t){if(t&&t.toJSON&&"function"==typeof t.toJSON&&(t=t.toJSON()),void 0!==t){if("number"==typeof t)return isFinite(t)?""+t:"null";if("object"!=typeof t)return JSON.stringify(t);var r,i;if(Array.isArray(t)){for(i="[",r=0;r<t.length;r++)r&&(i+=","),i+=e(t[r])||"null";return i+"]"}if(null===t)return"null";if(-1!==o.indexOf(t)){if(a)return JSON.stringify("__cycle__");throw new TypeError("Converting circular structure to JSON")}var n=o.push(t)-1,l=Object.keys(t).sort(s&&s(t));for(i="",r=0;r<l.length;r++){var c=l[r],u=e(t[c]);u&&(i&&(i+=","),i+=JSON.stringify(c)+":"+u)}return o.splice(n,1),"{"+i+"}"}}(e)}},9461:e=>{"use strict";var t=e.exports=function(e,t,a){"function"==typeof t&&(a=t,t={}),r(t,"function"==typeof(a=t.cb||a)?a:a.pre||function(){},a.post||function(){},e,"",e)};function r(e,a,s,o,i,n,l,c,u,h){if(o&&"object"==typeof o&&!Array.isArray(o)){for(var p in a(o,i,n,l,c,u,h),o){var d=o[p];if(Array.isArray(d)){if(p in t.arrayKeywords)for(var m=0;m<d.length;m++)r(e,a,s,d[m],i+"/"+p+"/"+m,n,i,p,o,m)}else if(p in t.propsKeywords){if(d&&"object"==typeof d)for(var f in d)r(e,a,s,d[f],i+"/"+p+"/"+f.replace(/~/g,"~0").replace(/\//g,"~1"),n,i,p,o,f)}else(p in t.keywords||e.allKeys&&!(p in t.skipKeywords))&&r(e,a,s,d,i+"/"+p,n,i,p,o)}s(o,i,n,l,c,u,h)}}t.keywords={additionalItems:!0,items:!0,contains:!0,additionalProperties:!0,propertyNames:!0,not:!0},t.arrayKeywords={items:!0,allOf:!0,anyOf:!0,oneOf:!0},t.propsKeywords={definitions:!0,properties:!0,patternProperties:!0,dependencies:!0},t.skipKeywords={default:!0,enum:!0,const:!0,required:!0,maximum:!0,minimum:!0,exclusiveMaximum:!0,exclusiveMinimum:!0,multipleOf:!0,maxLength:!0,minLength:!0,pattern:!0,format:!0,maxItems:!0,minItems:!0,uniqueItems:!0,maxProperties:!0,minProperties:!0}},8831:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JsonTool=void 0,t.JsonTool=class{constructor(e,t=null){var r,a;this.elementState={},this.containerElement=e,this.validator=null!=t?t:()=>({valid:!0}),this.schema=null,this.root=document.createElement("div"),this.root.style.fontFamily="monospace",this.root.style.marginLeft="30px",this.root.classList.add("json-tool"),this.rootObject=null,this.rootElement=null,this.errorMessages=document.createElement("div"),this.errorMessages.classList.add("json-tool-errors");const s=document.createElement("iframe");s.style.width="100%",s.style.height="100%",s.style.overflow="scroll",s.style.border="0",e.innerHTML="",e.appendChild(s),this.iframeBody=null===(a=s.contentDocument||(null===(r=s.contentWindow)||void 0===r?void 0:r.document))||void 0===a?void 0:a.querySelector("body"),this.iframeBody.append(this.root),this.createCss(this.iframeBody),s.onload=()=>{var e,t;this.iframeBody=null===(t=s.contentDocument||(null===(e=s.contentWindow)||void 0===e?void 0:e.document))||void 0===t?void 0:t.querySelector("body"),this.iframeBody.append(this.root),this.createCss(this.iframeBody),this.iframeBody.appendChild(this.errorMessages)}}getPath(e){return"root"}getState(){return console.log(this.elementState),this.elementState}load(e,t,a){if(this.validator=null!=a?a:this.validator,this.schema=e,this.root.innerHTML="",e.title){const t=document.createElement("h3");t.textContent=e.title,r.addDescription(t,e.description,null==e?void 0:e.examples),this.root.appendChild(t)}this.rootObject=document.createElement("div"),this.root.appendChild(this.rootObject),this.rootElement=new r("root",this.rootObject,e,t,this),this.validate()}hide(){this.containerElement.innerHTML=""}setValidator(e){this.validator=e}getValue(){var e;return null===(e=this.rootElement)||void 0===e?void 0:e.getValue()}update(){var e;if(!this.rootObject)return;let t=1;null===(e=this.rootObject)||void 0===e||e.querySelectorAll(".line-number").forEach((e=>{e.innerText=t.toString(),t++})),this.validate()}validate(){window.setTimeout((()=>{var e;if(this.schema&&this.errorMessages){const t=this.validator(this.getValue(),this.schema);this.errorMessages.innerHTML="",t.valid||(this.errorMessages.innerHTML=(null!==(e=t.errors)&&void 0!==e?e:[]).map((e=>"string"==typeof e?e:e.message)).join("\n"))}}),1)}createCss(e){const t=document.createElement("style");e.appendChild(t),t.innerHTML="\n            .json-tool-btn\n             {\n                border: 1px black solid;\n                cursor: pointer;\n                display: block;\n             }\n              .json-tool-block > .json-tool-btn {\n                margin-top: -17px;\n                margin-left: -40px;\n                position: absolute;\n                opacity: 0;\n              }\n              .json-tool-block:hover > .json-tool-btn\n              {\n                opacity: 1;\n              }\n              .json-tool-value > .json-tool-btn {\n                margin-left: 10px;\n                display: inline-block;\n                position: absolute;\n                opacity :0;\n              }\n              .json-tool-value:hover > .json-tool-btn\n              {\n                opacity :1;\n              }\n              .json-tool-key > .json-tool-btns {\n                margin-left: -32px;\n                display: inline-block;\n                position: absolute;\n                width: 32px;\n                text-align: right;\n                opacity: 0;\n              }\n              .json-tool-key:hover > .json-tool-btns\n              {\n                opacity: 1;\n              }\n\n              .json-tool-key > .json-tool-btns > .json-tool-btn {\n                display: inline-block;\n                margin-right: 2px;\n              }\n              .json-tool-value > .json-tool-type\n              {\n                float:right;\n                opacity: 0;\n                padding:0;\n                margin:0;\n                border:0;\n              }\n              .json-tool-value.json-tool-object > .json-tool-type\n              {\n                float:none;\n                position: absolute;\n                margin-left: 15px;\n              }\n              .json-tool-value:hover > .json-tool-type\n              {\n                opacity: 1;\n              }\n\n              .json-tool-block.opened > .json-tool-key {display: block}\n              .json-tool-block.closed > .json-tool-key {display: none}\n\n              .line-number\n              {\n                position: absolute;\n                left: 0;\n                text-align: right;\n                width: 20px;\n              }\n              .json-tool-value.json-tool-object > .line-number\n              {\n                margin-top: -15px;\n              }\n              .json-tool input, .json-tool select, .json-tool textarea\n              {\n                border: 0;\n                background-color: #ece9e9;\n                padding: 0;\n                margin: 1px;\n              }\n\n                .json-tool-errors {\n                    color: red;\n                    white-space: pre;\n                    font-family: monospace;\n                    line-height: 2em;\n                    font-weight: bold;\n                    font-size: 1.2em;\n                }\n"}};class r{constructor(e,t,a,s,o){this.arrayElements=[],this.objectElements={},this.element=t,this.setStyle(),this.schema=a,this.parent=o,this.path=e,this.currentValues={},this.types=a?r.getDefaultAvailableTypes(a):[];const i=r.getType(s);if(this.currentType="","undefined"!==i)this.currentType=i,this.types.push(i),this.setCurrentTypeValue(s);else if(this.schema){const e=r.getDefaultValue(this.schema);this.currentType=e.type,this.setCurrentTypeValue(e.value)}this.types=[...new Set(this.types)],this.updateElement()}update(){this.parent.update()}validate(){this.parent.validate()}getPath(e){for(let t=0;t<this.arrayElements.length;t++)if(this.arrayElements[t]===e)return`${this.path}.${t}`;for(const t in this.objectElements)if(this.objectElements[t]===e)return`${this.path}.${t}`;return`${this.path}.?`}getState(){return this.parent.getState()}setCurrentTypeValue(e){this.currentValues[this.currentType]=void 0!==e?JSON.parse(JSON.stringify(e)):void 0,this.validate&&this.validate()}static addDescription(e,t,r){r&&(t=`${t?`${t}\n`:""}Examples:\n${r.map((e=>JSON.stringify(e))).join(",\n")}`),t&&(e.title=t,e.style.textDecoration="underline dotted",e.style.cursor="help")}static getType(e){return void 0===e?"undefined":Array.isArray(e)?"array":null===e?"null":typeof e}static isInteger(e){if(!e)return!1;const t=Array.isArray(e.type)?e.type:[e.type];return t.includes("integer")&&!t.includes("number")}static getDefaultAvailableTypes(e){let t=Array.isArray(e.type)?[...e.type]:[e.type];return t=t.map((e=>"integer"===e?"number":e)),t}static getDefaultValue(e){const t=this.getDefaultAvailableTypes(e);return void 0!==e.default?{type:this.getType(e.default),value:e.default}:e.examples&&e.examples.length>0?{type:this.getType(e.examples[0]),value:e.examples[0]}:{type:t[0],value:this.getDefaultValueForType(e,t[0])}}static getDefaultValueForType(e,t){var r,a,s;if("null"===t)return null;if("number"===t)return this.isInteger(e)?Math.ceil(null!==(r=null==e?void 0:e.minimum)&&void 0!==r?r:0):null!==(a=null==e?void 0:e.minimum)&&void 0!==a?a:0;if("string"===t)return(null==e?void 0:e.enum)?e.enum[0]:"color"===(null==e?void 0:e.format)?"#000000":"date"===(null==e?void 0:e.format)?(new Date).toDateString():"";if("boolean"===t)return!1;if("array"===t)return[];if("object"===t){const t={};if(null==e?void 0:e.properties)for(const r of null!==(s=e.required)&&void 0!==s?s:[]){if(!e.properties.hasOwnProperty(r))continue;const a=this.getDefaultValue(e.properties[r]);t[r]=a.value}return t}}updateElement(){var e,t,a,s,o,i,n,l,c,u,h,p,d,m,f,v,y,g,P,b,E,w,_,S,x,j,T;this.objectElements={},this.arrayElements=[],this.element.innerHTML="",this.element.style.display="inline-block",this.element.classList.remove("json-tool-object"),this.element.append(this.createLineNumber());const F=this.currentType,$=null!==(e=this.currentValues[F])&&void 0!==e?e:this.currentValues[F]=r.getDefaultValueForType(this.schema,F);if(this.types.length>1){const e=document.createElement("select");e.classList.add("json-tool-type");for(const t of this.types){const r=document.createElement("option");r.innerText=t,r.value=t,e.append(r)}e.value=this.currentType,e.onchange=()=>{this.changeType(e.value)},this.element.append(e)}if("object"===F){this.element.append(this.createLineNumber(!0)),this.element.style.display="block",this.element.classList.add("json-tool-object"),this.element.append("{");const e=this.createBlock();this.element.append(e),this.element.append("}"),this.element.append(this.createLineNumber());for(const r in null!=$?$:{}){const i=this.createObjectKeyValuePair(r,(null===(t=this.schema)||void 0===t?void 0:t.properties)?this.schema.properties[r]:null,$[r]);e.append(i);const n=document.createElement("div");if(i.prepend(n),n.classList.add("json-tool-btns"),(null===(a=this.schema)||void 0===a?void 0:a.properties)&&!this.schema.properties.hasOwnProperty(r)){const e=document.createElement("div");e.classList.add("json-tool-btn"),e.innerText="X",e.onclick=()=>{const e=this.getValue();delete e[r],this.setCurrentTypeValue(e),this.updateElement()},n.append(e)}else if(!(null===(o=null===(s=this.schema)||void 0===s?void 0:s.required)||void 0===o?void 0:o.includes(r))){const e=document.createElement("div");e.classList.add("json-tool-btn"),e.innerText="∽",e.onclick=()=>{const e=this.getValue();delete e[r],this.setCurrentTypeValue(e),this.updateElement()},n.append(e)}}if(null===(i=this.schema)||void 0===i?void 0:i.properties)for(const t in this.schema.properties)if(!(null==$?void 0:$.hasOwnProperty(t)))if(null===(l=null===(n=this.schema)||void 0===n?void 0:n.required)||void 0===l?void 0:l.includes(t)){const r=this.createObjectKeyValuePair(t,this.schema.properties[t]);e.append(r)}else{const a=this.createObjectKeyValuePair(t,this.schema.properties[t],void 0,!0);e.append(a),a.style.textDecoration="line-through 2px";const s=document.createElement("div");a.prepend(s),s.classList.add("json-tool-btns");const o=document.createElement("div");o.classList.add("json-tool-btn"),o.innerText="≁",o.onclick=()=>{var e;if(null===(e=this.schema)||void 0===e?void 0:e.properties){const e=this.getValue();e[t]=r.getDefaultValue(this.schema.properties[t]).value,this.setCurrentTypeValue(e),this.updateElement()}},s.append(o)}}else if("array"===F){this.element.append(this.createLineNumber(!0)),this.element.style.display="block",this.element.classList.add("json-tool-object"),this.element.append("[");const e=this.createBlock();this.element.append(e);const t=document.createElement("div");t.classList.add("json-tool-btn"),t.innerText="+",this.element.append(t),t.onclick=()=>{var e,t;const a=[...this.getValue()];if(a.length!==(null===(e=this.schema)||void 0===e?void 0:e.maxItems)&&(null===(t=this.schema)||void 0===t?void 0:t.items)){const e=r.getDefaultValue(this.schema.items).value;a.push(e),this.currentType=F,this.setCurrentTypeValue(a),this.setIsOpened(!0),this.updateElement()}},this.element.append("]"),this.element.append(this.createLineNumber());const a=null!=$?$:[];for(let t=0;t<a.length;t++){const r=t,a=this.createObjectKeyValuePair(t,(null===(c=this.schema)||void 0===c?void 0:c.items)?this.schema.items:null,$[t]);e.append(a);const s=document.createElement("div");a.prepend(s),s.classList.add("json-tool-btns");const o=document.createElement("div");o.classList.add("json-tool-btn"),o.innerText="X",o.onclick=()=>{var e;const t=[...this.getValue()];t.length!==(null===(e=this.schema)||void 0===e?void 0:e.minItems)&&(t.splice(r,1),this.setCurrentTypeValue(t),this.updateElement())},s.append(o);const i=document.createElement("div");i.classList.add("json-tool-btn"),i.innerText="ᐃ",i.onclick=()=>{let e=[...this.getValue()];const t=e.splice(r,1);e=e.slice(0,r-1).concat(t).concat(e.slice(r-1)),this.setCurrentTypeValue(e),this.updateElement()},s.append(i);const n=document.createElement("div");n.classList.add("json-tool-btn"),n.innerText="ᐁ",n.onclick=()=>{let e=[...this.getValue()];const t=e.splice(r,1);e=e.slice(0,r+1).concat(t).concat(e.slice(r+1)),this.setCurrentTypeValue(e),this.updateElement()},s.append(n)}}else if("boolean"===F){const e=document.createElement("input");e.type="checkbox",e.checked=$,e.onchange=()=>{this.setCurrentTypeValue(e.checked)},this.element.append(e)}else if("string"===F)if(null===(u=this.schema)||void 0===u?void 0:u.enum){const e=document.createElement("select");for(const t of[...new Set(this.schema.enum.concat($))]){const r=document.createElement("option");r.innerText=t,r.value=t,e.append(r)}e.value=$,e.onchange=()=>{this.setCurrentTypeValue(e.value)},this.element.append(e)}else if("textarea"===(null===(h=this.schema)||void 0===h?void 0:h.format)){const e=document.createElement("textarea");e.value=$,e.minLength=null!==(d=null===(p=this.schema)||void 0===p?void 0:p.minLength)&&void 0!==d?d:0,e.maxLength=null!==(f=null===(m=this.schema)||void 0===m?void 0:m.maxLength)&&void 0!==f?f:99999999999999,e.onchange=()=>{this.setCurrentTypeValue(e.value)},this.element.append(e)}else if("date"===(null===(v=this.schema)||void 0===v?void 0:v.format)){const e=document.createElement("input");e.type="date",e.onchange=()=>{var t,r;this.setCurrentTypeValue(null!==(r=null===(t=e.valueAsDate)||void 0===t?void 0:t.toDateString())&&void 0!==r?r:"")},this.element.append(e),e.valueAsDate=new Date($)}else{const e=document.createElement("input");e.type="text",(null===(y=this.schema)||void 0===y?void 0:y.format)&&["password","email","color","url"].includes(this.schema.format)&&(e.type=this.schema.format),e.value=$,e.minLength=null!==(P=null===(g=this.schema)||void 0===g?void 0:g.minLength)&&void 0!==P?P:0,e.maxLength=null!==(E=null===(b=this.schema)||void 0===b?void 0:b.maxLength)&&void 0!==E?E:99999999999999,e.onchange=()=>{this.setCurrentTypeValue(e.value)},this.element.append(e)}else if("null"===F)this.element.append("null");else if("number"===F){const e=document.createElement("input");e.type="number",e.value=$.toString(),e.min=null!==(S=null===(_=null===(w=this.schema)||void 0===w?void 0:w.minimum)||void 0===_?void 0:_.toString())&&void 0!==S?S:"",e.max=null!==(T=null===(j=null===(x=this.schema)||void 0===x?void 0:x.maximum)||void 0===j?void 0:j.toString())&&void 0!==T?T:"",r.isInteger(this.schema)&&(e.step="1"),e.onchange=()=>{this.setCurrentTypeValue(parseFloat(e.value))},this.element.append(e)}else this.element.append(`[${F}] : ${$}`);this.update()}createLineNumber(e=!1){const t=document.createElement("div");return t.classList.add("line-number"),e&&(t.style.marginTop="0"),t}isOpened(){var e;return null===(e=this.parent.getState()[`${this.path}_opened`])||void 0===e||e}setIsOpened(e){this.parent.getState()[`${this.path}_opened`]=e}createBlock(){const e=document.createElement("div");e.classList.add("json-tool-block"),e.style.paddingLeft="25px",e.style.borderLeft="1px dashed black",e.style.marginLeft="3px";const t=document.createElement("div");"root"!==this.path&&e.append(t),t.classList.add("json-tool-btn");const r=r=>{t.innerText=r?"ᐯ":"ᐳ",e.classList.remove("opened","closed"),e.classList.add(r?"opened":"closed")};return t.onclick=()=>{const e=!this.isOpened();this.setIsOpened(e),r(e)},r(this.isOpened()),e}createObjectKeyValuePair(e,t,a,s=!1){var o;const i=document.createElement("div"),n=e;e="number"==typeof e?(null==t?void 0:t.title)?`${t.title} ${e}`:e:null!==(o=null==t?void 0:t.title)&&void 0!==o?o:e;const l=document.createElement("span");if(l.innerText=e.toString(),r.addDescription(l,null==t?void 0:t.description,null==t?void 0:t.examples),i.append(l),i.classList.add("json-tool-key"),i.append(": "),!s){const e=document.createElement("div"),s=new r(`${this.path}.${n}`,e,t,a,this);"array"===this.currentType?this.arrayElements.push(s):"object"===this.currentType&&(this.objectElements[n]=s),i.append(e)}return i}changeType(e){var t;this.currentType=e,this.currentValues.hasOwnProperty(e)||(void 0!==(null===(t=this.schema)||void 0===t?void 0:t.default)&&r.getType(this.schema.default)===e?this.setCurrentTypeValue(this.schema.default):this.setCurrentTypeValue(r.getDefaultValueForType(this.schema,e))),this.updateElement()}setStyle(){this.element.style.whiteSpace="pre",this.element.classList.add("json-tool-value")}getValue(){var e;let t;if("array"===this.currentType)t=this.arrayElements.map((e=>e.getValue()));else if("object"===this.currentType){const e={};for(const t in this.objectElements)e[t]=this.objectElements[t].getValue();t=e}else t=null!==(e=this.currentValues[this.currentType])&&void 0!==e?e:r.getDefaultValueForType(this.schema,this.currentType);return this.currentValues[this.currentType]=t,t}}},7271:function(e,t){"use strict";var r=this&&this.__awaiter||function(e,t,r,a){return new(r||(r=Promise))((function(s,o){function i(e){try{l(a.next(e))}catch(e){o(e)}}function n(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,n)}l((a=a.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var r,a,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:n(0),throw:n(1),return:n(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function n(n){return function(l){return function(n){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,n[0]&&(i=0)),i;)try{if(r=1,a&&(s=2&n[0]?a.return:n[0]?a.throw||((s=a.return)&&s.call(a),0):a.next)&&!(s=s.call(a,n[1])).done)return s;switch(a=0,s&&(n=[2&n[0],s.value]),n[0]){case 0:case 1:s=n;break;case 4:return i.label++,{value:n[1],done:!1};case 5:i.label++,a=n[1],n=[0];continue;case 7:n=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==n[0]&&2!==n[0])){i=0;continue}if(3===n[0]&&(!s||n[1]>s[0]&&n[1]<s[3])){i.label=n[1];break}if(6===n[0]&&i.label<s[1]){i.label=s[1],s=n;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(n);break}s[2]&&i.ops.pop(),i.trys.pop();continue}n=t.call(e,i)}catch(e){n=[6,e],a=0}finally{r=s=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,l])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.ApiUtils=void 0;var s=function(){function e(){}return e.run=function(e,t){return r(this,void 0,void 0,(function(){var r,s;return a(this,(function(a){switch(a.label){case 0:return[4,fetch(e,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)})];case 1:return[4,(r=a.sent()).json()];case 2:return s=a.sent(),[2,{status:r.status,body:s}]}}))}))},e}();t.ApiUtils=s},6571:function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.Schema=void 0;var tsch_1=__webpack_require__(6936),ajv_1=__importDefault(__webpack_require__(5096)),Schema=function(){function Schema(e,t,r,a,s){this.schemaFile=e,this.schemaContent=t,this.regex=Schema.getRegex(r),this.jsonSchema=a,this.tsch=s}return Schema.prototype.getSchemaFile=function(){return this.schemaFile},Schema.prototype.getSchemaContent=function(){return this.schemaContent},Schema.prototype.getRegex=function(){return this.regex},Schema.prototype.validate=function(e){var t;if(this.tsch)return this.tsch.validate(e);if(this.jsonSchema){var r=(new ajv_1.default).compile(this.jsonSchema),a=r(e),s=a?[]:(null!==(t=r.errors)&&void 0!==t?t:[]).map((function(e){var t;return"".concat(e.dataPath," ").concat(null!==(t=e.message)&&void 0!==t?t:"")}));return{valid:!!a,errors:s}}return{valid:!0,errors:[]}},Schema.prototype.getJsonSchema=function(){return this.tsch?this.tsch.getJsonSchemaProperty():this.jsonSchema},Schema.parseSchema=function(file,content,result){result||(result=[]);var addJsonSchema=function(e,t){return Schema.addJsonSchema(null!=result?result:[],file,content,e,t)},addTsch=function(e,t){return Schema.addTsch(null!=result?result:[],file,content,e,t)},tsch=tsch_1.tsch;try{eval(content)}catch(e){console.warn("Exception during ".concat(file),e)}return result},Schema.getRegex=function(e){return new RegExp("^"+e.split("*").map((function(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")})).join(".*")+"$")},Schema.addJsonSchema=function(e,t,r,a,s){e.push(new Schema(t,r,a,s))},Schema.addTsch=function(e,t,r,a,s){e.push(new Schema(t,r,a,void 0,s))},Schema}();exports.Schema=Schema},4102:function(e,t,r){"use strict";var a=this&&this.__awaiter||function(e,t,r,a){return new(r||(r=Promise))((function(s,o){function i(e){try{l(a.next(e))}catch(e){o(e)}}function n(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,n)}l((a=a.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var r,a,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:n(0),throw:n(1),return:n(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function n(n){return function(l){return function(n){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,n[0]&&(i=0)),i;)try{if(r=1,a&&(s=2&n[0]?a.return:n[0]?a.throw||((s=a.return)&&s.call(a),0):a.next)&&!(s=s.call(a,n[1])).done)return s;switch(a=0,s&&(n=[2&n[0],s.value]),n[0]){case 0:case 1:s=n;break;case 4:return i.label++,{value:n[1],done:!1};case 5:i.label++,a=n[1],n=[0];continue;case 7:n=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==n[0]&&2!==n[0])){i=0;continue}if(3===n[0]&&(!s||n[1]>s[0]&&n[1]<s[3])){i.label=n[1];break}if(6===n[0]&&i.label<s[1]){i.label=s[1],s=n;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(n);break}s[2]&&i.ops.pop(),i.trys.pop();continue}n=t.call(e,i)}catch(e){n=[6,e],a=0}finally{r=s=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,l])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.ServerUtils=void 0;var o=r(7271),i=r(6571),n=function(){function e(){}return e.list=function(){return a(this,void 0,void 0,(function(){return s(this,(function(e){switch(e.label){case 0:return[4,o.ApiUtils.run("/api",{command:"list"})];case 1:return[2,e.sent()]}}))}))},e.load=function(e,t){return a(this,void 0,void 0,(function(){var r;return s(this,(function(a){switch(a.label){case 0:return[4,o.ApiUtils.run("/api",{command:"load",schema:e,json:t})];case 1:return(r=a.sent()).body.schemaContent?(r.body.schema=i.Schema.parseSchema(e,r.body.schemaContent)[0],[2,r]):[2,r]}}))}))},e.save=function(e,t,r){return a(this,void 0,void 0,(function(){return s(this,(function(a){switch(a.label){case 0:return[4,o.ApiUtils.run("/api",{command:"save",schema:e,json:t,value:r})];case 1:return[2,a.sent()]}}))}))},e}();t.ServerUtils=n},4973:function(e,t,r){"use strict";var a=this&&this.__awaiter||function(e,t,r,a){return new(r||(r=Promise))((function(s,o){function i(e){try{l(a.next(e))}catch(e){o(e)}}function n(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,n)}l((a=a.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var r,a,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:n(0),throw:n(1),return:n(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function n(n){return function(l){return function(n){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,n[0]&&(i=0)),i;)try{if(r=1,a&&(s=2&n[0]?a.return:n[0]?a.throw||((s=a.return)&&s.call(a),0):a.next)&&!(s=s.call(a,n[1])).done)return s;switch(a=0,s&&(n=[2&n[0],s.value]),n[0]){case 0:case 1:s=n;break;case 4:return i.label++,{value:n[1],done:!1};case 5:i.label++,a=n[1],n=[0];continue;case 7:n=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==n[0]&&2!==n[0])){i=0;continue}if(3===n[0]&&(!s||n[1]>s[0]&&n[1]<s[3])){i.label=n[1];break}if(6===n[0]&&i.label<s[1]){i.label=s[1],s=n;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(n);break}s[2]&&i.ops.pop(),i.trys.pop();continue}n=t.call(e,i)}catch(e){n=[6,e],a=0}finally{r=s=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,l])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.Client=void 0;var o=r(4102),i=r(8831),n=function(){function e(){var e=this;this.schemas={},this.schema=null,this.jsonTool=null,this.schemaFile=null,this.jsonFile=null;var t=document.querySelector("#menu");this.jsonToolRoot=document.querySelector("#json-tool"),this.select=document.createElement("select"),t.appendChild(this.select),this.select.onchange=function(){return e.onFileChange()},this.buttons=document.createElement("div");var r=document.createElement("button");r.innerText="Save changes",r.onclick=function(){return e.save()};var a=document.createElement("button");a.innerText="Discard changes",a.onclick=function(){return e.close()},this.buttons.appendChild(r),this.buttons.appendChild(a),t.appendChild(this.buttons),this.setJsonToolVisible(!1)}return e.prototype.close=function(){this.setJsonToolVisible(!1)},e.prototype.setJsonToolVisible=function(e){var t;this.select.style.display=e?"none":"",this.buttons.style.display=e?"":"none",e||(null===(t=this.jsonTool)||void 0===t||t.hide(),this.loadFiles())},e.prototype.onFileChange=function(){return a(this,void 0,void 0,(function(){var e,t,r,a;return s(this,(function(s){return e=this.select.value,t=e.split("@"),r=t[0],a=t[1],this.loadFile(r,a),[2]}))}))},e.prototype.loadFile=function(e,t){return a(this,void 0,void 0,(function(){var r,a;return s(this,(function(s){switch(s.label){case 0:return[4,o.ServerUtils.load(e,t)];case 1:return(r=s.sent()).body.schema&&(this.schema=r.body.schema,(a=r.body.schema.getJsonSchema())&&(this.schemaFile=e,this.jsonFile=t,this.setJsonToolVisible(!0),this.jsonTool=new i.JsonTool(this.jsonToolRoot),this.jsonTool.load(a,r.body.value,(function(e){return r.body.schema.validate(e)})))),[2]}}))}))},e.prototype.save=function(){return a(this,void 0,void 0,(function(){var e,t;return s(this,(function(r){switch(r.label){case 0:return this.schema&&this.jsonTool&&this.jsonFile&&this.schemaFile?(e=this.jsonTool.getValue(),this.schema.validate(e).valid?[4,o.ServerUtils.save(this.schemaFile,this.jsonFile,e)]:[2,alert("Please fix all errors before saving!")]):[2];case 1:return 200===(t=r.sent()).status?this.setJsonToolVisible(!1):alert("Failed to save: ".concat(t.body.msg)),[2]}}))}))},e.prototype.loadFiles=function(){return a(this,void 0,void 0,(function(){var e,t,r,a,i,n,l;return s(this,(function(s){switch(s.label){case 0:return[4,o.ServerUtils.list()];case 1:if(200!==(e=s.sent()).status)return[2];for(r in this.schemas=e.body.schemas,this.select.innerHTML="",(t=document.createElement("option")).disabled=!0,t.selected=!0,t.innerText="==Choose file==",this.select.appendChild(t),this.schemas)for(a=0,i=this.schemas[r];a<i.length;a++)n=i[a],(l=document.createElement("option")).value="".concat(r,"@").concat(n),l.innerText=n,this.select.appendChild(l);return[2]}}))}))},e}();t.Client=n,new n},5290:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TschArray=t.TschObject=t.TschUnion=t.TschUndefined=t.TschNull=t.TschBoolean=t.TschNumber=t.TschString=t.TschType=void 0;class r{constructor(e,t){this.path=e,this.pathString=r.formatPath(e),this.rawMessage=t,this.message=`${this.pathString}: ${t}`}static formatPath(e){return e.length<1?"root":e.join(".")}}class a{constructor(e){this._ts=null,this._type=e,this._title=null,this._description=null,this._default=null,this._examples=null}union(e){return new c(this,e)}optional(){return new c(this,new l)}nullable(){return new c(this,new n)}clone(){const e=this.newInstance();return e._title=this._title,e._description=this._description,e._default=this._default,e._examples=this._examples?[...this._examples]:null,e}title(e){const t=this.clone();return t._title=e,t}description(e){const t=this.clone();return t._description=e,t}default(e){const t=this.clone();return t._default=e,t}examples(e){const t=this.clone();return t._examples=[...e],t}getJsonSchemaProperty(){const e={type:this._type};return this._title&&(e.title=this._title),this._description&&(e.description=this._description),this._default&&(e.default=this._default),this._examples&&(e.examples=this._examples),e}validate(e){const t=[];return this.validateInternal([],e,t),{valid:0==t.length,errors:t}}validateInternal(e,t,a){this.isCorrectType(t)?this.validateCorrectType(e,t,a):a.push(new r(e,`Value has to be of type ${this.getTypeName()}`))}isOptional(){return!1}isNullable(){return!1}}t.TschType=a;class s extends a{constructor(){super("string"),this._format=null,this._enum=null,this._minLength=null,this._maxLength=null}newInstance(){return new s}clone(){const e=super.clone();return e._format=this._format,e._enum=this._enum,e._minLength=this._minLength,e._maxLength=this._maxLength,e}getJsonSchemaProperty(){const e=super.getJsonSchemaProperty();return this._format&&(e.format=this._format),this._enum&&(e.enum=this._enum),this._minLength&&(e.minLength=this._minLength),this._maxLength&&(e.maxLength=this._maxLength),e}minLength(e){const t=this.clone();return t._minLength=e,t}maxLength(e){const t=this.clone();return t._maxLength=e,t}enumeration(e){const t=this.clone();return t._enum=[...e],t}format(e){const t=this.clone();return t._format=e,t}color(){return this.format("color")}date(){return this.format("date")}email(){return this.format("email")}password(){return this.format("password")}textarea(){return this.format("textarea")}url(){return this.format("url")}isCorrectType(e){return"string"==typeof e}getTypeName(){return"string"}validateCorrectType(e,t,a){this._enum&&!this._enum.includes(t)&&a.push(new r(e,`Value has to be one of the following: ${this._enum.join(", ")}`)),"number"==typeof this._minLength&&t.length<this._minLength&&a.push(new r(e,`Value must be longer than ${this._minLength} characters.`)),"number"==typeof this._maxLength&&t.length>this._maxLength&&a.push(new r(e,`Value must be shorter than ${this._maxLength} characters.`)),"color"!==this._format||/^#?[0-9a-f]{3,6}$/i.test(t)||a.push(new r(e,"Value must be a color hex code.")),"date"===this._format&&Number.isNaN(Date.parse(t))&&a.push(new r(e,"Value must be a date.")),"email"!==this._format||/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(t)||a.push(new r(e,"Value must be an email.")),"url"!==this._format||/^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$/.test(t)||a.push(new r(e,"Value must be a URL."))}}t.TschString=s;class o extends a{constructor(){super("number"),this._integer=!1,this._min=null,this._max=null}newInstance(){return new o}clone(){const e=super.clone();return e._integer=this._integer,e._min=this._min,e._max=this._max,e}integer(){const e=this.clone();return e._integer=!0,e}min(e){const t=this.clone();return t._min=e,t}max(e){const t=this.clone();return t._max=e,t}getJsonSchemaProperty(){const e=super.getJsonSchemaProperty();return this._integer&&(e.type="integer"),null!==this._min&&(e.minimum=this._min),null!==this._max&&(e.maximum=this._max),e}isCorrectType(e){return"number"==typeof e}getTypeName(){return"number"}validateCorrectType(e,t,a){this._integer&&!Number.isInteger(t)&&a.push(new r(e,"Value has to be an integer.")),"number"==typeof this._min&&t<this._min&&a.push(new r(e,`Value must be at least ${this._min}.`)),"number"==typeof this._max&&t>this._max&&a.push(new r(e,`Value must be at less than ${this._max}.`))}}t.TschNumber=o;class i extends a{constructor(){super("boolean")}newInstance(){return new i}clone(){return super.clone()}isCorrectType(e){return"boolean"==typeof e}getTypeName(){return"boolean"}validateCorrectType(e,t,r){}}t.TschBoolean=i;class n extends a{constructor(){super("null")}newInstance(){return new n}clone(){return super.clone()}isCorrectType(e){return null===e}getTypeName(){return"null"}validateCorrectType(e,t,r){}}t.TschNull=n;class l extends a{constructor(){super("undefined")}newInstance(){return new l}clone(){return super.clone()}isCorrectType(e){return void 0===e}getTypeName(){return"undefined"}validateCorrectType(e,t,r){}}t.TschUndefined=l;class c extends a{constructor(e,t){super(`union_${e._type}_${t._type}`),this.type1=e,this.type2=t}Type1Internal(){return this.type1}Type2Internal(){return this.type2}newInstance(){return new c(this.type1.clone(),this.type2.clone())}clone(){const e=super.clone();return e.type1=this.Type1Internal().clone(),e.type2=this.Type2Internal().clone(),e}getJsonSchemaProperty(){var e,t,r,a;const s="undefined"===this.Type1Internal()._type?{}:this.type1.getJsonSchemaProperty(),o="undefined"===this.Type2Internal()._type?{}:this.type2.getJsonSchemaProperty(),i=Object.assign(Object.assign({},s),o);return i.type=[...Array.isArray(s.type)?s.type:[s.type],...Array.isArray(o.type)?o.type:[o.type]].filter((e=>!!e&&"undefined"!==e)),i.type.length<2&&(i.type=i.type[0]),s.properties&&o.properties&&(i.properties=Object.assign(Object.assign({},null!==(e=s.properties)&&void 0!==e?e:{}),null!==(t=o.properties)&&void 0!==t?t:{}),s.required&&o.required?i.required=s.required.filter((e=>{var t;return null===(t=o.required)||void 0===t?void 0:t.includes(e)})):i.required=null!==(a=null!==(r=s.required)&&void 0!==r?r:o.required)&&void 0!==a?a:[]),this._title&&(i.title=this._title),this._description&&(i.description=this._description),this._default&&(i.default=this._default),i}isNullable(){return"null"===this.Type1Internal()._type||"null"===this.Type2Internal()._type||this.Type1Internal().isNullable()||this.Type2Internal().isNullable()}isOptional(){return"undefined"===this.Type1Internal()._type||"undefined"===this.Type2Internal()._type||this.Type1Internal().isOptional()||this.Type2Internal().isOptional()}isCorrectType(e){return this.Type1Internal().isCorrectType(e)||this.Type2Internal().isCorrectType(e)}getTypeName(){return`${this.type1.getTypeName()} or ${this.type2.getTypeName()}`}validateCorrectType(e,t,r){this.Type1Internal().isCorrectType(t)&&this.Type1Internal().validateInternal(e,t,r),this.Type2Internal().isCorrectType(t)&&this.Type2Internal().validateInternal(e,t,r)}}t.TschUnion=c;class u extends a{constructor(e){super("object"),this.shape=e}newInstance(){return new u(this.shape)}clone(){const e=super.clone();return e.shape=this.shape,e}getJsonSchemaProperty(){const e=super.getJsonSchemaProperty();e.required=Object.keys(this.shape).filter((e=>!this.shape[e].isOptional())),e.properties={};for(const t in this.shape)e.properties[t]=this.shape[t].getJsonSchemaProperty();return e}isCorrectType(e){return"object"==typeof e&&null!==e&&!Array.isArray(e)}getTypeName(){return"object"}validateCorrectType(e,t,a){for(const s in this.shape){const o=this.shape[s];o.isOptional()||t.hasOwnProperty(s)||a.push(new r(e,`Property ${s} of type ${o.getTypeName()} is required.`)),t.hasOwnProperty(s)&&o.validateInternal([...e,s],t[s],a)}}}t.TschObject=u;class h extends a{constructor(e){super("array"),this.elementType=e,this._format=null,this._minElementCount=null,this._maxElementCount=null,this._unique=!1}newInstance(){return new h(this.elementType)}clone(){const e=super.clone();return e.elementType=this.elementType,e._format=this._format,e._unique=this._unique,e._minElementCount=this._minElementCount,e._maxElementCount=this._maxElementCount,e}getJsonSchemaProperty(){const e=super.getJsonSchemaProperty();return e.items=this.elementType.getJsonSchemaProperty(),this._format&&(e.format=this._format),this._unique&&(e.uniqueItems=this._unique),this._minElementCount&&(e.minItems=this._minElementCount),this._maxElementCount&&(e.maxItems=this._maxElementCount),e}table(){const e=this.clone();return e._format="table",e}minElements(e){const t=this.clone();return t._minElementCount=e,t}maxElements(e){const t=this.clone();return t._maxElementCount=e,t}unique(){const e=this.clone();return e._unique=!0,e}isCorrectType(e){return"object"==typeof e&&null!==e&&Array.isArray(e)}getTypeName(){return`array of ${this.elementType.getTypeName()}`}validateCorrectType(e,t,a){const s=this.elementType,o=new Set;"number"==typeof this._minElementCount&&t.length<this._minElementCount&&a.push(new r(e,`Array must contain at least ${this._minElementCount} elements.`)),"number"==typeof this._maxElementCount&&t.length>this._maxElementCount&&a.push(new r(e,`Array must contain at most ${this._maxElementCount} elements.`));for(let i=0;i<t.length;i++){const n=t[i];if(s.validateInternal([...e,i.toString()],n,a),this._unique){const t=JSON.stringify(n);o.has(t)&&a.push(new r(e,"All values have to be unique.")),o.add(t)}}}}t.TschArray=h},6936:function(e,t,r){"use strict";var a=this&&this.__createBinding||(Object.create?function(e,t,r,a){void 0===a&&(a=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,a,s)}:function(e,t,r,a){void 0===a&&(a=r),e[a]=t[r]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&a(t,e,r);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.tsch=void 0;const i=o(r(2958));t.tsch=i},2958:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.array=t.object=t.boolean=t.number=t.string=void 0;const a=r(5290);t.string=function(){return new a.TschString},t.number=function(){return new a.TschNumber},t.boolean=function(){return new a.TschBoolean},t.object=function(e){return new a.TschObject(e)},t.array=function(e){return new a.TschArray(e)}},540:function(e,t){!function(e){"use strict";function t(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];if(t.length>1){t[0]=t[0].slice(0,-1);for(var a=t.length-1,s=1;s<a;++s)t[s]=t[s].slice(1,-1);return t[a]=t[a].slice(1),t.join("")}return t[0]}function r(e){return"(?:"+e+")"}function a(e){return void 0===e?"undefined":null===e?"null":Object.prototype.toString.call(e).split(" ").pop().split("]").shift().toLowerCase()}function s(e){return e.toUpperCase()}function o(e){var a="[A-Za-z]",s="[0-9]",o=t(s,"[A-Fa-f]"),i=r(r("%[EFef]"+o+"%"+o+o+"%"+o+o)+"|"+r("%[89A-Fa-f]"+o+"%"+o+o)+"|"+r("%"+o+o)),n="[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",l=t("[\\:\\/\\?\\#\\[\\]\\@]",n),c=e?"[\\uE000-\\uF8FF]":"[]",u=t(a,s,"[\\-\\.\\_\\~]",e?"[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]":"[]"),h=r(a+t(a,s,"[\\+\\-\\.]")+"*"),p=r(r(i+"|"+t(u,n,"[\\:]"))+"*"),d=(r(r("25[0-5]")+"|"+r("2[0-4][0-9]")+"|"+r("1[0-9][0-9]")+"|"+r("[1-9][0-9]")+"|"+s),r(r("25[0-5]")+"|"+r("2[0-4][0-9]")+"|"+r("1[0-9][0-9]")+"|"+r("0?[1-9][0-9]")+"|0?0?"+s)),m=r(d+"\\."+d+"\\."+d+"\\."+d),f=r(o+"{1,4}"),v=r(r(f+"\\:"+f)+"|"+m),y=r(r(f+"\\:")+"{6}"+v),g=r("\\:\\:"+r(f+"\\:")+"{5}"+v),P=r(r(f)+"?\\:\\:"+r(f+"\\:")+"{4}"+v),b=r(r(r(f+"\\:")+"{0,1}"+f)+"?\\:\\:"+r(f+"\\:")+"{3}"+v),E=r(r(r(f+"\\:")+"{0,2}"+f)+"?\\:\\:"+r(f+"\\:")+"{2}"+v),w=r(r(r(f+"\\:")+"{0,3}"+f)+"?\\:\\:"+f+"\\:"+v),_=r(r(r(f+"\\:")+"{0,4}"+f)+"?\\:\\:"+v),S=r(r(r(f+"\\:")+"{0,5}"+f)+"?\\:\\:"+f),x=r(r(r(f+"\\:")+"{0,6}"+f)+"?\\:\\:"),j=r([y,g,P,b,E,w,_,S,x].join("|")),T=r(r(u+"|"+i)+"+"),F=(r(j+"\\%25"+T),r(j+r("\\%25|\\%(?!"+o+"{2})")+T)),$=r("[vV]"+o+"+\\."+t(u,n,"[\\:]")+"+"),D=r("\\["+r(F+"|"+j+"|"+$)+"\\]"),O=r(r(i+"|"+t(u,n))+"*"),R=r(D+"|"+m+"(?!"+O+")|"+O),C=r("[0-9]*"),k=r(r(p+"@")+"?"+R+r("\\:"+C)+"?"),I=r(i+"|"+t(u,n,"[\\:\\@]")),A=r(I+"*"),L=r(I+"+"),V=r(r(i+"|"+t(u,n,"[\\@]"))+"+"),N=r(r("\\/"+A)+"*"),q=r("\\/"+r(L+N)+"?"),z=r(V+N),Q=r(L+N),U="(?!"+I+")",M=(r(N+"|"+q+"|"+z+"|"+Q+"|"+U),r(r(I+"|"+t("[\\/\\?]",c))+"*")),H=r(r(I+"|[\\/\\?]")+"*"),J=r(r("\\/\\/"+k+N)+"|"+q+"|"+Q+"|"+U),K=r(h+"\\:"+J+r("\\?"+M)+"?"+r("\\#"+H)+"?"),B=r(r("\\/\\/"+k+N)+"|"+q+"|"+z+"|"+U),Z=r(B+r("\\?"+M)+"?"+r("\\#"+H)+"?");return r(K+"|"+Z),r(h+"\\:"+J+r("\\?"+M)+"?"),r(r("\\/\\/("+r("("+p+")@")+"?("+R+")"+r("\\:("+C+")")+"?)")+"?("+N+"|"+q+"|"+Q+"|"+U+")"),r("\\?("+M+")"),r("\\#("+H+")"),r(r("\\/\\/("+r("("+p+")@")+"?("+R+")"+r("\\:("+C+")")+"?)")+"?("+N+"|"+q+"|"+z+"|"+U+")"),r("\\?("+M+")"),r("\\#("+H+")"),r(r("\\/\\/("+r("("+p+")@")+"?("+R+")"+r("\\:("+C+")")+"?)")+"?("+N+"|"+q+"|"+Q+"|"+U+")"),r("\\?("+M+")"),r("\\#("+H+")"),r("("+p+")@"),r("\\:("+C+")"),{NOT_SCHEME:new RegExp(t("[^]",a,s,"[\\+\\-\\.]"),"g"),NOT_USERINFO:new RegExp(t("[^\\%\\:]",u,n),"g"),NOT_HOST:new RegExp(t("[^\\%\\[\\]\\:]",u,n),"g"),NOT_PATH:new RegExp(t("[^\\%\\/\\:\\@]",u,n),"g"),NOT_PATH_NOSCHEME:new RegExp(t("[^\\%\\/\\@]",u,n),"g"),NOT_QUERY:new RegExp(t("[^\\%]",u,n,"[\\:\\@\\/\\?]",c),"g"),NOT_FRAGMENT:new RegExp(t("[^\\%]",u,n,"[\\:\\@\\/\\?]"),"g"),ESCAPE:new RegExp(t("[^]",u,n),"g"),UNRESERVED:new RegExp(u,"g"),OTHER_CHARS:new RegExp(t("[^\\%]",u,l),"g"),PCT_ENCODED:new RegExp(i,"g"),IPV4ADDRESS:new RegExp("^("+m+")$"),IPV6ADDRESS:new RegExp("^\\[?("+j+")"+r(r("\\%25|\\%(?!"+o+"{2})")+"("+T+")")+"?\\]?$")}}var i=o(!1),n=o(!0),l=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var r=[],a=!0,s=!1,o=void 0;try{for(var i,n=e[Symbol.iterator]();!(a=(i=n.next()).done)&&(r.push(i.value),!t||r.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{!a&&n.return&&n.return()}finally{if(s)throw o}}return r}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},c=2147483647,u=36,h=/^xn--/,p=/[^\0-\x7E]/,d=/[\x2E\u3002\uFF0E\uFF61]/g,m={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},f=Math.floor,v=String.fromCharCode;function y(e){throw new RangeError(m[e])}function g(e,t){var r=e.split("@"),a="";return r.length>1&&(a=r[0]+"@",e=r[1]),a+function(e,t){for(var r=[],a=e.length;a--;)r[a]=t(e[a]);return r}((e=e.replace(d,".")).split("."),t).join(".")}function P(e){for(var t=[],r=0,a=e.length;r<a;){var s=e.charCodeAt(r++);if(s>=55296&&s<=56319&&r<a){var o=e.charCodeAt(r++);56320==(64512&o)?t.push(((1023&s)<<10)+(1023&o)+65536):(t.push(s),r--)}else t.push(s)}return t}var b=function(e,t){return e+22+75*(e<26)-((0!=t)<<5)},E=function(e,t,r){var a=0;for(e=r?f(e/700):e>>1,e+=f(e/t);e>455;a+=u)e=f(e/35);return f(a+36*e/(e+38))},w=function(e){var t,r=[],a=e.length,s=0,o=128,i=72,n=e.lastIndexOf("-");n<0&&(n=0);for(var l=0;l<n;++l)e.charCodeAt(l)>=128&&y("not-basic"),r.push(e.charCodeAt(l));for(var h=n>0?n+1:0;h<a;){for(var p=s,d=1,m=u;;m+=u){h>=a&&y("invalid-input");var v=(t=e.charCodeAt(h++))-48<10?t-22:t-65<26?t-65:t-97<26?t-97:u;(v>=u||v>f((c-s)/d))&&y("overflow"),s+=v*d;var g=m<=i?1:m>=i+26?26:m-i;if(v<g)break;var P=u-g;d>f(c/P)&&y("overflow"),d*=P}var b=r.length+1;i=E(s-p,b,0==p),f(s/b)>c-o&&y("overflow"),o+=f(s/b),s%=b,r.splice(s++,0,o)}return String.fromCodePoint.apply(String,r)},_=function(e){var t=[],r=(e=P(e)).length,a=128,s=0,o=72,i=!0,n=!1,l=void 0;try{for(var h,p=e[Symbol.iterator]();!(i=(h=p.next()).done);i=!0){var d=h.value;d<128&&t.push(v(d))}}catch(e){n=!0,l=e}finally{try{!i&&p.return&&p.return()}finally{if(n)throw l}}var m=t.length,g=m;for(m&&t.push("-");g<r;){var w=c,_=!0,S=!1,x=void 0;try{for(var j,T=e[Symbol.iterator]();!(_=(j=T.next()).done);_=!0){var F=j.value;F>=a&&F<w&&(w=F)}}catch(e){S=!0,x=e}finally{try{!_&&T.return&&T.return()}finally{if(S)throw x}}var $=g+1;w-a>f((c-s)/$)&&y("overflow"),s+=(w-a)*$,a=w;var D=!0,O=!1,R=void 0;try{for(var C,k=e[Symbol.iterator]();!(D=(C=k.next()).done);D=!0){var I=C.value;if(I<a&&++s>c&&y("overflow"),I==a){for(var A=s,L=u;;L+=u){var V=L<=o?1:L>=o+26?26:L-o;if(A<V)break;var N=A-V,q=u-V;t.push(v(b(V+N%q,0))),A=f(N/q)}t.push(v(b(A,0))),o=E(s,$,g==m),s=0,++g}}}catch(e){O=!0,R=e}finally{try{!D&&k.return&&k.return()}finally{if(O)throw R}}++s,++a}return t.join("")},S=function(e){return g(e,(function(e){return p.test(e)?"xn--"+_(e):e}))},x=function(e){return g(e,(function(e){return h.test(e)?w(e.slice(4).toLowerCase()):e}))},j={};function T(e){var t=e.charCodeAt(0);return t<16?"%0"+t.toString(16).toUpperCase():t<128?"%"+t.toString(16).toUpperCase():t<2048?"%"+(t>>6|192).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase():"%"+(t>>12|224).toString(16).toUpperCase()+"%"+(t>>6&63|128).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase()}function F(e){for(var t="",r=0,a=e.length;r<a;){var s=parseInt(e.substr(r+1,2),16);if(s<128)t+=String.fromCharCode(s),r+=3;else if(s>=194&&s<224){if(a-r>=6){var o=parseInt(e.substr(r+4,2),16);t+=String.fromCharCode((31&s)<<6|63&o)}else t+=e.substr(r,6);r+=6}else if(s>=224){if(a-r>=9){var i=parseInt(e.substr(r+4,2),16),n=parseInt(e.substr(r+7,2),16);t+=String.fromCharCode((15&s)<<12|(63&i)<<6|63&n)}else t+=e.substr(r,9);r+=9}else t+=e.substr(r,3),r+=3}return t}function $(e,t){function r(e){var r=F(e);return r.match(t.UNRESERVED)?r:e}return e.scheme&&(e.scheme=String(e.scheme).replace(t.PCT_ENCODED,r).toLowerCase().replace(t.NOT_SCHEME,"")),void 0!==e.userinfo&&(e.userinfo=String(e.userinfo).replace(t.PCT_ENCODED,r).replace(t.NOT_USERINFO,T).replace(t.PCT_ENCODED,s)),void 0!==e.host&&(e.host=String(e.host).replace(t.PCT_ENCODED,r).toLowerCase().replace(t.NOT_HOST,T).replace(t.PCT_ENCODED,s)),void 0!==e.path&&(e.path=String(e.path).replace(t.PCT_ENCODED,r).replace(e.scheme?t.NOT_PATH:t.NOT_PATH_NOSCHEME,T).replace(t.PCT_ENCODED,s)),void 0!==e.query&&(e.query=String(e.query).replace(t.PCT_ENCODED,r).replace(t.NOT_QUERY,T).replace(t.PCT_ENCODED,s)),void 0!==e.fragment&&(e.fragment=String(e.fragment).replace(t.PCT_ENCODED,r).replace(t.NOT_FRAGMENT,T).replace(t.PCT_ENCODED,s)),e}function D(e){return e.replace(/^0*(.*)/,"$1")||"0"}function O(e,t){var r=e.match(t.IPV4ADDRESS)||[],a=l(r,2)[1];return a?a.split(".").map(D).join("."):e}function R(e,t){var r=e.match(t.IPV6ADDRESS)||[],a=l(r,3),s=a[1],o=a[2];if(s){for(var i=s.toLowerCase().split("::").reverse(),n=l(i,2),c=n[0],u=n[1],h=u?u.split(":").map(D):[],p=c.split(":").map(D),d=t.IPV4ADDRESS.test(p[p.length-1]),m=d?7:8,f=p.length-m,v=Array(m),y=0;y<m;++y)v[y]=h[y]||p[f+y]||"";d&&(v[m-1]=O(v[m-1],t));var g=v.reduce((function(e,t,r){if(!t||"0"===t){var a=e[e.length-1];a&&a.index+a.length===r?a.length++:e.push({index:r,length:1})}return e}),[]).sort((function(e,t){return t.length-e.length}))[0],P=void 0;if(g&&g.length>1){var b=v.slice(0,g.index),E=v.slice(g.index+g.length);P=b.join(":")+"::"+E.join(":")}else P=v.join(":");return o&&(P+="%"+o),P}return e}var C=/^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i,k=void 0==="".match(/(){0}/)[1];function I(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r={},a=!1!==t.iri?n:i;"suffix"===t.reference&&(e=(t.scheme?t.scheme+":":"")+"//"+e);var s=e.match(C);if(s){k?(r.scheme=s[1],r.userinfo=s[3],r.host=s[4],r.port=parseInt(s[5],10),r.path=s[6]||"",r.query=s[7],r.fragment=s[8],isNaN(r.port)&&(r.port=s[5])):(r.scheme=s[1]||void 0,r.userinfo=-1!==e.indexOf("@")?s[3]:void 0,r.host=-1!==e.indexOf("//")?s[4]:void 0,r.port=parseInt(s[5],10),r.path=s[6]||"",r.query=-1!==e.indexOf("?")?s[7]:void 0,r.fragment=-1!==e.indexOf("#")?s[8]:void 0,isNaN(r.port)&&(r.port=e.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/)?s[4]:void 0)),r.host&&(r.host=R(O(r.host,a),a)),void 0!==r.scheme||void 0!==r.userinfo||void 0!==r.host||void 0!==r.port||r.path||void 0!==r.query?void 0===r.scheme?r.reference="relative":void 0===r.fragment?r.reference="absolute":r.reference="uri":r.reference="same-document",t.reference&&"suffix"!==t.reference&&t.reference!==r.reference&&(r.error=r.error||"URI is not a "+t.reference+" reference.");var o=j[(t.scheme||r.scheme||"").toLowerCase()];if(t.unicodeSupport||o&&o.unicodeSupport)$(r,a);else{if(r.host&&(t.domainHost||o&&o.domainHost))try{r.host=S(r.host.replace(a.PCT_ENCODED,F).toLowerCase())}catch(e){r.error=r.error||"Host's domain name can not be converted to ASCII via punycode: "+e}$(r,i)}o&&o.parse&&o.parse(r,t)}else r.error=r.error||"URI can not be parsed.";return r}function A(e,t){var r=!1!==t.iri?n:i,a=[];return void 0!==e.userinfo&&(a.push(e.userinfo),a.push("@")),void 0!==e.host&&a.push(R(O(String(e.host),r),r).replace(r.IPV6ADDRESS,(function(e,t,r){return"["+t+(r?"%25"+r:"")+"]"}))),"number"!=typeof e.port&&"string"!=typeof e.port||(a.push(":"),a.push(String(e.port))),a.length?a.join(""):void 0}var L=/^\.\.?\//,V=/^\/\.(\/|$)/,N=/^\/\.\.(\/|$)/,q=/^\/?(?:.|\n)*?(?=\/|$)/;function z(e){for(var t=[];e.length;)if(e.match(L))e=e.replace(L,"");else if(e.match(V))e=e.replace(V,"/");else if(e.match(N))e=e.replace(N,"/"),t.pop();else if("."===e||".."===e)e="";else{var r=e.match(q);if(!r)throw new Error("Unexpected dot segment condition");var a=r[0];e=e.slice(a.length),t.push(a)}return t.join("")}function Q(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.iri?n:i,a=[],s=j[(t.scheme||e.scheme||"").toLowerCase()];if(s&&s.serialize&&s.serialize(e,t),e.host)if(r.IPV6ADDRESS.test(e.host));else if(t.domainHost||s&&s.domainHost)try{e.host=t.iri?x(e.host):S(e.host.replace(r.PCT_ENCODED,F).toLowerCase())}catch(r){e.error=e.error||"Host's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+r}$(e,r),"suffix"!==t.reference&&e.scheme&&(a.push(e.scheme),a.push(":"));var o=A(e,t);if(void 0!==o&&("suffix"!==t.reference&&a.push("//"),a.push(o),e.path&&"/"!==e.path.charAt(0)&&a.push("/")),void 0!==e.path){var l=e.path;t.absolutePath||s&&s.absolutePath||(l=z(l)),void 0===o&&(l=l.replace(/^\/\//,"/%2F")),a.push(l)}return void 0!==e.query&&(a.push("?"),a.push(e.query)),void 0!==e.fragment&&(a.push("#"),a.push(e.fragment)),a.join("")}function U(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a={};return arguments[3]||(e=I(Q(e,r),r),t=I(Q(t,r),r)),!(r=r||{}).tolerant&&t.scheme?(a.scheme=t.scheme,a.userinfo=t.userinfo,a.host=t.host,a.port=t.port,a.path=z(t.path||""),a.query=t.query):(void 0!==t.userinfo||void 0!==t.host||void 0!==t.port?(a.userinfo=t.userinfo,a.host=t.host,a.port=t.port,a.path=z(t.path||""),a.query=t.query):(t.path?("/"===t.path.charAt(0)?a.path=z(t.path):(void 0===e.userinfo&&void 0===e.host&&void 0===e.port||e.path?e.path?a.path=e.path.slice(0,e.path.lastIndexOf("/")+1)+t.path:a.path=t.path:a.path="/"+t.path,a.path=z(a.path)),a.query=t.query):(a.path=e.path,void 0!==t.query?a.query=t.query:a.query=e.query),a.userinfo=e.userinfo,a.host=e.host,a.port=e.port),a.scheme=e.scheme),a.fragment=t.fragment,a}function M(e,t){return e&&e.toString().replace(t&&t.iri?n.PCT_ENCODED:i.PCT_ENCODED,F)}var H={scheme:"http",domainHost:!0,parse:function(e,t){return e.host||(e.error=e.error||"HTTP URIs must have a host."),e},serialize:function(e,t){var r="https"===String(e.scheme).toLowerCase();return e.port!==(r?443:80)&&""!==e.port||(e.port=void 0),e.path||(e.path="/"),e}},J={scheme:"https",domainHost:H.domainHost,parse:H.parse,serialize:H.serialize};function K(e){return"boolean"==typeof e.secure?e.secure:"wss"===String(e.scheme).toLowerCase()}var B={scheme:"ws",domainHost:!0,parse:function(e,t){var r=e;return r.secure=K(r),r.resourceName=(r.path||"/")+(r.query?"?"+r.query:""),r.path=void 0,r.query=void 0,r},serialize:function(e,t){if(e.port!==(K(e)?443:80)&&""!==e.port||(e.port=void 0),"boolean"==typeof e.secure&&(e.scheme=e.secure?"wss":"ws",e.secure=void 0),e.resourceName){var r=e.resourceName.split("?"),a=l(r,2),s=a[0],o=a[1];e.path=s&&"/"!==s?s:void 0,e.query=o,e.resourceName=void 0}return e.fragment=void 0,e}},Z={scheme:"wss",domainHost:B.domainHost,parse:B.parse,serialize:B.serialize},G={},W="[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]",X="[0-9A-Fa-f]",Y=r(r("%[EFef][0-9A-Fa-f]%"+X+X+"%"+X+X)+"|"+r("%[89A-Fa-f][0-9A-Fa-f]%"+X+X)+"|"+r("%"+X+X)),ee=t("[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]",'[\\"\\\\]'),te=new RegExp(W,"g"),re=new RegExp(Y,"g"),ae=new RegExp(t("[^]","[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]","[\\.]",'[\\"]',ee),"g"),se=new RegExp(t("[^]",W,"[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]"),"g"),oe=se;function ie(e){var t=F(e);return t.match(te)?t:e}var ne={scheme:"mailto",parse:function(e,t){var r=e,a=r.to=r.path?r.path.split(","):[];if(r.path=void 0,r.query){for(var s=!1,o={},i=r.query.split("&"),n=0,l=i.length;n<l;++n){var c=i[n].split("=");switch(c[0]){case"to":for(var u=c[1].split(","),h=0,p=u.length;h<p;++h)a.push(u[h]);break;case"subject":r.subject=M(c[1],t);break;case"body":r.body=M(c[1],t);break;default:s=!0,o[M(c[0],t)]=M(c[1],t)}}s&&(r.headers=o)}r.query=void 0;for(var d=0,m=a.length;d<m;++d){var f=a[d].split("@");if(f[0]=M(f[0]),t.unicodeSupport)f[1]=M(f[1],t).toLowerCase();else try{f[1]=S(M(f[1],t).toLowerCase())}catch(e){r.error=r.error||"Email address's domain name can not be converted to ASCII via punycode: "+e}a[d]=f.join("@")}return r},serialize:function(e,t){var r,a=e,o=null!=(r=e.to)?r instanceof Array?r:"number"!=typeof r.length||r.split||r.setInterval||r.call?[r]:Array.prototype.slice.call(r):[];if(o){for(var i=0,n=o.length;i<n;++i){var l=String(o[i]),c=l.lastIndexOf("@"),u=l.slice(0,c).replace(re,ie).replace(re,s).replace(ae,T),h=l.slice(c+1);try{h=t.iri?x(h):S(M(h,t).toLowerCase())}catch(e){a.error=a.error||"Email address's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+e}o[i]=u+"@"+h}a.path=o.join(",")}var p=e.headers=e.headers||{};e.subject&&(p.subject=e.subject),e.body&&(p.body=e.body);var d=[];for(var m in p)p[m]!==G[m]&&d.push(m.replace(re,ie).replace(re,s).replace(se,T)+"="+p[m].replace(re,ie).replace(re,s).replace(oe,T));return d.length&&(a.query=d.join("&")),a}},le=/^([^\:]+)\:(.*)/,ce={scheme:"urn",parse:function(e,t){var r=e.path&&e.path.match(le),a=e;if(r){var s=t.scheme||a.scheme||"urn",o=r[1].toLowerCase(),i=r[2],n=s+":"+(t.nid||o),l=j[n];a.nid=o,a.nss=i,a.path=void 0,l&&(a=l.parse(a,t))}else a.error=a.error||"URN can not be parsed.";return a},serialize:function(e,t){var r=t.scheme||e.scheme||"urn",a=e.nid,s=r+":"+(t.nid||a),o=j[s];o&&(e=o.serialize(e,t));var i=e,n=e.nss;return i.path=(a||t.nid)+":"+n,i}},ue=/^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/,he={scheme:"urn:uuid",parse:function(e,t){var r=e;return r.uuid=r.nss,r.nss=void 0,t.tolerant||r.uuid&&r.uuid.match(ue)||(r.error=r.error||"UUID is not valid."),r},serialize:function(e,t){var r=e;return r.nss=(e.uuid||"").toLowerCase(),r}};j[H.scheme]=H,j[J.scheme]=J,j[B.scheme]=B,j[Z.scheme]=Z,j[ne.scheme]=ne,j[ce.scheme]=ce,j[he.scheme]=he,e.SCHEMES=j,e.pctEncChar=T,e.pctDecChars=F,e.parse=I,e.removeDotSegments=z,e.serialize=Q,e.resolveComponents=U,e.resolve=function(e,t,r){var a=function(e,t){var r=e;if(t)for(var a in t)r[a]=t[a];return r}({scheme:"null"},r);return Q(U(I(e,a),I(t,a),a,!0),a)},e.normalize=function(e,t){return"string"==typeof e?e=Q(I(e,t),t):"object"===a(e)&&(e=I(Q(e,t),t)),e},e.equal=function(e,t,r){return"string"==typeof e?e=Q(I(e,r),r):"object"===a(e)&&(e=Q(e,r)),"string"==typeof t?t=Q(I(t,r),r):"object"===a(t)&&(t=Q(t,r)),e===t},e.escapeComponent=function(e,t){return e&&e.toString().replace(t&&t.iri?n.ESCAPE:i.ESCAPE,T)},e.unescapeComponent=M,Object.defineProperty(e,"__esModule",{value:!0})}(t)},894:e=>{"use strict";e.exports=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#","description":"Meta-schema for $data reference (JSON Schema extension proposal)","type":"object","required":["$data"],"properties":{"$data":{"type":"string","anyOf":[{"format":"relative-json-pointer"},{"format":"json-pointer"}]}},"additionalProperties":false}')},6680:e=>{"use strict";e.exports=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$id":"http://json-schema.org/draft-07/schema#","title":"Core schema meta-schema","definitions":{"schemaArray":{"type":"array","minItems":1,"items":{"$ref":"#"}},"nonNegativeInteger":{"type":"integer","minimum":0},"nonNegativeIntegerDefault0":{"allOf":[{"$ref":"#/definitions/nonNegativeInteger"},{"default":0}]},"simpleTypes":{"enum":["array","boolean","integer","null","number","object","string"]},"stringArray":{"type":"array","items":{"type":"string"},"uniqueItems":true,"default":[]}},"type":["object","boolean"],"properties":{"$id":{"type":"string","format":"uri-reference"},"$schema":{"type":"string","format":"uri"},"$ref":{"type":"string","format":"uri-reference"},"$comment":{"type":"string"},"title":{"type":"string"},"description":{"type":"string"},"default":true,"readOnly":{"type":"boolean","default":false},"examples":{"type":"array","items":true},"multipleOf":{"type":"number","exclusiveMinimum":0},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"$ref":"#/definitions/nonNegativeInteger"},"minLength":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"pattern":{"type":"string","format":"regex"},"additionalItems":{"$ref":"#"},"items":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/schemaArray"}],"default":true},"maxItems":{"$ref":"#/definitions/nonNegativeInteger"},"minItems":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"uniqueItems":{"type":"boolean","default":false},"contains":{"$ref":"#"},"maxProperties":{"$ref":"#/definitions/nonNegativeInteger"},"minProperties":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"required":{"$ref":"#/definitions/stringArray"},"additionalProperties":{"$ref":"#"},"definitions":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"properties":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"patternProperties":{"type":"object","additionalProperties":{"$ref":"#"},"propertyNames":{"format":"regex"},"default":{}},"dependencies":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/stringArray"}]}},"propertyNames":{"$ref":"#"},"const":true,"enum":{"type":"array","items":true,"minItems":1,"uniqueItems":true},"type":{"anyOf":[{"$ref":"#/definitions/simpleTypes"},{"type":"array","items":{"$ref":"#/definitions/simpleTypes"},"minItems":1,"uniqueItems":true}]},"format":{"type":"string"},"contentMediaType":{"type":"string"},"contentEncoding":{"type":"string"},"if":{"$ref":"#"},"then":{"$ref":"#"},"else":{"$ref":"#"},"allOf":{"$ref":"#/definitions/schemaArray"},"anyOf":{"$ref":"#/definitions/schemaArray"},"oneOf":{"$ref":"#/definitions/schemaArray"},"not":{"$ref":"#"}},"default":true}')}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var r=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(r.exports,r,r.exports,__webpack_require__),r.exports}var __webpack_exports__=__webpack_require__(4973)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
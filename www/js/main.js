/*! For license information please see main.js.LICENSE.txt */
(()=>{var __webpack_modules__={5096:(e,t,r)=>{"use strict";var a=r(7153),s=r(3610),o=r(7531),n=r(4022),i=r(5035),l=r(1516),u=r(7753),c=r(3978),h=r(2889);e.exports=y,y.prototype.validate=function(e,t){var r;if("string"==typeof e){if(!(r=this.getSchema(e)))throw new Error('no schema with key or ref "'+e+'"')}else{var a=this._addSchema(e);r=a.validate||this._compile(a)}var s=r(t);return!0!==r.$async&&(this.errors=r.errors),s},y.prototype.compile=function(e,t){var r=this._addSchema(e,void 0,t);return r.validate||this._compile(r)},y.prototype.addSchema=function(e,t,r,a){if(Array.isArray(e)){for(var o=0;o<e.length;o++)this.addSchema(e[o],void 0,r,a);return this}var n=this._getId(e);if(void 0!==n&&"string"!=typeof n)throw new Error("schema id must be string");return _(this,t=s.normalizeId(t||n)),this._schemas[t]=this._addSchema(e,r,a,!0),this},y.prototype.addMetaSchema=function(e,t,r){return this.addSchema(e,t,r,!0),this},y.prototype.validateSchema=function(e,t){var r,a,s=e.$schema;if(void 0!==s&&"string"!=typeof s)throw new Error("$schema must be a string");if(!(s=s||this._opts.defaultMeta||(r=this,a=r._opts.meta,r._opts.defaultMeta="object"==typeof a?r._getId(a)||a:r.getSchema(m)?m:void 0,r._opts.defaultMeta)))return this.logger.warn("meta-schema not available"),this.errors=null,!0;var o=this.validate(s,e);if(!o&&t){var n="schema is invalid: "+this.errorsText();if("log"!=this._opts.validateSchema)throw new Error(n);this.logger.error(n)}return o},y.prototype.getSchema=function(e){var t=g(this,e);switch(typeof t){case"object":return t.validate||this._compile(t);case"string":return this.getSchema(t);case"undefined":return function(e,t){var r=s.schema.call(e,{schema:{}},t);if(r){var o=r.schema,i=r.root,l=r.baseId,u=a.call(e,o,i,void 0,l);return e._fragments[t]=new n({ref:t,fragment:!0,schema:o,root:i,baseId:l,validate:u}),u}}(this,e)}},y.prototype.removeSchema=function(e){if(e instanceof RegExp)return P(this,this._schemas,e),P(this,this._refs,e),this;switch(typeof e){case"undefined":return P(this,this._schemas),P(this,this._refs),this._cache.clear(),this;case"string":var t=g(this,e);return t&&this._cache.del(t.cacheKey),delete this._schemas[e],delete this._refs[e],this;case"object":var r=this._opts.serialize,a=r?r(e):e;this._cache.del(a);var o=this._getId(e);o&&(o=s.normalizeId(o),delete this._schemas[o],delete this._refs[o])}return this},y.prototype.addFormat=function(e,t){return"string"==typeof t&&(t=new RegExp(t)),this._formats[e]=t,this},y.prototype.errorsText=function(e,t){if(!(e=e||this.errors))return"No errors";for(var r=void 0===(t=t||{}).separator?", ":t.separator,a=void 0===t.dataVar?"data":t.dataVar,s="",o=0;o<e.length;o++){var n=e[o];n&&(s+=a+n.dataPath+" "+n.message+r)}return s.slice(0,-r.length)},y.prototype._addSchema=function(e,t,r,a){if("object"!=typeof e&&"boolean"!=typeof e)throw new Error("schema should be object or boolean");var o=this._opts.serialize,i=o?o(e):e,l=this._cache.get(i);if(l)return l;a=a||!1!==this._opts.addUsedSchema;var u=s.normalizeId(this._getId(e));u&&a&&_(this,u);var c,h=!1!==this._opts.validateSchema&&!t;h&&!(c=u&&u==s.normalizeId(e.$schema))&&this.validateSchema(e,!0);var d=s.ids.call(this,e),p=new n({id:u,schema:e,localRefs:d,cacheKey:i,meta:r});return"#"!=u[0]&&a&&(this._refs[u]=p),this._cache.put(i,p),h&&c&&this.validateSchema(e,!0),p},y.prototype._compile=function(e,t){if(e.compiling)return e.validate=o,o.schema=e.schema,o.errors=null,o.root=t||o,!0===e.schema.$async&&(o.$async=!0),o;var r,s;e.compiling=!0,e.meta&&(r=this._opts,this._opts=this._metaOpts);try{s=a.call(this,e.schema,t,e.localRefs)}catch(t){throw delete e.validate,t}finally{e.compiling=!1,e.meta&&(this._opts=r)}return e.validate=s,e.refs=s.refs,e.refVal=s.refVal,e.root=s.root,s;function o(){var t=e.validate,r=t.apply(this,arguments);return o.errors=t.errors,r}},y.prototype.compileAsync=r(2931);var d=r(4895);y.prototype.addKeyword=d.add,y.prototype.getKeyword=d.get,y.prototype.removeKeyword=d.remove,y.prototype.validateKeyword=d.validate;var p=r(7802);y.ValidationError=p.Validation,y.MissingRefError=p.MissingRef,y.$dataMetaSchema=c;var m="http://json-schema.org/draft-07/schema",f=["removeAdditional","useDefaults","coerceTypes","strictDefaults"],v=["/properties"];function y(e){if(!(this instanceof y))return new y(e);e=this._opts=h.copy(e)||{},function(e){var t=e._opts.logger;if(!1===t)e.logger={log:S,warn:S,error:S};else{if(void 0===t&&(t=console),!("object"==typeof t&&t.log&&t.warn&&t.error))throw new Error("logger must implement log, warn and error methods");e.logger=t}}(this),this._schemas={},this._refs={},this._fragments={},this._formats=l(e.format),this._cache=e.cache||new o,this._loadingSchemas={},this._compilations=[],this.RULES=u(),this._getId=function(e){switch(e.schemaId){case"auto":return w;case"id":return b;default:return E}}(e),e.loopRequired=e.loopRequired||1/0,"property"==e.errorDataPath&&(e._errorDataPathProperty=!0),void 0===e.serialize&&(e.serialize=i),this._metaOpts=function(e){for(var t=h.copy(e._opts),r=0;r<f.length;r++)delete t[f[r]];return t}(this),e.formats&&function(e){for(var t in e._opts.formats){var r=e._opts.formats[t];e.addFormat(t,r)}}(this),e.keywords&&function(e){for(var t in e._opts.keywords){var r=e._opts.keywords[t];e.addKeyword(t,r)}}(this),function(e){var t;if(e._opts.$data&&(t=r(894),e.addMetaSchema(t,t.$id,!0)),!1!==e._opts.meta){var a=r(6680);e._opts.$data&&(a=c(a,v)),e.addMetaSchema(a,m,!0),e._refs["http://json-schema.org/schema"]=m}}(this),"object"==typeof e.meta&&this.addMetaSchema(e.meta),e.nullable&&this.addKeyword("nullable",{metaSchema:{type:"boolean"}}),function(e){var t=e._opts.schemas;if(t)if(Array.isArray(t))e.addSchema(t);else for(var r in t)e.addSchema(t[r],r)}(this)}function g(e,t){return t=s.normalizeId(t),e._schemas[t]||e._refs[t]||e._fragments[t]}function P(e,t,r){for(var a in t){var s=t[a];s.meta||r&&!r.test(a)||(e._cache.del(s.cacheKey),delete t[a])}}function b(e){return e.$id&&this.logger.warn("schema $id ignored",e.$id),e.id}function E(e){return e.id&&this.logger.warn("schema id ignored",e.id),e.$id}function w(e){if(e.$id&&e.id&&e.$id!=e.id)throw new Error("schema $id is different from id");return e.$id||e.id}function _(e,t){if(e._schemas[t]||e._refs[t])throw new Error('schema with key or id "'+t+'" already exists')}function S(){}},7531:e=>{"use strict";var t=e.exports=function(){this._cache={}};t.prototype.put=function(e,t){this._cache[e]=t},t.prototype.get=function(e){return this._cache[e]},t.prototype.del=function(e){delete this._cache[e]},t.prototype.clear=function(){this._cache={}}},2931:(e,t,r)=>{"use strict";var a=r(7802).MissingRef;e.exports=function e(t,r,s){var o=this;if("function"!=typeof this._opts.loadSchema)throw new Error("options.loadSchema should be a function");"function"==typeof r&&(s=r,r=void 0);var n=i(t).then((function(){var e=o._addSchema(t,void 0,r);return e.validate||l(e)}));return s&&n.then((function(e){s(null,e)}),s),n;function i(t){var r=t.$schema;return r&&!o.getSchema(r)?e.call(o,{$ref:r},!0):Promise.resolve()}function l(e){try{return o._compile(e)}catch(t){if(t instanceof a)return function(t){var a=t.missingSchema;if(u(a))throw new Error("Schema "+a+" is loaded but "+t.missingRef+" cannot be resolved");var s=o._loadingSchemas[a];return s||(s=o._loadingSchemas[a]=o._opts.loadSchema(a)).then(n,n),s.then((function(e){if(!u(a))return i(e).then((function(){u(a)||o.addSchema(e,a,void 0,r)}))})).then((function(){return l(e)}));function n(){delete o._loadingSchemas[a]}function u(e){return o._refs[e]||o._schemas[e]}}(t);throw t}}}},7802:(e,t,r)=>{"use strict";var a=r(3610);function s(e,t,r){this.message=r||s.message(e,t),this.missingRef=a.url(e,t),this.missingSchema=a.normalizeId(a.fullPath(this.missingRef))}function o(e){return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}e.exports={Validation:o((function(e){this.message="validation failed",this.errors=e,this.ajv=this.validation=!0})),MissingRef:o(s)},s.message=function(e,t){return"can't resolve reference "+t+" from id "+e}},1516:(e,t,r)=>{"use strict";var a=r(2889),s=/^(\d\d\d\d)-(\d\d)-(\d\d)$/,o=[0,31,28,31,30,31,30,31,31,30,31,30,31],n=/^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i,i=/^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i,l=/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,u=/^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i,c=/^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i,h=/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,d=/^(?:\/(?:[^~/]|~0|~1)*)*$/,p=/^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,m=/^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;function f(e){return e="full"==e?"full":"fast",a.copy(f[e])}function v(e){var t=e.match(s);if(!t)return!1;var r=+t[1],a=+t[2],n=+t[3];return a>=1&&a<=12&&n>=1&&n<=(2==a&&function(e){return e%4==0&&(e%100!=0||e%400==0)}(r)?29:o[a])}function y(e,t){var r=e.match(n);if(!r)return!1;var a=r[1],s=r[2],o=r[3],i=r[5];return(a<=23&&s<=59&&o<=59||23==a&&59==s&&60==o)&&(!t||i)}e.exports=f,f.fast={date:/^\d\d\d\d-[0-1]\d-[0-3]\d$/,time:/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,"date-time":/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,uri:/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,"uri-reference":/^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,"uri-template":u,url:c,email:/^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,hostname:i,ipv4:/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,ipv6:/^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,regex:E,uuid:h,"json-pointer":d,"json-pointer-uri-fragment":p,"relative-json-pointer":m},f.full={date:v,time:y,"date-time":function(e){var t=e.split(g);return 2==t.length&&v(t[0])&&y(t[1],!0)},uri:function(e){return P.test(e)&&l.test(e)},"uri-reference":/^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,"uri-template":u,url:c,email:/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,hostname:i,ipv4:/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,ipv6:/^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,regex:E,uuid:h,"json-pointer":d,"json-pointer-uri-fragment":p,"relative-json-pointer":m};var g=/t|\s/i,P=/\/|:/,b=/[^\\]\\Z/;function E(e){if(b.test(e))return!1;try{return new RegExp(e),!0}catch(e){return!1}}},7153:(e,t,r)=>{"use strict";var a=r(3610),s=r(2889),o=r(7802),n=r(5035),i=r(9508),l=s.ucs2length,u=r(4063),c=o.Validation;function h(e,t,r){var a=p.call(this,e,t,r);return a>=0?{index:a,compiling:!0}:(a=this._compilations.length,this._compilations[a]={schema:e,root:t,baseId:r},{index:a,compiling:!1})}function d(e,t,r){var a=p.call(this,e,t,r);a>=0&&this._compilations.splice(a,1)}function p(e,t,r){for(var a=0;a<this._compilations.length;a++){var s=this._compilations[a];if(s.schema==e&&s.root==t&&s.baseId==r)return a}return-1}function m(e,t){return"var pattern"+e+" = new RegExp("+s.toQuotedString(t[e])+");"}function f(e){return"var default"+e+" = defaults["+e+"];"}function v(e,t){return void 0===t[e]?"":"var refVal"+e+" = refVal["+e+"];"}function y(e){return"var customRule"+e+" = customRules["+e+"];"}function g(e,t){if(!e.length)return"";for(var r="",a=0;a<e.length;a++)r+=t(a,e);return r}e.exports=function e(t,r,p,P){var b=this,E=this._opts,w=[void 0],_={},S=[],x={},j=[],T={},$=[];r=r||{schema:t,refVal:w,refs:_};var F=h.call(this,t,r,P),D=this._compilations[F.index];if(F.compiling)return D.callValidate=function e(){var t=D.validate,r=t.apply(this,arguments);return e.errors=t.errors,r};var O=this._formats,R=this.RULES;try{var k=I(t,r,p,P);D.validate=k;var C=D.callValidate;return C&&(C.schema=k.schema,C.errors=null,C.refs=k.refs,C.refVal=k.refVal,C.root=k.root,C.$async=k.$async,E.sourceCode&&(C.source=k.source)),k}finally{d.call(this,t,r,P)}function I(t,n,h,d){var p=!n||n&&n.schema==t;if(n.schema!=r.schema)return e.call(b,t,n,h,d);var P,x=!0===t.$async,T=i({isTop:!0,schema:t,isRoot:p,baseId:d,root:n,schemaPath:"",errSchemaPath:"#",errorPath:'""',MissingRefError:o.MissingRef,RULES:R,validate:i,util:s,resolve:a,resolveRef:A,usePattern:N,useDefault:q,useCustomRule:z,opts:E,formats:O,logger:b.logger,self:b});T=g(w,v)+g(S,m)+g(j,f)+g($,y)+T,E.processCode&&(T=E.processCode(T,t));try{P=new Function("self","RULES","formats","root","refVal","defaults","customRules","equal","ucs2length","ValidationError",T)(b,R,O,r,w,j,$,u,l,c),w[0]=P}catch(e){throw b.logger.error("Error compiling schema, function code:",T),e}return P.schema=t,P.errors=null,P.refs=_,P.refVal=w,P.root=p?P:n,x&&(P.$async=!0),!0===E.sourceCode&&(P.source={code:T,patterns:S,defaults:j}),P}function A(t,s,o){s=a.url(t,s);var n,i,l=_[s];if(void 0!==l)return V(n=w[l],i="refVal["+l+"]");if(!o&&r.refs){var u=r.refs[s];if(void 0!==u)return V(n=r.refVal[u],i=L(s,n))}i=L(s);var c=a.call(b,I,r,s);if(void 0===c){var h=p&&p[s];h&&(c=a.inlineRef(h,E.inlineRefs)?h:e.call(b,h,r,p,t))}if(void 0!==c)return function(e,t){var r=_[e];w[r]=t}(s,c),V(c,i);!function(e){delete _[e]}(s)}function L(e,t){var r=w.length;return w[r]=t,_[e]=r,"refVal"+r}function V(e,t){return"object"==typeof e||"boolean"==typeof e?{code:t,schema:e,inline:!0}:{code:t,$async:e&&!!e.$async}}function N(e){var t=x[e];return void 0===t&&(t=x[e]=S.length,S[t]=e),"pattern"+t}function q(e){switch(typeof e){case"boolean":case"number":return""+e;case"string":return s.toQuotedString(e);case"object":if(null===e)return"null";var t=n(e),r=T[t];return void 0===r&&(r=T[t]=j.length,j[r]=e),"default"+r}}function z(e,t,r,a){if(!1!==b._opts.validateSchema){var s=e.definition.dependencies;if(s&&!s.every((function(e){return Object.prototype.hasOwnProperty.call(r,e)})))throw new Error("parent schema must have all required keywords: "+s.join(","));var o=e.definition.validateSchema;if(o&&!o(t)){var n="keyword schema is invalid: "+b.errorsText(o.errors);if("log"!=b._opts.validateSchema)throw new Error(n);b.logger.error(n)}}var i,l=e.definition.compile,u=e.definition.inline,c=e.definition.macro;if(l)i=l.call(b,t,r,a);else if(c)i=c.call(b,t,r,a),!1!==E.validateSchema&&b.validateSchema(i,!0);else if(u)i=u.call(b,a,e.keyword,t,r);else if(!(i=e.definition.validate))return;if(void 0===i)throw new Error('custom keyword "'+e.keyword+'"failed to compile');var h=$.length;return $[h]=i,{code:"customRule"+h,validate:i}}}},3610:(e,t,r)=>{"use strict";var a=r(540),s=r(4063),o=r(2889),n=r(4022),i=r(9461);function l(e,t,r){var a=this._refs[r];if("string"==typeof a){if(!this._refs[a])return l.call(this,e,t,a);a=this._refs[a]}if((a=a||this._schemas[r])instanceof n)return m(a.schema,this._opts.inlineRefs)?a.schema:a.validate||this._compile(a);var s,o,i,c=u.call(this,t,r);return c&&(s=c.schema,t=c.root,i=c.baseId),s instanceof n?o=s.validate||e.call(this,s.schema,t,void 0,i):void 0!==s&&(o=m(s,this._opts.inlineRefs)?s:e.call(this,s,t,void 0,i)),o}function u(e,t){var r=a.parse(t),s=g(r),o=y(this._getId(e.schema));if(0===Object.keys(e.schema).length||s!==o){var i=b(s),l=this._refs[i];if("string"==typeof l)return c.call(this,e,l,r);if(l instanceof n)l.validate||this._compile(l),e=l;else{if(!((l=this._schemas[i])instanceof n))return;if(l.validate||this._compile(l),i==b(t))return{schema:l,root:e,baseId:o};e=l}if(!e.schema)return;o=y(this._getId(e.schema))}return d.call(this,r,o,e.schema,e)}function c(e,t,r){var a=u.call(this,e,t);if(a){var s=a.schema,o=a.baseId;e=a.root;var n=this._getId(s);return n&&(o=E(o,n)),d.call(this,r,o,s,e)}}e.exports=l,l.normalizeId=b,l.fullPath=y,l.url=E,l.ids=function(e){var t=b(this._getId(e)),r={"":t},n={"":y(t,!1)},l={},u=this;return i(e,{allKeys:!0},(function(e,t,i,c,h,d,p){if(""!==t){var m=u._getId(e),f=r[c],v=n[c]+"/"+h;if(void 0!==p&&(v+="/"+("number"==typeof p?p:o.escapeFragment(p))),"string"==typeof m){m=f=b(f?a.resolve(f,m):m);var y=u._refs[m];if("string"==typeof y&&(y=u._refs[y]),y&&y.schema){if(!s(e,y.schema))throw new Error('id "'+m+'" resolves to more than one schema')}else if(m!=b(v))if("#"==m[0]){if(l[m]&&!s(e,l[m]))throw new Error('id "'+m+'" resolves to more than one schema');l[m]=e}else u._refs[m]=v}r[t]=f,n[t]=v}})),l},l.inlineRef=m,l.schema=u;var h=o.toHash(["properties","patternProperties","enum","dependencies","definitions"]);function d(e,t,r,a){if(e.fragment=e.fragment||"","/"==e.fragment.slice(0,1)){for(var s=e.fragment.split("/"),n=1;n<s.length;n++){var i=s[n];if(i){if(void 0===(r=r[i=o.unescapeFragment(i)]))break;var l;if(!h[i]&&((l=this._getId(r))&&(t=E(t,l)),r.$ref)){var c=E(t,r.$ref),d=u.call(this,a,c);d&&(r=d.schema,a=d.root,t=d.baseId)}}}return void 0!==r&&r!==a.schema?{schema:r,root:a,baseId:t}:void 0}}var p=o.toHash(["type","format","pattern","maxLength","minLength","maxProperties","minProperties","maxItems","minItems","maximum","minimum","uniqueItems","multipleOf","required","enum"]);function m(e,t){return!1!==t&&(void 0===t||!0===t?f(e):t?v(e)<=t:void 0)}function f(e){var t;if(Array.isArray(e)){for(var r=0;r<e.length;r++)if("object"==typeof(t=e[r])&&!f(t))return!1}else for(var a in e){if("$ref"==a)return!1;if("object"==typeof(t=e[a])&&!f(t))return!1}return!0}function v(e){var t,r=0;if(Array.isArray(e)){for(var a=0;a<e.length;a++)if("object"==typeof(t=e[a])&&(r+=v(t)),r==1/0)return 1/0}else for(var s in e){if("$ref"==s)return 1/0;if(p[s])r++;else if("object"==typeof(t=e[s])&&(r+=v(t)+1),r==1/0)return 1/0}return r}function y(e,t){return!1!==t&&(e=b(e)),g(a.parse(e))}function g(e){return a.serialize(e).split("#")[0]+"#"}var P=/#\/?$/;function b(e){return e?e.replace(P,""):""}function E(e,t){return t=b(t),a.resolve(e,t)}},7753:(e,t,r)=>{"use strict";var a=r(6674),s=r(2889).toHash;e.exports=function(){var e=[{type:"number",rules:[{maximum:["exclusiveMaximum"]},{minimum:["exclusiveMinimum"]},"multipleOf","format"]},{type:"string",rules:["maxLength","minLength","pattern","format"]},{type:"array",rules:["maxItems","minItems","items","contains","uniqueItems"]},{type:"object",rules:["maxProperties","minProperties","required","dependencies","propertyNames",{properties:["additionalProperties","patternProperties"]}]},{rules:["$ref","const","enum","not","anyOf","oneOf","allOf","if"]}],t=["type","$comment"];return e.all=s(t),e.types=s(["number","integer","string","array","object","boolean","null"]),e.forEach((function(r){r.rules=r.rules.map((function(r){var s;if("object"==typeof r){var o=Object.keys(r)[0];s=r[o],r=o,s.forEach((function(r){t.push(r),e.all[r]=!0}))}return t.push(r),e.all[r]={keyword:r,code:a[r],implements:s}})),e.all.$comment={keyword:"$comment",code:a.$comment},r.type&&(e.types[r.type]=r)})),e.keywords=s(t.concat(["$schema","$id","id","$data","$async","title","description","default","definitions","examples","readOnly","writeOnly","contentMediaType","contentEncoding","additionalItems","then","else"])),e.custom={},e}},4022:(e,t,r)=>{"use strict";var a=r(2889);e.exports=function(e){a.copy(e,this)}},4442:e=>{"use strict";e.exports=function(e){for(var t,r=0,a=e.length,s=0;s<a;)r++,(t=e.charCodeAt(s++))>=55296&&t<=56319&&s<a&&56320==(64512&(t=e.charCodeAt(s)))&&s++;return r}},2889:(e,t,r)=>{"use strict";function a(e,t,r,a){var s=a?" !== ":" === ",o=a?" || ":" && ",n=a?"!":"",i=a?"":"!";switch(e){case"null":return t+s+"null";case"array":return n+"Array.isArray("+t+")";case"object":return"("+n+t+o+"typeof "+t+s+'"object"'+o+i+"Array.isArray("+t+"))";case"integer":return"(typeof "+t+s+'"number"'+o+i+"("+t+" % 1)"+o+t+s+t+(r?o+n+"isFinite("+t+")":"")+")";case"number":return"(typeof "+t+s+'"'+e+'"'+(r?o+n+"isFinite("+t+")":"")+")";default:return"typeof "+t+s+'"'+e+'"'}}e.exports={copy:function(e,t){for(var r in t=t||{},e)t[r]=e[r];return t},checkDataType:a,checkDataTypes:function(e,t,r){if(1===e.length)return a(e[0],t,r,!0);var s="",n=o(e);for(var i in n.array&&n.object&&(s=n.null?"(":"(!"+t+" || ",s+="typeof "+t+' !== "object")',delete n.null,delete n.array,delete n.object),n.number&&delete n.integer,n)s+=(s?" && ":"")+a(i,t,r,!0);return s},coerceToTypes:function(e,t){if(Array.isArray(t)){for(var r=[],a=0;a<t.length;a++){var o=t[a];(s[o]||"array"===e&&"array"===o)&&(r[r.length]=o)}if(r.length)return r}else{if(s[t])return[t];if("array"===e&&"array"===t)return["array"]}},toHash:o,getProperty:l,escapeQuotes:u,equal:r(4063),ucs2length:r(4442),varOccurences:function(e,t){t+="[^0-9]";var r=e.match(new RegExp(t,"g"));return r?r.length:0},varReplace:function(e,t,r){return t+="([^0-9])",r=r.replace(/\$/g,"$$$$"),e.replace(new RegExp(t,"g"),r+"$1")},schemaHasRules:function(e,t){if("boolean"==typeof e)return!e;for(var r in e)if(t[r])return!0},schemaHasRulesExcept:function(e,t,r){if("boolean"==typeof e)return!e&&"not"!=r;for(var a in e)if(a!=r&&t[a])return!0},schemaUnknownRules:function(e,t){if("boolean"!=typeof e)for(var r in e)if(!t[r])return r},toQuotedString:c,getPathExpr:function(e,t,r,a){return p(e,r?"'/' + "+t+(a?"":".replace(/~/g, '~0').replace(/\\//g, '~1')"):a?"'[' + "+t+" + ']'":"'[\\'' + "+t+" + '\\']'")},getPath:function(e,t,r){return p(e,c(r?"/"+m(t):l(t)))},getData:function(e,t,r){var a,s,o,n;if(""===e)return"rootData";if("/"==e[0]){if(!h.test(e))throw new Error("Invalid JSON-pointer: "+e);s=e,o="rootData"}else{if(!(n=e.match(d)))throw new Error("Invalid JSON-pointer: "+e);if(a=+n[1],"#"==(s=n[2])){if(a>=t)throw new Error("Cannot access property/index "+a+" levels up, current level is "+t);return r[t-a]}if(a>t)throw new Error("Cannot access data "+a+" levels up, current level is "+t);if(o="data"+(t-a||""),!s)return o}for(var i=o,u=s.split("/"),c=0;c<u.length;c++){var p=u[c];p&&(i+=" && "+(o+=l(f(p))))}return i},unescapeFragment:function(e){return f(decodeURIComponent(e))},unescapeJsonPointer:f,escapeFragment:function(e){return encodeURIComponent(m(e))},escapeJsonPointer:m};var s=o(["string","number","integer","boolean","null"]);function o(e){for(var t={},r=0;r<e.length;r++)t[e[r]]=!0;return t}var n=/^[a-z$_][a-z$_0-9]*$/i,i=/'|\\/g;function l(e){return"number"==typeof e?"["+e+"]":n.test(e)?"."+e:"['"+u(e)+"']"}function u(e){return e.replace(i,"\\$&").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\f/g,"\\f").replace(/\t/g,"\\t")}function c(e){return"'"+u(e)+"'"}var h=/^\/(?:[^~]|~0|~1)*$/,d=/^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;function p(e,t){return'""'==e?t:(e+" + "+t).replace(/([^\\])' \+ '/g,"$1")}function m(e){return e.replace(/~/g,"~0").replace(/\//g,"~1")}function f(e){return e.replace(/~1/g,"/").replace(/~0/g,"~")}},3978:e=>{"use strict";var t=["multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxLength","minLength","pattern","additionalItems","maxItems","minItems","uniqueItems","maxProperties","minProperties","required","additionalProperties","enum","format","const"];e.exports=function(e,r){for(var a=0;a<r.length;a++){e=JSON.parse(JSON.stringify(e));var s,o=r[a].split("/"),n=e;for(s=1;s<o.length;s++)n=n[o[s]];for(s=0;s<t.length;s++){var i=t[s],l=n[i];l&&(n[i]={anyOf:[l,{$ref:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"}]})}}return e}},1128:(e,t,r)=>{"use strict";var a=r(6680);e.exports={$id:"https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js",definitions:{simpleTypes:a.definitions.simpleTypes},type:"object",dependencies:{schema:["validate"],$data:["validate"],statements:["inline"],valid:{not:{required:["macro"]}}},properties:{type:a.properties.type,schema:{type:"boolean"},statements:{type:"boolean"},dependencies:{type:"array",items:{type:"string"}},metaSchema:{type:"object"},modifying:{type:"boolean"},valid:{type:"boolean"},$data:{type:"boolean"},async:{type:"boolean"},errors:{anyOf:[{type:"boolean"},{const:"full"}]}}}},8210:e=>{"use strict";e.exports=function(e,t,r){var a,s=" ",o=e.level,n=e.dataLevel,i=e.schema[t],l=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,h="data"+(n||""),d=e.opts.$data&&i&&i.$data;d?(s+=" var schema"+o+" = "+e.util.getData(i.$data,n,e.dataPathArr)+"; ",a="schema"+o):a=i;var p="maximum"==t,m=p?"exclusiveMaximum":"exclusiveMinimum",f=e.schema[m],v=e.opts.$data&&f&&f.$data,y=p?"<":">",g=p?">":"<",P=void 0;if(!d&&"number"!=typeof i&&void 0!==i)throw new Error(t+" must be number");if(!v&&void 0!==f&&"number"!=typeof f&&"boolean"!=typeof f)throw new Error(m+" must be number or boolean");if(v){var b,E=e.util.getData(f.$data,n,e.dataPathArr),w="exclusive"+o,_="exclType"+o,S="exclIsNumber"+o,x="' + "+(T="op"+o)+" + '";s+=" var schemaExcl"+o+" = "+E+"; ",s+=" var "+w+"; var "+_+" = typeof "+(E="schemaExcl"+o)+"; if ("+_+" != 'boolean' && "+_+" != 'undefined' && "+_+" != 'number') { ",P=m,(b=b||[]).push(s),s="",!1!==e.createErrors?(s+=" { keyword: '"+(P||"_exclusiveLimit")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: {} ",!1!==e.opts.messages&&(s+=" , message: '"+m+" should be boolean' "),e.opts.verbose&&(s+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),s+=" } "):s+=" {} ";var j=s;s=b.pop(),!e.compositeRule&&c?e.async?s+=" throw new ValidationError(["+j+"]); ":s+=" validate.errors = ["+j+"]; return false; ":s+=" var err = "+j+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s+=" } else if ( ",d&&(s+=" ("+a+" !== undefined && typeof "+a+" != 'number') || "),s+=" "+_+" == 'number' ? ( ("+w+" = "+a+" === undefined || "+E+" "+y+"= "+a+") ? "+h+" "+g+"= "+E+" : "+h+" "+g+" "+a+" ) : ( ("+w+" = "+E+" === true) ? "+h+" "+g+"= "+a+" : "+h+" "+g+" "+a+" ) || "+h+" !== "+h+") { var op"+o+" = "+w+" ? '"+y+"' : '"+y+"='; ",void 0===i&&(P=m,u=e.errSchemaPath+"/"+m,a=E,d=v)}else if(x=y,(S="number"==typeof f)&&d){var T="'"+x+"'";s+=" if ( ",d&&(s+=" ("+a+" !== undefined && typeof "+a+" != 'number') || "),s+=" ( "+a+" === undefined || "+f+" "+y+"= "+a+" ? "+h+" "+g+"= "+f+" : "+h+" "+g+" "+a+" ) || "+h+" !== "+h+") { "}else S&&void 0===i?(w=!0,P=m,u=e.errSchemaPath+"/"+m,a=f,g+="="):(S&&(a=Math[p?"min":"max"](f,i)),f===(!S||a)?(w=!0,P=m,u=e.errSchemaPath+"/"+m,g+="="):(w=!1,x+="=")),T="'"+x+"'",s+=" if ( ",d&&(s+=" ("+a+" !== undefined && typeof "+a+" != 'number') || "),s+=" "+h+" "+g+" "+a+" || "+h+" !== "+h+") { ";return P=P||t,(b=b||[]).push(s),s="",!1!==e.createErrors?(s+=" { keyword: '"+(P||"_limit")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { comparison: "+T+", limit: "+a+", exclusive: "+w+" } ",!1!==e.opts.messages&&(s+=" , message: 'should be "+x+" ",s+=d?"' + "+a:a+"'"),e.opts.verbose&&(s+=" , schema:  ",s+=d?"validate.schema"+l:""+i,s+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),s+=" } "):s+=" {} ",j=s,s=b.pop(),!e.compositeRule&&c?e.async?s+=" throw new ValidationError(["+j+"]); ":s+=" validate.errors = ["+j+"]; return false; ":s+=" var err = "+j+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s+=" } ",c&&(s+=" else { "),s}},3038:e=>{"use strict";e.exports=function(e,t,r){var a,s=" ",o=e.level,n=e.dataLevel,i=e.schema[t],l=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,h="data"+(n||""),d=e.opts.$data&&i&&i.$data;if(d?(s+=" var schema"+o+" = "+e.util.getData(i.$data,n,e.dataPathArr)+"; ",a="schema"+o):a=i,!d&&"number"!=typeof i)throw new Error(t+" must be number");s+="if ( ",d&&(s+=" ("+a+" !== undefined && typeof "+a+" != 'number') || "),s+=" "+h+".length "+("maxItems"==t?">":"<")+" "+a+") { ";var p=t,m=m||[];m.push(s),s="",!1!==e.createErrors?(s+=" { keyword: '"+(p||"_limitItems")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { limit: "+a+" } ",!1!==e.opts.messages&&(s+=" , message: 'should NOT have ",s+="maxItems"==t?"more":"fewer",s+=" than ",s+=d?"' + "+a+" + '":""+i,s+=" items' "),e.opts.verbose&&(s+=" , schema:  ",s+=d?"validate.schema"+l:""+i,s+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),s+=" } "):s+=" {} ";var f=s;return s=m.pop(),!e.compositeRule&&c?e.async?s+=" throw new ValidationError(["+f+"]); ":s+=" validate.errors = ["+f+"]; return false; ":s+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s+="} ",c&&(s+=" else { "),s}},425:e=>{"use strict";e.exports=function(e,t,r){var a,s=" ",o=e.level,n=e.dataLevel,i=e.schema[t],l=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,h="data"+(n||""),d=e.opts.$data&&i&&i.$data;if(d?(s+=" var schema"+o+" = "+e.util.getData(i.$data,n,e.dataPathArr)+"; ",a="schema"+o):a=i,!d&&"number"!=typeof i)throw new Error(t+" must be number");var p="maxLength"==t?">":"<";s+="if ( ",d&&(s+=" ("+a+" !== undefined && typeof "+a+" != 'number') || "),!1===e.opts.unicode?s+=" "+h+".length ":s+=" ucs2length("+h+") ",s+=" "+p+" "+a+") { ";var m=t,f=f||[];f.push(s),s="",!1!==e.createErrors?(s+=" { keyword: '"+(m||"_limitLength")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { limit: "+a+" } ",!1!==e.opts.messages&&(s+=" , message: 'should NOT be ",s+="maxLength"==t?"longer":"shorter",s+=" than ",s+=d?"' + "+a+" + '":""+i,s+=" characters' "),e.opts.verbose&&(s+=" , schema:  ",s+=d?"validate.schema"+l:""+i,s+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),s+=" } "):s+=" {} ";var v=s;return s=f.pop(),!e.compositeRule&&c?e.async?s+=" throw new ValidationError(["+v+"]); ":s+=" validate.errors = ["+v+"]; return false; ":s+=" var err = "+v+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s+="} ",c&&(s+=" else { "),s}},8204:e=>{"use strict";e.exports=function(e,t,r){var a,s=" ",o=e.level,n=e.dataLevel,i=e.schema[t],l=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,h="data"+(n||""),d=e.opts.$data&&i&&i.$data;if(d?(s+=" var schema"+o+" = "+e.util.getData(i.$data,n,e.dataPathArr)+"; ",a="schema"+o):a=i,!d&&"number"!=typeof i)throw new Error(t+" must be number");s+="if ( ",d&&(s+=" ("+a+" !== undefined && typeof "+a+" != 'number') || "),s+=" Object.keys("+h+").length "+("maxProperties"==t?">":"<")+" "+a+") { ";var p=t,m=m||[];m.push(s),s="",!1!==e.createErrors?(s+=" { keyword: '"+(p||"_limitProperties")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { limit: "+a+" } ",!1!==e.opts.messages&&(s+=" , message: 'should NOT have ",s+="maxProperties"==t?"more":"fewer",s+=" than ",s+=d?"' + "+a+" + '":""+i,s+=" properties' "),e.opts.verbose&&(s+=" , schema:  ",s+=d?"validate.schema"+l:""+i,s+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),s+=" } "):s+=" {} ";var f=s;return s=m.pop(),!e.compositeRule&&c?e.async?s+=" throw new ValidationError(["+f+"]); ":s+=" validate.errors = ["+f+"]; return false; ":s+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s+="} ",c&&(s+=" else { "),s}},2988:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.schema[t],o=e.schemaPath+e.util.getProperty(t),n=e.errSchemaPath+"/"+t,i=!e.opts.allErrors,l=e.util.copy(e),u="";l.level++;var c="valid"+l.level,h=l.baseId,d=!0,p=s;if(p)for(var m,f=-1,v=p.length-1;f<v;)m=p[f+=1],(e.opts.strictKeywords?"object"==typeof m&&Object.keys(m).length>0||!1===m:e.util.schemaHasRules(m,e.RULES.all))&&(d=!1,l.schema=m,l.schemaPath=o+"["+f+"]",l.errSchemaPath=n+"/"+f,a+="  "+e.validate(l)+" ",l.baseId=h,i&&(a+=" if ("+c+") { ",u+="}"));return i&&(a+=d?" if (true) { ":" "+u.slice(0,-1)+" "),a}},9996:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,n=e.schema[t],i=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,c="data"+(o||""),h="valid"+s,d="errs__"+s,p=e.util.copy(e),m="";p.level++;var f="valid"+p.level,v=n.every((function(t){return e.opts.strictKeywords?"object"==typeof t&&Object.keys(t).length>0||!1===t:e.util.schemaHasRules(t,e.RULES.all)}));if(v){var y=p.baseId;a+=" var "+d+" = errors; var "+h+" = false;  ";var g=e.compositeRule;e.compositeRule=p.compositeRule=!0;var P=n;if(P)for(var b,E=-1,w=P.length-1;E<w;)b=P[E+=1],p.schema=b,p.schemaPath=i+"["+E+"]",p.errSchemaPath=l+"/"+E,a+="  "+e.validate(p)+" ",p.baseId=y,a+=" "+h+" = "+h+" || "+f+"; if (!"+h+") { ",m+="}";e.compositeRule=p.compositeRule=g,a+=" "+m+" if (!"+h+") {   var err =   ",!1!==e.createErrors?(a+=" { keyword: 'anyOf' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: {} ",!1!==e.opts.messages&&(a+=" , message: 'should match some schema in anyOf' "),e.opts.verbose&&(a+=" , schema: validate.schema"+i+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ",a+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&u&&(e.async?a+=" throw new ValidationError(vErrors); ":a+=" validate.errors = vErrors; return false; "),a+=" } else {  errors = "+d+"; if (vErrors !== null) { if ("+d+") vErrors.length = "+d+"; else vErrors = null; } ",e.opts.allErrors&&(a+=" } ")}else u&&(a+=" if (true) { ");return a}},7812:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.schema[t],o=e.errSchemaPath+"/"+t,n=(e.opts.allErrors,e.util.toQuotedString(s));return!0===e.opts.$comment?a+=" console.log("+n+");":"function"==typeof e.opts.$comment&&(a+=" self._opts.$comment("+n+", "+e.util.toQuotedString(o)+", validate.root.schema);"),a}},5306:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,n=e.schema[t],i=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,c="data"+(o||""),h="valid"+s,d=e.opts.$data&&n&&n.$data;d&&(a+=" var schema"+s+" = "+e.util.getData(n.$data,o,e.dataPathArr)+"; "),d||(a+=" var schema"+s+" = validate.schema"+i+";"),a+="var "+h+" = equal("+c+", schema"+s+"); if (!"+h+") {   ";var p=p||[];p.push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'const' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { allowedValue: schema"+s+" } ",!1!==e.opts.messages&&(a+=" , message: 'should be equal to constant' "),e.opts.verbose&&(a+=" , schema: validate.schema"+i+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ";var m=a;return a=p.pop(),!e.compositeRule&&u?e.async?a+=" throw new ValidationError(["+m+"]); ":a+=" validate.errors = ["+m+"]; return false; ":a+=" var err = "+m+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" }",u&&(a+=" else { "),a}},2840:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,n=e.schema[t],i=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,c="data"+(o||""),h="valid"+s,d="errs__"+s,p=e.util.copy(e);p.level++;var m="valid"+p.level,f="i"+s,v=p.dataLevel=e.dataLevel+1,y="data"+v,g=e.baseId,P=e.opts.strictKeywords?"object"==typeof n&&Object.keys(n).length>0||!1===n:e.util.schemaHasRules(n,e.RULES.all);if(a+="var "+d+" = errors;var "+h+";",P){var b=e.compositeRule;e.compositeRule=p.compositeRule=!0,p.schema=n,p.schemaPath=i,p.errSchemaPath=l,a+=" var "+m+" = false; for (var "+f+" = 0; "+f+" < "+c+".length; "+f+"++) { ",p.errorPath=e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers,!0);var E=c+"["+f+"]";p.dataPathArr[v]=f;var w=e.validate(p);p.baseId=g,e.util.varOccurences(w,y)<2?a+=" "+e.util.varReplace(w,y,E)+" ":a+=" var "+y+" = "+E+"; "+w+" ",a+=" if ("+m+") break; }  ",e.compositeRule=p.compositeRule=b,a+="  if (!"+m+") {"}else a+=" if ("+c+".length == 0) {";var _=_||[];_.push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'contains' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: {} ",!1!==e.opts.messages&&(a+=" , message: 'should contain a valid item' "),e.opts.verbose&&(a+=" , schema: validate.schema"+i+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ";var S=a;return a=_.pop(),!e.compositeRule&&u?e.async?a+=" throw new ValidationError(["+S+"]); ":a+=" validate.errors = ["+S+"]; return false; ":a+=" var err = "+S+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" } else { ",P&&(a+="  errors = "+d+"; if (vErrors !== null) { if ("+d+") vErrors.length = "+d+"; else vErrors = null; } "),e.opts.allErrors&&(a+=" } "),a}},4165:e=>{"use strict";e.exports=function(e,t,r){var a,s,o=" ",n=e.level,i=e.dataLevel,l=e.schema[t],u=e.schemaPath+e.util.getProperty(t),c=e.errSchemaPath+"/"+t,h=!e.opts.allErrors,d="data"+(i||""),p="valid"+n,m="errs__"+n,f=e.opts.$data&&l&&l.$data;f?(o+=" var schema"+n+" = "+e.util.getData(l.$data,i,e.dataPathArr)+"; ",s="schema"+n):s=l;var v,y,g,P,b,E=this,w="definition"+n,_=E.definition,S="";if(f&&_.$data){b="keywordValidate"+n;var x=_.validateSchema;o+=" var "+w+" = RULES.custom['"+t+"'].definition; var "+b+" = "+w+".validate;"}else{if(!(P=e.useCustomRule(E,l,e.schema,e)))return;s="validate.schema"+u,b=P.code,v=_.compile,y=_.inline,g=_.macro}var j=b+".errors",T="i"+n,$="ruleErr"+n,F=_.async;if(F&&!e.async)throw new Error("async keyword in sync schema");if(y||g||(o+=j+" = null;"),o+="var "+m+" = errors;var "+p+";",f&&_.$data&&(S+="}",o+=" if ("+s+" === undefined) { "+p+" = true; } else { ",x&&(S+="}",o+=" "+p+" = "+w+".validateSchema("+s+"); if ("+p+") { ")),y)_.statements?o+=" "+P.validate+" ":o+=" "+p+" = "+P.validate+"; ";else if(g){var D=e.util.copy(e);S="",D.level++;var O="valid"+D.level;D.schema=P.validate,D.schemaPath="";var R=e.compositeRule;e.compositeRule=D.compositeRule=!0;var k=e.validate(D).replace(/validate\.schema/g,b);e.compositeRule=D.compositeRule=R,o+=" "+k}else{(L=L||[]).push(o),o="",o+="  "+b+".call( ",e.opts.passContext?o+="this":o+="self",v||!1===_.schema?o+=" , "+d+" ":o+=" , "+s+" , "+d+" , validate.schema"+e.schemaPath+" ",o+=" , (dataPath || '')",'""'!=e.errorPath&&(o+=" + "+e.errorPath);var C=i?"data"+(i-1||""):"parentData",I=i?e.dataPathArr[i]:"parentDataProperty",A=o+=" , "+C+" , "+I+" , rootData )  ";o=L.pop(),!1===_.errors?(o+=" "+p+" = ",F&&(o+="await "),o+=A+"; "):o+=F?" var "+(j="customErrors"+n)+" = null; try { "+p+" = await "+A+"; } catch (e) { "+p+" = false; if (e instanceof ValidationError) "+j+" = e.errors; else throw e; } ":" "+j+" = null; "+p+" = "+A+"; "}if(_.modifying&&(o+=" if ("+C+") "+d+" = "+C+"["+I+"];"),o+=""+S,_.valid)h&&(o+=" if (true) { ");else{var L;o+=" if ( ",void 0===_.valid?(o+=" !",o+=g?""+O:""+p):o+=" "+!_.valid+" ",o+=") { ",a=E.keyword,(L=L||[]).push(o),o="",(L=L||[]).push(o),o="",!1!==e.createErrors?(o+=" { keyword: '"+(a||"custom")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { keyword: '"+E.keyword+"' } ",!1!==e.opts.messages&&(o+=" , message: 'should pass \""+E.keyword+"\" keyword validation' "),e.opts.verbose&&(o+=" , schema: validate.schema"+u+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),o+=" } "):o+=" {} ";var V=o;o=L.pop(),!e.compositeRule&&h?e.async?o+=" throw new ValidationError(["+V+"]); ":o+=" validate.errors = ["+V+"]; return false; ":o+=" var err = "+V+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";var N=o;o=L.pop(),y?_.errors?"full"!=_.errors&&(o+="  for (var "+T+"="+m+"; "+T+"<errors; "+T+"++) { var "+$+" = vErrors["+T+"]; if ("+$+".dataPath === undefined) "+$+".dataPath = (dataPath || '') + "+e.errorPath+"; if ("+$+".schemaPath === undefined) { "+$+'.schemaPath = "'+c+'"; } ',e.opts.verbose&&(o+=" "+$+".schema = "+s+"; "+$+".data = "+d+"; "),o+=" } "):!1===_.errors?o+=" "+N+" ":(o+=" if ("+m+" == errors) { "+N+" } else {  for (var "+T+"="+m+"; "+T+"<errors; "+T+"++) { var "+$+" = vErrors["+T+"]; if ("+$+".dataPath === undefined) "+$+".dataPath = (dataPath || '') + "+e.errorPath+"; if ("+$+".schemaPath === undefined) { "+$+'.schemaPath = "'+c+'"; } ',e.opts.verbose&&(o+=" "+$+".schema = "+s+"; "+$+".data = "+d+"; "),o+=" } } "):g?(o+="   var err =   ",!1!==e.createErrors?(o+=" { keyword: '"+(a||"custom")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(c)+" , params: { keyword: '"+E.keyword+"' } ",!1!==e.opts.messages&&(o+=" , message: 'should pass \""+E.keyword+"\" keyword validation' "),e.opts.verbose&&(o+=" , schema: validate.schema"+u+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),o+=" } "):o+=" {} ",o+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&h&&(e.async?o+=" throw new ValidationError(vErrors); ":o+=" validate.errors = vErrors; return false; ")):!1===_.errors?o+=" "+N+" ":(o+=" if (Array.isArray("+j+")) { if (vErrors === null) vErrors = "+j+"; else vErrors = vErrors.concat("+j+"); errors = vErrors.length;  for (var "+T+"="+m+"; "+T+"<errors; "+T+"++) { var "+$+" = vErrors["+T+"]; if ("+$+".dataPath === undefined) "+$+".dataPath = (dataPath || '') + "+e.errorPath+";  "+$+'.schemaPath = "'+c+'";  ',e.opts.verbose&&(o+=" "+$+".schema = "+s+"; "+$+".data = "+d+"; "),o+=" } } else { "+N+" } "),o+=" } ",h&&(o+=" else { ")}return o}},6659:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,n=e.schema[t],i=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,c="data"+(o||""),h="errs__"+s,d=e.util.copy(e),p="";d.level++;var m="valid"+d.level,f={},v={},y=e.opts.ownProperties;for(E in n)if("__proto__"!=E){var g=n[E],P=Array.isArray(g)?v:f;P[E]=g}a+="var "+h+" = errors;";var b=e.errorPath;for(var E in a+="var missing"+s+";",v)if((P=v[E]).length){if(a+=" if ( "+c+e.util.getProperty(E)+" !== undefined ",y&&(a+=" && Object.prototype.hasOwnProperty.call("+c+", '"+e.util.escapeQuotes(E)+"') "),u){a+=" && ( ";var w=P;if(w)for(var _=-1,S=w.length-1;_<S;)D=w[_+=1],_&&(a+=" || "),a+=" ( ( "+(C=c+(k=e.util.getProperty(D)))+" === undefined ",y&&(a+=" || ! Object.prototype.hasOwnProperty.call("+c+", '"+e.util.escapeQuotes(D)+"') "),a+=") && (missing"+s+" = "+e.util.toQuotedString(e.opts.jsonPointers?D:k)+") ) ";a+=")) {  ";var x="missing"+s,j="' + "+x+" + '";e.opts._errorDataPathProperty&&(e.errorPath=e.opts.jsonPointers?e.util.getPathExpr(b,x,!0):b+" + "+x);var T=T||[];T.push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'dependencies' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { property: '"+e.util.escapeQuotes(E)+"', missingProperty: '"+j+"', depsCount: "+P.length+", deps: '"+e.util.escapeQuotes(1==P.length?P[0]:P.join(", "))+"' } ",!1!==e.opts.messages&&(a+=" , message: 'should have ",1==P.length?a+="property "+e.util.escapeQuotes(P[0]):a+="properties "+e.util.escapeQuotes(P.join(", ")),a+=" when property "+e.util.escapeQuotes(E)+" is present' "),e.opts.verbose&&(a+=" , schema: validate.schema"+i+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ";var $=a;a=T.pop(),!e.compositeRule&&u?e.async?a+=" throw new ValidationError(["+$+"]); ":a+=" validate.errors = ["+$+"]; return false; ":a+=" var err = "+$+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}else{a+=" ) { ";var F=P;if(F)for(var D,O=-1,R=F.length-1;O<R;){D=F[O+=1];var k=e.util.getProperty(D),C=(j=e.util.escapeQuotes(D),c+k);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(b,D,e.opts.jsonPointers)),a+=" if ( "+C+" === undefined ",y&&(a+=" || ! Object.prototype.hasOwnProperty.call("+c+", '"+e.util.escapeQuotes(D)+"') "),a+=") {  var err =   ",!1!==e.createErrors?(a+=" { keyword: 'dependencies' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { property: '"+e.util.escapeQuotes(E)+"', missingProperty: '"+j+"', depsCount: "+P.length+", deps: '"+e.util.escapeQuotes(1==P.length?P[0]:P.join(", "))+"' } ",!1!==e.opts.messages&&(a+=" , message: 'should have ",1==P.length?a+="property "+e.util.escapeQuotes(P[0]):a+="properties "+e.util.escapeQuotes(P.join(", ")),a+=" when property "+e.util.escapeQuotes(E)+" is present' "),e.opts.verbose&&(a+=" , schema: validate.schema"+i+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ",a+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } "}}a+=" }   ",u&&(p+="}",a+=" else { ")}e.errorPath=b;var I=d.baseId;for(var E in f)g=f[E],(e.opts.strictKeywords?"object"==typeof g&&Object.keys(g).length>0||!1===g:e.util.schemaHasRules(g,e.RULES.all))&&(a+=" "+m+" = true; if ( "+c+e.util.getProperty(E)+" !== undefined ",y&&(a+=" && Object.prototype.hasOwnProperty.call("+c+", '"+e.util.escapeQuotes(E)+"') "),a+=") { ",d.schema=g,d.schemaPath=i+e.util.getProperty(E),d.errSchemaPath=l+"/"+e.util.escapeFragment(E),a+="  "+e.validate(d)+" ",d.baseId=I,a+=" }  ",u&&(a+=" if ("+m+") { ",p+="}"));return u&&(a+="   "+p+" if ("+h+" == errors) {"),a}},1740:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,n=e.schema[t],i=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,c="data"+(o||""),h="valid"+s,d=e.opts.$data&&n&&n.$data;d&&(a+=" var schema"+s+" = "+e.util.getData(n.$data,o,e.dataPathArr)+"; ");var p="i"+s,m="schema"+s;d||(a+=" var "+m+" = validate.schema"+i+";"),a+="var "+h+";",d&&(a+=" if (schema"+s+" === undefined) "+h+" = true; else if (!Array.isArray(schema"+s+")) "+h+" = false; else {"),a+=h+" = false;for (var "+p+"=0; "+p+"<"+m+".length; "+p+"++) if (equal("+c+", "+m+"["+p+"])) { "+h+" = true; break; }",d&&(a+="  }  "),a+=" if (!"+h+") {   ";var f=f||[];f.push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'enum' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { allowedValues: schema"+s+" } ",!1!==e.opts.messages&&(a+=" , message: 'should be equal to one of the allowed values' "),e.opts.verbose&&(a+=" , schema: validate.schema"+i+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ";var v=a;return a=f.pop(),!e.compositeRule&&u?e.async?a+=" throw new ValidationError(["+v+"]); ":a+=" validate.errors = ["+v+"]; return false; ":a+=" var err = "+v+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" }",u&&(a+=" else { "),a}},9014:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,n=e.schema[t],i=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,c="data"+(o||"");if(!1===e.opts.format)return u&&(a+=" if (true) { "),a;var h,d=e.opts.$data&&n&&n.$data;d?(a+=" var schema"+s+" = "+e.util.getData(n.$data,o,e.dataPathArr)+"; ",h="schema"+s):h=n;var p=e.opts.unknownFormats,m=Array.isArray(p);if(d)a+=" var "+(f="format"+s)+" = formats["+h+"]; var "+(v="isObject"+s)+" = typeof "+f+" == 'object' && !("+f+" instanceof RegExp) && "+f+".validate; var "+(y="formatType"+s)+" = "+v+" && "+f+".type || 'string'; if ("+v+") { ",e.async&&(a+=" var async"+s+" = "+f+".async; "),a+=" "+f+" = "+f+".validate; } if (  ",d&&(a+=" ("+h+" !== undefined && typeof "+h+" != 'string') || "),a+=" (","ignore"!=p&&(a+=" ("+h+" && !"+f+" ",m&&(a+=" && self._opts.unknownFormats.indexOf("+h+") == -1 "),a+=") || "),a+=" ("+f+" && "+y+" == '"+r+"' && !(typeof "+f+" == 'function' ? ",e.async?a+=" (async"+s+" ? await "+f+"("+c+") : "+f+"("+c+")) ":a+=" "+f+"("+c+") ",a+=" : "+f+".test("+c+"))))) {";else{var f;if(!(f=e.formats[n])){if("ignore"==p)return e.logger.warn('unknown format "'+n+'" ignored in schema at path "'+e.errSchemaPath+'"'),u&&(a+=" if (true) { "),a;if(m&&p.indexOf(n)>=0)return u&&(a+=" if (true) { "),a;throw new Error('unknown format "'+n+'" is used in schema at path "'+e.errSchemaPath+'"')}var v,y=(v="object"==typeof f&&!(f instanceof RegExp)&&f.validate)&&f.type||"string";if(v){var g=!0===f.async;f=f.validate}if(y!=r)return u&&(a+=" if (true) { "),a;if(g){if(!e.async)throw new Error("async format in sync schema");a+=" if (!(await "+(P="formats"+e.util.getProperty(n)+".validate")+"("+c+"))) { "}else{a+=" if (! ";var P="formats"+e.util.getProperty(n);v&&(P+=".validate"),a+="function"==typeof f?" "+P+"("+c+") ":" "+P+".test("+c+") ",a+=") { "}}var b=b||[];b.push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'format' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { format:  ",a+=d?""+h:""+e.util.toQuotedString(n),a+="  } ",!1!==e.opts.messages&&(a+=" , message: 'should match format \"",a+=d?"' + "+h+" + '":""+e.util.escapeQuotes(n),a+="\"' "),e.opts.verbose&&(a+=" , schema:  ",a+=d?"validate.schema"+i:""+e.util.toQuotedString(n),a+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ";var E=a;return a=b.pop(),!e.compositeRule&&u?e.async?a+=" throw new ValidationError(["+E+"]); ":a+=" validate.errors = ["+E+"]; return false; ":a+=" var err = "+E+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" } ",u&&(a+=" else { "),a}},7231:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,n=e.schema[t],i=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,c="data"+(o||""),h="valid"+s,d="errs__"+s,p=e.util.copy(e);p.level++;var m="valid"+p.level,f=e.schema.then,v=e.schema.else,y=void 0!==f&&(e.opts.strictKeywords?"object"==typeof f&&Object.keys(f).length>0||!1===f:e.util.schemaHasRules(f,e.RULES.all)),g=void 0!==v&&(e.opts.strictKeywords?"object"==typeof v&&Object.keys(v).length>0||!1===v:e.util.schemaHasRules(v,e.RULES.all)),P=p.baseId;if(y||g){var b;p.createErrors=!1,p.schema=n,p.schemaPath=i,p.errSchemaPath=l,a+=" var "+d+" = errors; var "+h+" = true;  ";var E=e.compositeRule;e.compositeRule=p.compositeRule=!0,a+="  "+e.validate(p)+" ",p.baseId=P,p.createErrors=!0,a+="  errors = "+d+"; if (vErrors !== null) { if ("+d+") vErrors.length = "+d+"; else vErrors = null; }  ",e.compositeRule=p.compositeRule=E,y?(a+=" if ("+m+") {  ",p.schema=e.schema.then,p.schemaPath=e.schemaPath+".then",p.errSchemaPath=e.errSchemaPath+"/then",a+="  "+e.validate(p)+" ",p.baseId=P,a+=" "+h+" = "+m+"; ",y&&g?a+=" var "+(b="ifClause"+s)+" = 'then'; ":b="'then'",a+=" } ",g&&(a+=" else { ")):a+=" if (!"+m+") { ",g&&(p.schema=e.schema.else,p.schemaPath=e.schemaPath+".else",p.errSchemaPath=e.errSchemaPath+"/else",a+="  "+e.validate(p)+" ",p.baseId=P,a+=" "+h+" = "+m+"; ",y&&g?a+=" var "+(b="ifClause"+s)+" = 'else'; ":b="'else'",a+=" } "),a+=" if (!"+h+") {   var err =   ",!1!==e.createErrors?(a+=" { keyword: 'if' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { failingKeyword: "+b+" } ",!1!==e.opts.messages&&(a+=" , message: 'should match \"' + "+b+" + '\" schema' "),e.opts.verbose&&(a+=" , schema: validate.schema"+i+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ",a+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&u&&(e.async?a+=" throw new ValidationError(vErrors); ":a+=" validate.errors = vErrors; return false; "),a+=" }   ",u&&(a+=" else { ")}else u&&(a+=" if (true) { ");return a}},6674:(e,t,r)=>{"use strict";e.exports={$ref:r(2392),allOf:r(2988),anyOf:r(9996),$comment:r(7812),const:r(5306),contains:r(2840),dependencies:r(6659),enum:r(1740),format:r(9014),if:r(7231),items:r(7482),maximum:r(8210),minimum:r(8210),maxItems:r(3038),minItems:r(3038),maxLength:r(425),minLength:r(425),maxProperties:r(8204),minProperties:r(8204),multipleOf:r(3673),not:r(8528),oneOf:r(9709),pattern:r(9614),properties:r(1175),propertyNames:r(8441),required:r(1287),uniqueItems:r(3603),validate:r(9508)}},7482:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,n=e.schema[t],i=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,c="data"+(o||""),h="valid"+s,d="errs__"+s,p=e.util.copy(e),m="";p.level++;var f="valid"+p.level,v="i"+s,y=p.dataLevel=e.dataLevel+1,g="data"+y,P=e.baseId;if(a+="var "+d+" = errors;var "+h+";",Array.isArray(n)){var b=e.schema.additionalItems;if(!1===b){a+=" "+h+" = "+c+".length <= "+n.length+"; ";var E=l;l=e.errSchemaPath+"/additionalItems",a+="  if (!"+h+") {   ";var w=w||[];w.push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'additionalItems' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { limit: "+n.length+" } ",!1!==e.opts.messages&&(a+=" , message: 'should NOT have more than "+n.length+" items' "),e.opts.verbose&&(a+=" , schema: false , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ";var _=a;a=w.pop(),!e.compositeRule&&u?e.async?a+=" throw new ValidationError(["+_+"]); ":a+=" validate.errors = ["+_+"]; return false; ":a+=" var err = "+_+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" } ",l=E,u&&(m+="}",a+=" else { ")}var S=n;if(S)for(var x,j=-1,T=S.length-1;j<T;)if(x=S[j+=1],e.opts.strictKeywords?"object"==typeof x&&Object.keys(x).length>0||!1===x:e.util.schemaHasRules(x,e.RULES.all)){a+=" "+f+" = true; if ("+c+".length > "+j+") { ";var $=c+"["+j+"]";p.schema=x,p.schemaPath=i+"["+j+"]",p.errSchemaPath=l+"/"+j,p.errorPath=e.util.getPathExpr(e.errorPath,j,e.opts.jsonPointers,!0),p.dataPathArr[y]=j;var F=e.validate(p);p.baseId=P,e.util.varOccurences(F,g)<2?a+=" "+e.util.varReplace(F,g,$)+" ":a+=" var "+g+" = "+$+"; "+F+" ",a+=" }  ",u&&(a+=" if ("+f+") { ",m+="}")}"object"==typeof b&&(e.opts.strictKeywords?"object"==typeof b&&Object.keys(b).length>0||!1===b:e.util.schemaHasRules(b,e.RULES.all))&&(p.schema=b,p.schemaPath=e.schemaPath+".additionalItems",p.errSchemaPath=e.errSchemaPath+"/additionalItems",a+=" "+f+" = true; if ("+c+".length > "+n.length+") {  for (var "+v+" = "+n.length+"; "+v+" < "+c+".length; "+v+"++) { ",p.errorPath=e.util.getPathExpr(e.errorPath,v,e.opts.jsonPointers,!0),$=c+"["+v+"]",p.dataPathArr[y]=v,F=e.validate(p),p.baseId=P,e.util.varOccurences(F,g)<2?a+=" "+e.util.varReplace(F,g,$)+" ":a+=" var "+g+" = "+$+"; "+F+" ",u&&(a+=" if (!"+f+") break; "),a+=" } }  ",u&&(a+=" if ("+f+") { ",m+="}"))}else(e.opts.strictKeywords?"object"==typeof n&&Object.keys(n).length>0||!1===n:e.util.schemaHasRules(n,e.RULES.all))&&(p.schema=n,p.schemaPath=i,p.errSchemaPath=l,a+="  for (var "+v+" = 0; "+v+" < "+c+".length; "+v+"++) { ",p.errorPath=e.util.getPathExpr(e.errorPath,v,e.opts.jsonPointers,!0),$=c+"["+v+"]",p.dataPathArr[y]=v,F=e.validate(p),p.baseId=P,e.util.varOccurences(F,g)<2?a+=" "+e.util.varReplace(F,g,$)+" ":a+=" var "+g+" = "+$+"; "+F+" ",u&&(a+=" if (!"+f+") break; "),a+=" }");return u&&(a+=" "+m+" if ("+d+" == errors) {"),a}},3673:e=>{"use strict";e.exports=function(e,t,r){var a,s=" ",o=e.level,n=e.dataLevel,i=e.schema[t],l=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,h="data"+(n||""),d=e.opts.$data&&i&&i.$data;if(d?(s+=" var schema"+o+" = "+e.util.getData(i.$data,n,e.dataPathArr)+"; ",a="schema"+o):a=i,!d&&"number"!=typeof i)throw new Error(t+" must be number");s+="var division"+o+";if (",d&&(s+=" "+a+" !== undefined && ( typeof "+a+" != 'number' || "),s+=" (division"+o+" = "+h+" / "+a+", ",e.opts.multipleOfPrecision?s+=" Math.abs(Math.round(division"+o+") - division"+o+") > 1e-"+e.opts.multipleOfPrecision+" ":s+=" division"+o+" !== parseInt(division"+o+") ",s+=" ) ",d&&(s+="  )  "),s+=" ) {   ";var p=p||[];p.push(s),s="",!1!==e.createErrors?(s+=" { keyword: 'multipleOf' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { multipleOf: "+a+" } ",!1!==e.opts.messages&&(s+=" , message: 'should be multiple of ",s+=d?"' + "+a:a+"'"),e.opts.verbose&&(s+=" , schema:  ",s+=d?"validate.schema"+l:""+i,s+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),s+=" } "):s+=" {} ";var m=s;return s=p.pop(),!e.compositeRule&&c?e.async?s+=" throw new ValidationError(["+m+"]); ":s+=" validate.errors = ["+m+"]; return false; ":s+=" var err = "+m+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s+="} ",c&&(s+=" else { "),s}},8528:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,n=e.schema[t],i=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,c="data"+(o||""),h="errs__"+s,d=e.util.copy(e);d.level++;var p="valid"+d.level;if(e.opts.strictKeywords?"object"==typeof n&&Object.keys(n).length>0||!1===n:e.util.schemaHasRules(n,e.RULES.all)){d.schema=n,d.schemaPath=i,d.errSchemaPath=l,a+=" var "+h+" = errors;  ";var m,f=e.compositeRule;e.compositeRule=d.compositeRule=!0,d.createErrors=!1,d.opts.allErrors&&(m=d.opts.allErrors,d.opts.allErrors=!1),a+=" "+e.validate(d)+" ",d.createErrors=!0,m&&(d.opts.allErrors=m),e.compositeRule=d.compositeRule=f,a+=" if ("+p+") {   ";var v=v||[];v.push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'not' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: {} ",!1!==e.opts.messages&&(a+=" , message: 'should NOT be valid' "),e.opts.verbose&&(a+=" , schema: validate.schema"+i+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ";var y=a;a=v.pop(),!e.compositeRule&&u?e.async?a+=" throw new ValidationError(["+y+"]); ":a+=" validate.errors = ["+y+"]; return false; ":a+=" var err = "+y+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" } else {  errors = "+h+"; if (vErrors !== null) { if ("+h+") vErrors.length = "+h+"; else vErrors = null; } ",e.opts.allErrors&&(a+=" } ")}else a+="  var err =   ",!1!==e.createErrors?(a+=" { keyword: 'not' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: {} ",!1!==e.opts.messages&&(a+=" , message: 'should NOT be valid' "),e.opts.verbose&&(a+=" , schema: validate.schema"+i+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ",a+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",u&&(a+=" if (false) { ");return a}},9709:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,n=e.schema[t],i=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,c="data"+(o||""),h="valid"+s,d="errs__"+s,p=e.util.copy(e),m="";p.level++;var f="valid"+p.level,v=p.baseId,y="prevValid"+s,g="passingSchemas"+s;a+="var "+d+" = errors , "+y+" = false , "+h+" = false , "+g+" = null; ";var P=e.compositeRule;e.compositeRule=p.compositeRule=!0;var b=n;if(b)for(var E,w=-1,_=b.length-1;w<_;)E=b[w+=1],(e.opts.strictKeywords?"object"==typeof E&&Object.keys(E).length>0||!1===E:e.util.schemaHasRules(E,e.RULES.all))?(p.schema=E,p.schemaPath=i+"["+w+"]",p.errSchemaPath=l+"/"+w,a+="  "+e.validate(p)+" ",p.baseId=v):a+=" var "+f+" = true; ",w&&(a+=" if ("+f+" && "+y+") { "+h+" = false; "+g+" = ["+g+", "+w+"]; } else { ",m+="}"),a+=" if ("+f+") { "+h+" = "+y+" = true; "+g+" = "+w+"; }";return e.compositeRule=p.compositeRule=P,a+=m+"if (!"+h+") {   var err =   ",!1!==e.createErrors?(a+=" { keyword: 'oneOf' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { passingSchemas: "+g+" } ",!1!==e.opts.messages&&(a+=" , message: 'should match exactly one schema in oneOf' "),e.opts.verbose&&(a+=" , schema: validate.schema"+i+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ",a+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&u&&(e.async?a+=" throw new ValidationError(vErrors); ":a+=" validate.errors = vErrors; return false; "),a+="} else {  errors = "+d+"; if (vErrors !== null) { if ("+d+") vErrors.length = "+d+"; else vErrors = null; }",e.opts.allErrors&&(a+=" } "),a}},9614:e=>{"use strict";e.exports=function(e,t,r){var a,s=" ",o=e.level,n=e.dataLevel,i=e.schema[t],l=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,h="data"+(n||""),d=e.opts.$data&&i&&i.$data;d?(s+=" var schema"+o+" = "+e.util.getData(i.$data,n,e.dataPathArr)+"; ",a="schema"+o):a=i,s+="if ( ",d&&(s+=" ("+a+" !== undefined && typeof "+a+" != 'string') || "),s+=" !"+(d?"(new RegExp("+a+"))":e.usePattern(i))+".test("+h+") ) {   ";var p=p||[];p.push(s),s="",!1!==e.createErrors?(s+=" { keyword: 'pattern' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { pattern:  ",s+=d?""+a:""+e.util.toQuotedString(i),s+="  } ",!1!==e.opts.messages&&(s+=" , message: 'should match pattern \"",s+=d?"' + "+a+" + '":""+e.util.escapeQuotes(i),s+="\"' "),e.opts.verbose&&(s+=" , schema:  ",s+=d?"validate.schema"+l:""+e.util.toQuotedString(i),s+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),s+=" } "):s+=" {} ";var m=s;return s=p.pop(),!e.compositeRule&&c?e.async?s+=" throw new ValidationError(["+m+"]); ":s+=" validate.errors = ["+m+"]; return false; ":s+=" var err = "+m+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s+="} ",c&&(s+=" else { "),s}},1175:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,n=e.schema[t],i=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,c="data"+(o||""),h="errs__"+s,d=e.util.copy(e),p="";d.level++;var m="valid"+d.level,f="key"+s,v="idx"+s,y=d.dataLevel=e.dataLevel+1,g="data"+y,P="dataProperties"+s,b=Object.keys(n||{}).filter(k),E=e.schema.patternProperties||{},w=Object.keys(E).filter(k),_=e.schema.additionalProperties,S=b.length||w.length,x=!1===_,j="object"==typeof _&&Object.keys(_).length,T=e.opts.removeAdditional,$=x||j||T,F=e.opts.ownProperties,D=e.baseId,O=e.schema.required;if(O&&(!e.opts.$data||!O.$data)&&O.length<e.opts.loopRequired)var R=e.util.toHash(O);function k(e){return"__proto__"!==e}if(a+="var "+h+" = errors;var "+m+" = true;",F&&(a+=" var "+P+" = undefined;"),$){if(a+=F?" "+P+" = "+P+" || Object.keys("+c+"); for (var "+v+"=0; "+v+"<"+P+".length; "+v+"++) { var "+f+" = "+P+"["+v+"]; ":" for (var "+f+" in "+c+") { ",S){if(a+=" var isAdditional"+s+" = !(false ",b.length)if(b.length>8)a+=" || validate.schema"+i+".hasOwnProperty("+f+") ";else{var C=b;if(C)for(var I=-1,A=C.length-1;I<A;)Z=C[I+=1],a+=" || "+f+" == "+e.util.toQuotedString(Z)+" "}if(w.length){var L=w;if(L)for(var V=-1,N=L.length-1;V<N;)oe=L[V+=1],a+=" || "+e.usePattern(oe)+".test("+f+") "}a+=" ); if (isAdditional"+s+") { "}if("all"==T)a+=" delete "+c+"["+f+"]; ";else{var q=e.errorPath,z="' + "+f+" + '";if(e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers)),x)if(T)a+=" delete "+c+"["+f+"]; ";else{a+=" "+m+" = false; ";var U=l;l=e.errSchemaPath+"/additionalProperties",(re=re||[]).push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'additionalProperties' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { additionalProperty: '"+z+"' } ",!1!==e.opts.messages&&(a+=" , message: '",e.opts._errorDataPathProperty?a+="is an invalid additional property":a+="should NOT have additional properties",a+="' "),e.opts.verbose&&(a+=" , schema: false , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ";var Q=a;a=re.pop(),!e.compositeRule&&u?e.async?a+=" throw new ValidationError(["+Q+"]); ":a+=" validate.errors = ["+Q+"]; return false; ":a+=" var err = "+Q+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",l=U,u&&(a+=" break; ")}else if(j)if("failing"==T){a+=" var "+h+" = errors;  ";var M=e.compositeRule;e.compositeRule=d.compositeRule=!0,d.schema=_,d.schemaPath=e.schemaPath+".additionalProperties",d.errSchemaPath=e.errSchemaPath+"/additionalProperties",d.errorPath=e.opts._errorDataPathProperty?e.errorPath:e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers);var H=c+"["+f+"]";d.dataPathArr[y]=f;var J=e.validate(d);d.baseId=D,e.util.varOccurences(J,g)<2?a+=" "+e.util.varReplace(J,g,H)+" ":a+=" var "+g+" = "+H+"; "+J+" ",a+=" if (!"+m+") { errors = "+h+"; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete "+c+"["+f+"]; }  ",e.compositeRule=d.compositeRule=M}else d.schema=_,d.schemaPath=e.schemaPath+".additionalProperties",d.errSchemaPath=e.errSchemaPath+"/additionalProperties",d.errorPath=e.opts._errorDataPathProperty?e.errorPath:e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers),H=c+"["+f+"]",d.dataPathArr[y]=f,J=e.validate(d),d.baseId=D,e.util.varOccurences(J,g)<2?a+=" "+e.util.varReplace(J,g,H)+" ":a+=" var "+g+" = "+H+"; "+J+" ",u&&(a+=" if (!"+m+") break; ");e.errorPath=q}S&&(a+=" } "),a+=" }  ",u&&(a+=" if ("+m+") { ",p+="}")}var B=e.opts.useDefaults&&!e.compositeRule;if(b.length){var K=b;if(K)for(var Z,G=-1,W=K.length-1;G<W;){var X=n[Z=K[G+=1]];if(e.opts.strictKeywords?"object"==typeof X&&Object.keys(X).length>0||!1===X:e.util.schemaHasRules(X,e.RULES.all)){var Y=e.util.getProperty(Z),ee=(H=c+Y,B&&void 0!==X.default);if(d.schema=X,d.schemaPath=i+Y,d.errSchemaPath=l+"/"+e.util.escapeFragment(Z),d.errorPath=e.util.getPath(e.errorPath,Z,e.opts.jsonPointers),d.dataPathArr[y]=e.util.toQuotedString(Z),J=e.validate(d),d.baseId=D,e.util.varOccurences(J,g)<2){J=e.util.varReplace(J,g,H);var te=H}else te=g,a+=" var "+g+" = "+H+"; ";if(ee)a+=" "+J+" ";else{if(R&&R[Z]){a+=" if ( "+te+" === undefined ",F&&(a+=" || ! Object.prototype.hasOwnProperty.call("+c+", '"+e.util.escapeQuotes(Z)+"') "),a+=") { "+m+" = false; ",q=e.errorPath,U=l;var re,ae=e.util.escapeQuotes(Z);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(q,Z,e.opts.jsonPointers)),l=e.errSchemaPath+"/required",(re=re||[]).push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { missingProperty: '"+ae+"' } ",!1!==e.opts.messages&&(a+=" , message: '",e.opts._errorDataPathProperty?a+="is a required property":a+="should have required property \\'"+ae+"\\'",a+="' "),e.opts.verbose&&(a+=" , schema: validate.schema"+i+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ",Q=a,a=re.pop(),!e.compositeRule&&u?e.async?a+=" throw new ValidationError(["+Q+"]); ":a+=" validate.errors = ["+Q+"]; return false; ":a+=" var err = "+Q+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",l=U,e.errorPath=q,a+=" } else { "}else u?(a+=" if ( "+te+" === undefined ",F&&(a+=" || ! Object.prototype.hasOwnProperty.call("+c+", '"+e.util.escapeQuotes(Z)+"') "),a+=") { "+m+" = true; } else { "):(a+=" if ("+te+" !== undefined ",F&&(a+=" &&   Object.prototype.hasOwnProperty.call("+c+", '"+e.util.escapeQuotes(Z)+"') "),a+=" ) { ");a+=" "+J+" } "}}u&&(a+=" if ("+m+") { ",p+="}")}}if(w.length){var se=w;if(se)for(var oe,ne=-1,ie=se.length-1;ne<ie;)X=E[oe=se[ne+=1]],(e.opts.strictKeywords?"object"==typeof X&&Object.keys(X).length>0||!1===X:e.util.schemaHasRules(X,e.RULES.all))&&(d.schema=X,d.schemaPath=e.schemaPath+".patternProperties"+e.util.getProperty(oe),d.errSchemaPath=e.errSchemaPath+"/patternProperties/"+e.util.escapeFragment(oe),a+=F?" "+P+" = "+P+" || Object.keys("+c+"); for (var "+v+"=0; "+v+"<"+P+".length; "+v+"++) { var "+f+" = "+P+"["+v+"]; ":" for (var "+f+" in "+c+") { ",a+=" if ("+e.usePattern(oe)+".test("+f+")) { ",d.errorPath=e.util.getPathExpr(e.errorPath,f,e.opts.jsonPointers),H=c+"["+f+"]",d.dataPathArr[y]=f,J=e.validate(d),d.baseId=D,e.util.varOccurences(J,g)<2?a+=" "+e.util.varReplace(J,g,H)+" ":a+=" var "+g+" = "+H+"; "+J+" ",u&&(a+=" if (!"+m+") break; "),a+=" } ",u&&(a+=" else "+m+" = true; "),a+=" }  ",u&&(a+=" if ("+m+") { ",p+="}"))}return u&&(a+=" "+p+" if ("+h+" == errors) {"),a}},8441:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,n=e.schema[t],i=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,c="data"+(o||""),h="errs__"+s,d=e.util.copy(e);d.level++;var p="valid"+d.level;if(a+="var "+h+" = errors;",e.opts.strictKeywords?"object"==typeof n&&Object.keys(n).length>0||!1===n:e.util.schemaHasRules(n,e.RULES.all)){d.schema=n,d.schemaPath=i,d.errSchemaPath=l;var m="key"+s,f="idx"+s,v="i"+s,y="' + "+m+" + '",g="data"+(d.dataLevel=e.dataLevel+1),P="dataProperties"+s,b=e.opts.ownProperties,E=e.baseId;b&&(a+=" var "+P+" = undefined; "),a+=b?" "+P+" = "+P+" || Object.keys("+c+"); for (var "+f+"=0; "+f+"<"+P+".length; "+f+"++) { var "+m+" = "+P+"["+f+"]; ":" for (var "+m+" in "+c+") { ",a+=" var startErrs"+s+" = errors; ";var w=m,_=e.compositeRule;e.compositeRule=d.compositeRule=!0;var S=e.validate(d);d.baseId=E,e.util.varOccurences(S,g)<2?a+=" "+e.util.varReplace(S,g,w)+" ":a+=" var "+g+" = "+w+"; "+S+" ",e.compositeRule=d.compositeRule=_,a+=" if (!"+p+") { for (var "+v+"=startErrs"+s+"; "+v+"<errors; "+v+"++) { vErrors["+v+"].propertyName = "+m+"; }   var err =   ",!1!==e.createErrors?(a+=" { keyword: 'propertyNames' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { propertyName: '"+y+"' } ",!1!==e.opts.messages&&(a+=" , message: 'property name \\'"+y+"\\' is invalid' "),e.opts.verbose&&(a+=" , schema: validate.schema"+i+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ",a+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&u&&(e.async?a+=" throw new ValidationError(vErrors); ":a+=" validate.errors = vErrors; return false; "),u&&(a+=" break; "),a+=" } }"}return u&&(a+="  if ("+h+" == errors) {"),a}},2392:e=>{"use strict";e.exports=function(e,t,r){var a,s,o=" ",n=e.level,i=e.dataLevel,l=e.schema[t],u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,h="data"+(i||""),d="valid"+n;if("#"==l||"#/"==l)e.isRoot?(a=e.async,s="validate"):(a=!0===e.root.schema.$async,s="root.refVal[0]");else{var p=e.resolveRef(e.baseId,l,e.isRoot);if(void 0===p){var m=e.MissingRefError.message(e.baseId,l);if("fail"==e.opts.missingRefs){e.logger.error(m),(g=g||[]).push(o),o="",!1!==e.createErrors?(o+=" { keyword: '$ref' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { ref: '"+e.util.escapeQuotes(l)+"' } ",!1!==e.opts.messages&&(o+=" , message: 'can\\'t resolve reference "+e.util.escapeQuotes(l)+"' "),e.opts.verbose&&(o+=" , schema: "+e.util.toQuotedString(l)+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),o+=" } "):o+=" {} ";var f=o;o=g.pop(),!e.compositeRule&&c?e.async?o+=" throw new ValidationError(["+f+"]); ":o+=" validate.errors = ["+f+"]; return false; ":o+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",c&&(o+=" if (false) { ")}else{if("ignore"!=e.opts.missingRefs)throw new e.MissingRefError(e.baseId,l,m);e.logger.warn(m),c&&(o+=" if (true) { ")}}else if(p.inline){var v=e.util.copy(e);v.level++;var y="valid"+v.level;v.schema=p.schema,v.schemaPath="",v.errSchemaPath=l,o+=" "+e.validate(v).replace(/validate\.schema/g,p.code)+" ",c&&(o+=" if ("+y+") { ")}else a=!0===p.$async||e.async&&!1!==p.$async,s=p.code}if(s){var g;(g=g||[]).push(o),o="",e.opts.passContext?o+=" "+s+".call(this, ":o+=" "+s+"( ",o+=" "+h+", (dataPath || '')",'""'!=e.errorPath&&(o+=" + "+e.errorPath);var P=o+=" , "+(i?"data"+(i-1||""):"parentData")+" , "+(i?e.dataPathArr[i]:"parentDataProperty")+", rootData)  ";if(o=g.pop(),a){if(!e.async)throw new Error("async schema referenced by sync schema");c&&(o+=" var "+d+"; "),o+=" try { await "+P+"; ",c&&(o+=" "+d+" = true; "),o+=" } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ",c&&(o+=" "+d+" = false; "),o+=" } ",c&&(o+=" if ("+d+") { ")}else o+=" if (!"+P+") { if (vErrors === null) vErrors = "+s+".errors; else vErrors = vErrors.concat("+s+".errors); errors = vErrors.length; } ",c&&(o+=" else { ")}return o}},1287:e=>{"use strict";e.exports=function(e,t,r){var a=" ",s=e.level,o=e.dataLevel,n=e.schema[t],i=e.schemaPath+e.util.getProperty(t),l=e.errSchemaPath+"/"+t,u=!e.opts.allErrors,c="data"+(o||""),h="valid"+s,d=e.opts.$data&&n&&n.$data;d&&(a+=" var schema"+s+" = "+e.util.getData(n.$data,o,e.dataPathArr)+"; ");var p="schema"+s;if(!d)if(n.length<e.opts.loopRequired&&e.schema.properties&&Object.keys(e.schema.properties).length){var m=[],f=n;if(f)for(var v,y=-1,g=f.length-1;y<g;){v=f[y+=1];var P=e.schema.properties[v];P&&(e.opts.strictKeywords?"object"==typeof P&&Object.keys(P).length>0||!1===P:e.util.schemaHasRules(P,e.RULES.all))||(m[m.length]=v)}}else m=n;if(d||m.length){var b=e.errorPath,E=d||m.length>=e.opts.loopRequired,w=e.opts.ownProperties;if(u)if(a+=" var missing"+s+"; ",E){d||(a+=" var "+p+" = validate.schema"+i+"; ");var _="' + "+(F="schema"+s+"["+(T="i"+s)+"]")+" + '";e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(b,F,e.opts.jsonPointers)),a+=" var "+h+" = true; ",d&&(a+=" if (schema"+s+" === undefined) "+h+" = true; else if (!Array.isArray(schema"+s+")) "+h+" = false; else {"),a+=" for (var "+T+" = 0; "+T+" < "+p+".length; "+T+"++) { "+h+" = "+c+"["+p+"["+T+"]] !== undefined ",w&&(a+=" &&   Object.prototype.hasOwnProperty.call("+c+", "+p+"["+T+"]) "),a+="; if (!"+h+") break; } ",d&&(a+="  }  "),a+="  if (!"+h+") {   ",(x=x||[]).push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { missingProperty: '"+_+"' } ",!1!==e.opts.messages&&(a+=" , message: '",e.opts._errorDataPathProperty?a+="is a required property":a+="should have required property \\'"+_+"\\'",a+="' "),e.opts.verbose&&(a+=" , schema: validate.schema"+i+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ";var S=a;a=x.pop(),!e.compositeRule&&u?e.async?a+=" throw new ValidationError(["+S+"]); ":a+=" validate.errors = ["+S+"]; return false; ":a+=" var err = "+S+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" } else { "}else{a+=" if ( ";var x,j=m;if(j)for(var T=-1,$=j.length-1;T<$;)O=j[T+=1],T&&(a+=" || "),a+=" ( ( "+(I=c+(C=e.util.getProperty(O)))+" === undefined ",w&&(a+=" || ! Object.prototype.hasOwnProperty.call("+c+", '"+e.util.escapeQuotes(O)+"') "),a+=") && (missing"+s+" = "+e.util.toQuotedString(e.opts.jsonPointers?O:C)+") ) ";a+=") {  ",_="' + "+(F="missing"+s)+" + '",e.opts._errorDataPathProperty&&(e.errorPath=e.opts.jsonPointers?e.util.getPathExpr(b,F,!0):b+" + "+F),(x=x||[]).push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { missingProperty: '"+_+"' } ",!1!==e.opts.messages&&(a+=" , message: '",e.opts._errorDataPathProperty?a+="is a required property":a+="should have required property \\'"+_+"\\'",a+="' "),e.opts.verbose&&(a+=" , schema: validate.schema"+i+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ",S=a,a=x.pop(),!e.compositeRule&&u?e.async?a+=" throw new ValidationError(["+S+"]); ":a+=" validate.errors = ["+S+"]; return false; ":a+=" var err = "+S+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" } else { "}else if(E){var F;d||(a+=" var "+p+" = validate.schema"+i+"; "),_="' + "+(F="schema"+s+"["+(T="i"+s)+"]")+" + '",e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(b,F,e.opts.jsonPointers)),d&&(a+=" if ("+p+" && !Array.isArray("+p+")) {  var err =   ",!1!==e.createErrors?(a+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { missingProperty: '"+_+"' } ",!1!==e.opts.messages&&(a+=" , message: '",e.opts._errorDataPathProperty?a+="is a required property":a+="should have required property \\'"+_+"\\'",a+="' "),e.opts.verbose&&(a+=" , schema: validate.schema"+i+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ",a+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if ("+p+" !== undefined) { "),a+=" for (var "+T+" = 0; "+T+" < "+p+".length; "+T+"++) { if ("+c+"["+p+"["+T+"]] === undefined ",w&&(a+=" || ! Object.prototype.hasOwnProperty.call("+c+", "+p+"["+T+"]) "),a+=") {  var err =   ",!1!==e.createErrors?(a+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { missingProperty: '"+_+"' } ",!1!==e.opts.messages&&(a+=" , message: '",e.opts._errorDataPathProperty?a+="is a required property":a+="should have required property \\'"+_+"\\'",a+="' "),e.opts.verbose&&(a+=" , schema: validate.schema"+i+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ",a+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ",d&&(a+="  }  ")}else{var D=m;if(D)for(var O,R=-1,k=D.length-1;R<k;){O=D[R+=1];var C=e.util.getProperty(O),I=(_=e.util.escapeQuotes(O),c+C);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(b,O,e.opts.jsonPointers)),a+=" if ( "+I+" === undefined ",w&&(a+=" || ! Object.prototype.hasOwnProperty.call("+c+", '"+e.util.escapeQuotes(O)+"') "),a+=") {  var err =   ",!1!==e.createErrors?(a+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(l)+" , params: { missingProperty: '"+_+"' } ",!1!==e.opts.messages&&(a+=" , message: '",e.opts._errorDataPathProperty?a+="is a required property":a+="should have required property \\'"+_+"\\'",a+="' "),e.opts.verbose&&(a+=" , schema: validate.schema"+i+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),a+=" } "):a+=" {} ",a+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } "}}e.errorPath=b}else u&&(a+=" if (true) {");return a}},3603:e=>{"use strict";e.exports=function(e,t,r){var a,s=" ",o=e.level,n=e.dataLevel,i=e.schema[t],l=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,h="data"+(n||""),d="valid"+o,p=e.opts.$data&&i&&i.$data;if(p?(s+=" var schema"+o+" = "+e.util.getData(i.$data,n,e.dataPathArr)+"; ",a="schema"+o):a=i,(i||p)&&!1!==e.opts.uniqueItems){p&&(s+=" var "+d+"; if ("+a+" === false || "+a+" === undefined) "+d+" = true; else if (typeof "+a+" != 'boolean') "+d+" = false; else { "),s+=" var i = "+h+".length , "+d+" = true , j; if (i > 1) { ";var m=e.schema.items&&e.schema.items.type,f=Array.isArray(m);if(!m||"object"==m||"array"==m||f&&(m.indexOf("object")>=0||m.indexOf("array")>=0))s+=" outer: for (;i--;) { for (j = i; j--;) { if (equal("+h+"[i], "+h+"[j])) { "+d+" = false; break outer; } } } ";else{s+=" var itemIndices = {}, item; for (;i--;) { var item = "+h+"[i]; ";var v="checkDataType"+(f?"s":"");s+=" if ("+e.util[v](m,"item",e.opts.strictNumbers,!0)+") continue; ",f&&(s+=" if (typeof item == 'string') item = '\"' + item; "),s+=" if (typeof itemIndices[item] == 'number') { "+d+" = false; j = itemIndices[item]; break; } itemIndices[item] = i; } "}s+=" } ",p&&(s+="  }  "),s+=" if (!"+d+") {   ";var y=y||[];y.push(s),s="",!1!==e.createErrors?(s+=" { keyword: 'uniqueItems' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { i: i, j: j } ",!1!==e.opts.messages&&(s+=" , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' "),e.opts.verbose&&(s+=" , schema:  ",s+=p?"validate.schema"+l:""+i,s+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+h+" "),s+=" } "):s+=" {} ";var g=s;s=y.pop(),!e.compositeRule&&c?e.async?s+=" throw new ValidationError(["+g+"]); ":s+=" validate.errors = ["+g+"]; return false; ":s+=" var err = "+g+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s+=" } ",c&&(s+=" else { ")}else c&&(s+=" if (true) { ");return s}},9508:e=>{"use strict";e.exports=function(e,t,r){var a="",s=!0===e.schema.$async,o=e.util.schemaHasRulesExcept(e.schema,e.RULES.all,"$ref"),n=e.self._getId(e.schema);if(e.opts.strictKeywords){var i=e.util.schemaUnknownRules(e.schema,e.RULES.keywords);if(i){var l="unknown keyword: "+i;if("log"!==e.opts.strictKeywords)throw new Error(l);e.logger.warn(l)}}if(e.isTop&&(a+=" var validate = ",s&&(e.async=!0,a+="async "),a+="function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; ",n&&(e.opts.sourceCode||e.opts.processCode)&&(a+=" /*# sourceURL="+n+" */ ")),"boolean"==typeof e.schema||!o&&!e.schema.$ref){t="false schema";var u=e.level,c=e.dataLevel,h=e.schema[t],d=e.schemaPath+e.util.getProperty(t),p=e.errSchemaPath+"/"+t,m=!e.opts.allErrors,f="data"+(c||""),v="valid"+u;if(!1===e.schema){e.isTop?m=!0:a+=" var "+v+" = false; ",(H=H||[]).push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'false schema' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: {} ",!1!==e.opts.messages&&(a+=" , message: 'boolean schema is false' "),e.opts.verbose&&(a+=" , schema: false , parentSchema: validate.schema"+e.schemaPath+" , data: "+f+" "),a+=" } "):a+=" {} ";var y=a;a=H.pop(),!e.compositeRule&&m?e.async?a+=" throw new ValidationError(["+y+"]); ":a+=" validate.errors = ["+y+"]; return false; ":a+=" var err = "+y+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}else e.isTop?a+=s?" return data; ":" validate.errors = null; return true; ":a+=" var "+v+" = true; ";return e.isTop&&(a+=" }; return validate; "),a}if(e.isTop){var g=e.isTop;if(u=e.level=0,c=e.dataLevel=0,f="data",e.rootId=e.resolve.fullPath(e.self._getId(e.root.schema)),e.baseId=e.baseId||e.rootId,delete e.isTop,e.dataPathArr=[""],void 0!==e.schema.default&&e.opts.useDefaults&&e.opts.strictDefaults){var P="default is ignored in the schema root";if("log"!==e.opts.strictDefaults)throw new Error(P);e.logger.warn(P)}a+=" var vErrors = null; ",a+=" var errors = 0;     ",a+=" if (rootData === undefined) rootData = data; "}else{if(u=e.level,f="data"+((c=e.dataLevel)||""),n&&(e.baseId=e.resolve.url(e.baseId,n)),s&&!e.async)throw new Error("async schema in sync schema");a+=" var errs_"+u+" = errors;"}v="valid"+u,m=!e.opts.allErrors;var b="",E="",w=e.schema.type,_=Array.isArray(w);if(w&&e.opts.nullable&&!0===e.schema.nullable&&(_?-1==w.indexOf("null")&&(w=w.concat("null")):"null"!=w&&(w=[w,"null"],_=!0)),_&&1==w.length&&(w=w[0],_=!1),e.schema.$ref&&o){if("fail"==e.opts.extendRefs)throw new Error('$ref: validation keywords used in schema at path "'+e.errSchemaPath+'" (see option extendRefs)');!0!==e.opts.extendRefs&&(o=!1,e.logger.warn('$ref: keywords ignored in schema at path "'+e.errSchemaPath+'"'))}if(e.schema.$comment&&e.opts.$comment&&(a+=" "+e.RULES.all.$comment.code(e,"$comment")),w){if(e.opts.coerceTypes)var S=e.util.coerceToTypes(e.opts.coerceTypes,w);var x=e.RULES.types[w];if(S||_||!0===x||x&&!W(x)){d=e.schemaPath+".type",p=e.errSchemaPath+"/type",d=e.schemaPath+".type",p=e.errSchemaPath+"/type";var j=_?"checkDataTypes":"checkDataType";if(a+=" if ("+e.util[j](w,f,e.opts.strictNumbers,!0)+") { ",S){var T="dataType"+u,$="coerced"+u;a+=" var "+T+" = typeof "+f+"; var "+$+" = undefined; ","array"==e.opts.coerceTypes&&(a+=" if ("+T+" == 'object' && Array.isArray("+f+") && "+f+".length == 1) { "+f+" = "+f+"[0]; "+T+" = typeof "+f+"; if ("+e.util.checkDataType(e.schema.type,f,e.opts.strictNumbers)+") "+$+" = "+f+"; } "),a+=" if ("+$+" !== undefined) ; ";var F=S;if(F)for(var D,O=-1,R=F.length-1;O<R;)"string"==(D=F[O+=1])?a+=" else if ("+T+" == 'number' || "+T+" == 'boolean') "+$+" = '' + "+f+"; else if ("+f+" === null) "+$+" = ''; ":"number"==D||"integer"==D?(a+=" else if ("+T+" == 'boolean' || "+f+" === null || ("+T+" == 'string' && "+f+" && "+f+" == +"+f+" ","integer"==D&&(a+=" && !("+f+" % 1)"),a+=")) "+$+" = +"+f+"; "):"boolean"==D?a+=" else if ("+f+" === 'false' || "+f+" === 0 || "+f+" === null) "+$+" = false; else if ("+f+" === 'true' || "+f+" === 1) "+$+" = true; ":"null"==D?a+=" else if ("+f+" === '' || "+f+" === 0 || "+f+" === false) "+$+" = null; ":"array"==e.opts.coerceTypes&&"array"==D&&(a+=" else if ("+T+" == 'string' || "+T+" == 'number' || "+T+" == 'boolean' || "+f+" == null) "+$+" = ["+f+"]; ");a+=" else {   ",(H=H||[]).push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'type' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { type: '",a+=_?""+w.join(","):""+w,a+="' } ",!1!==e.opts.messages&&(a+=" , message: 'should be ",a+=_?""+w.join(","):""+w,a+="' "),e.opts.verbose&&(a+=" , schema: validate.schema"+d+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+f+" "),a+=" } "):a+=" {} ",y=a,a=H.pop(),!e.compositeRule&&m?e.async?a+=" throw new ValidationError(["+y+"]); ":a+=" validate.errors = ["+y+"]; return false; ":a+=" var err = "+y+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" } if ("+$+" !== undefined) {  ";var k=c?"data"+(c-1||""):"parentData";a+=" "+f+" = "+$+"; ",c||(a+="if ("+k+" !== undefined)"),a+=" "+k+"["+(c?e.dataPathArr[c]:"parentDataProperty")+"] = "+$+"; } "}else(H=H||[]).push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'type' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { type: '",a+=_?""+w.join(","):""+w,a+="' } ",!1!==e.opts.messages&&(a+=" , message: 'should be ",a+=_?""+w.join(","):""+w,a+="' "),e.opts.verbose&&(a+=" , schema: validate.schema"+d+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+f+" "),a+=" } "):a+=" {} ",y=a,a=H.pop(),!e.compositeRule&&m?e.async?a+=" throw new ValidationError(["+y+"]); ":a+=" validate.errors = ["+y+"]; return false; ":a+=" var err = "+y+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";a+=" } "}}if(e.schema.$ref&&!o)a+=" "+e.RULES.all.$ref.code(e,"$ref")+" ",m&&(a+=" } if (errors === ",a+=g?"0":"errs_"+u,a+=") { ",E+="}");else{var C=e.RULES;if(C)for(var I=-1,A=C.length-1;I<A;)if(W(x=C[I+=1])){if(x.type&&(a+=" if ("+e.util.checkDataType(x.type,f,e.opts.strictNumbers)+") { "),e.opts.useDefaults)if("object"==x.type&&e.schema.properties){h=e.schema.properties;var L=Object.keys(h);if(L)for(var V,N=-1,q=L.length-1;N<q;)if(void 0!==(Q=h[V=L[N+=1]]).default){var z=f+e.util.getProperty(V);if(e.compositeRule){if(e.opts.strictDefaults){if(P="default is ignored for: "+z,"log"!==e.opts.strictDefaults)throw new Error(P);e.logger.warn(P)}}else a+=" if ("+z+" === undefined ","empty"==e.opts.useDefaults&&(a+=" || "+z+" === null || "+z+" === '' "),a+=" ) "+z+" = ","shared"==e.opts.useDefaults?a+=" "+e.useDefault(Q.default)+" ":a+=" "+JSON.stringify(Q.default)+" ",a+="; "}}else if("array"==x.type&&Array.isArray(e.schema.items)){var U=e.schema.items;if(U){O=-1;for(var Q,M=U.length-1;O<M;)if(void 0!==(Q=U[O+=1]).default)if(z=f+"["+O+"]",e.compositeRule){if(e.opts.strictDefaults){if(P="default is ignored for: "+z,"log"!==e.opts.strictDefaults)throw new Error(P);e.logger.warn(P)}}else a+=" if ("+z+" === undefined ","empty"==e.opts.useDefaults&&(a+=" || "+z+" === null || "+z+" === '' "),a+=" ) "+z+" = ","shared"==e.opts.useDefaults?a+=" "+e.useDefault(Q.default)+" ":a+=" "+JSON.stringify(Q.default)+" ",a+="; "}}var H,J=x.rules;if(J)for(var B,K=-1,Z=J.length-1;K<Z;)if(X(B=J[K+=1])){var G=B.code(e,B.keyword,x.type);G&&(a+=" "+G+" ",m&&(b+="}"))}if(m&&(a+=" "+b+" ",b=""),x.type&&(a+=" } ",w&&w===x.type&&!S))a+=" else { ",d=e.schemaPath+".type",p=e.errSchemaPath+"/type",(H=H||[]).push(a),a="",!1!==e.createErrors?(a+=" { keyword: 'type' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { type: '",a+=_?""+w.join(","):""+w,a+="' } ",!1!==e.opts.messages&&(a+=" , message: 'should be ",a+=_?""+w.join(","):""+w,a+="' "),e.opts.verbose&&(a+=" , schema: validate.schema"+d+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+f+" "),a+=" } "):a+=" {} ",y=a,a=H.pop(),!e.compositeRule&&m?e.async?a+=" throw new ValidationError(["+y+"]); ":a+=" validate.errors = ["+y+"]; return false; ":a+=" var err = "+y+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",a+=" } ";m&&(a+=" if (errors === ",a+=g?"0":"errs_"+u,a+=") { ",E+="}")}}function W(e){for(var t=e.rules,r=0;r<t.length;r++)if(X(t[r]))return!0}function X(t){return void 0!==e.schema[t.keyword]||t.implements&&function(t){for(var r=t.implements,a=0;a<r.length;a++)if(void 0!==e.schema[r[a]])return!0}(t)}return m&&(a+=" "+E+" "),g?(s?(a+=" if (errors === 0) return data;           ",a+=" else throw new ValidationError(vErrors); "):(a+=" validate.errors = vErrors; ",a+=" return errors === 0;       "),a+=" }; return validate;"):a+=" var "+v+" = errors === errs_"+u+";",a}},4895:(e,t,r)=>{"use strict";var a=/^[a-z_$][a-z0-9_$-]*$/i,s=r(4165),o=r(1128);e.exports={add:function(e,t){var r=this.RULES;if(r.keywords[e])throw new Error("Keyword "+e+" is already defined");if(!a.test(e))throw new Error("Keyword "+e+" is not a valid identifier");if(t){this.validateKeyword(t,!0);var o=t.type;if(Array.isArray(o))for(var n=0;n<o.length;n++)l(e,o[n],t);else l(e,o,t);var i=t.metaSchema;i&&(t.$data&&this._opts.$data&&(i={anyOf:[i,{$ref:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"}]}),t.validateSchema=this.compile(i,!0))}function l(e,t,a){for(var o,n=0;n<r.length;n++){var i=r[n];if(i.type==t){o=i;break}}o||(o={type:t,rules:[]},r.push(o));var l={keyword:e,definition:a,custom:!0,code:s,implements:a.implements};o.rules.push(l),r.custom[e]=l}return r.keywords[e]=r.all[e]=!0,this},get:function(e){var t=this.RULES.custom[e];return t?t.definition:this.RULES.keywords[e]||!1},remove:function(e){var t=this.RULES;delete t.keywords[e],delete t.all[e],delete t.custom[e];for(var r=0;r<t.length;r++)for(var a=t[r].rules,s=0;s<a.length;s++)if(a[s].keyword==e){a.splice(s,1);break}return this},validate:function e(t,r){e.errors=null;var a=this._validateKeyword=this._validateKeyword||this.compile(o,!0);if(a(t))return!0;if(e.errors=a.errors,r)throw new Error("custom keyword definition is invalid: "+this.errorsText(a.errors));return!1}}},4063:e=>{"use strict";e.exports=function e(t,r){if(t===r)return!0;if(t&&r&&"object"==typeof t&&"object"==typeof r){if(t.constructor!==r.constructor)return!1;var a,s,o;if(Array.isArray(t)){if((a=t.length)!=r.length)return!1;for(s=a;0!=s--;)if(!e(t[s],r[s]))return!1;return!0}if(t.constructor===RegExp)return t.source===r.source&&t.flags===r.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===r.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===r.toString();if((a=(o=Object.keys(t)).length)!==Object.keys(r).length)return!1;for(s=a;0!=s--;)if(!Object.prototype.hasOwnProperty.call(r,o[s]))return!1;for(s=a;0!=s--;){var n=o[s];if(!e(t[n],r[n]))return!1}return!0}return t!=t&&r!=r}},5035:e=>{"use strict";e.exports=function(e,t){t||(t={}),"function"==typeof t&&(t={cmp:t});var r,a="boolean"==typeof t.cycles&&t.cycles,s=t.cmp&&(r=t.cmp,function(e){return function(t,a){var s={key:t,value:e[t]},o={key:a,value:e[a]};return r(s,o)}}),o=[];return function e(t){if(t&&t.toJSON&&"function"==typeof t.toJSON&&(t=t.toJSON()),void 0!==t){if("number"==typeof t)return isFinite(t)?""+t:"null";if("object"!=typeof t)return JSON.stringify(t);var r,n;if(Array.isArray(t)){for(n="[",r=0;r<t.length;r++)r&&(n+=","),n+=e(t[r])||"null";return n+"]"}if(null===t)return"null";if(-1!==o.indexOf(t)){if(a)return JSON.stringify("__cycle__");throw new TypeError("Converting circular structure to JSON")}var i=o.push(t)-1,l=Object.keys(t).sort(s&&s(t));for(n="",r=0;r<l.length;r++){var u=l[r],c=e(t[u]);c&&(n&&(n+=","),n+=JSON.stringify(u)+":"+c)}return o.splice(i,1),"{"+n+"}"}}(e)}},9461:e=>{"use strict";var t=e.exports=function(e,t,a){"function"==typeof t&&(a=t,t={}),r(t,"function"==typeof(a=t.cb||a)?a:a.pre||function(){},a.post||function(){},e,"",e)};function r(e,a,s,o,n,i,l,u,c,h){if(o&&"object"==typeof o&&!Array.isArray(o)){for(var d in a(o,n,i,l,u,c,h),o){var p=o[d];if(Array.isArray(p)){if(d in t.arrayKeywords)for(var m=0;m<p.length;m++)r(e,a,s,p[m],n+"/"+d+"/"+m,i,n,d,o,m)}else if(d in t.propsKeywords){if(p&&"object"==typeof p)for(var f in p)r(e,a,s,p[f],n+"/"+d+"/"+f.replace(/~/g,"~0").replace(/\//g,"~1"),i,n,d,o,f)}else(d in t.keywords||e.allKeys&&!(d in t.skipKeywords))&&r(e,a,s,p,n+"/"+d,i,n,d,o)}s(o,n,i,l,u,c,h)}}t.keywords={additionalItems:!0,items:!0,contains:!0,additionalProperties:!0,propertyNames:!0,not:!0},t.arrayKeywords={items:!0,allOf:!0,anyOf:!0,oneOf:!0},t.propsKeywords={definitions:!0,properties:!0,patternProperties:!0,dependencies:!0},t.skipKeywords={default:!0,enum:!0,const:!0,required:!0,maximum:!0,minimum:!0,exclusiveMaximum:!0,exclusiveMinimum:!0,multipleOf:!0,maxLength:!0,minLength:!0,pattern:!0,format:!0,maxItems:!0,minItems:!0,uniqueItems:!0,maxProperties:!0,minProperties:!0}},8831:function(e,t){"use strict";var r=this&&this.__awaiter||function(e,t,r,a){return new(r||(r=Promise))((function(s,o){function n(e){try{l(a.next(e))}catch(e){o(e)}}function i(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(n,i)}l((a=a.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.JsonTool=void 0,t.JsonTool=class{constructor(e,t=null){var r,a;this.elementState={},this.undoStack=[],this.redoStack=[],this.undoing=!1,this.containerElement=e,this.validator=null!=t?t:()=>({valid:!0}),this.schema=null,this.root=document.createElement("div"),this.root.style.fontFamily="monospace",this.root.style.marginLeft="30px",this.root.classList.add("json-tool"),this.rootObject=null,this.rootElement=null,this.errorMessages=document.createElement("div"),this.errorMessages.classList.add("json-tool-errors");const s=document.createElement("div");this.undoButton=document.createElement("button"),this.undoButton.innerText="⤶ Undo",this.undoButton.onclick=()=>this.undo(),s.appendChild(this.undoButton),this.redoButton=document.createElement("button"),this.redoButton.innerText="⤷ Redo",this.redoButton.style.marginLeft="5px",this.redoButton.onclick=()=>this.redo(),s.appendChild(this.redoButton);const o=document.createElement("iframe");o.style.width="100%",o.style.height="100%",o.style.overflow="scroll",o.style.border="0",e.innerHTML="",e.appendChild(o),this.iframeBody=null===(a=o.contentDocument||(null===(r=o.contentWindow)||void 0===r?void 0:r.document))||void 0===a?void 0:a.querySelector("body"),this.iframeBody.append(this.root),this.createCss(this.iframeBody),o.onload=()=>{var e,t;this.iframeBody=null===(t=o.contentDocument||(null===(e=o.contentWindow)||void 0===e?void 0:e.document))||void 0===t?void 0:t.querySelector("body"),this.iframeBody.append(s),this.iframeBody.append(this.root),this.createCss(this.iframeBody),this.iframeBody.appendChild(this.errorMessages)}}deleteChild(e){}getState(){return this.elementState}load(e,t,s){return r(this,void 0,void 0,(function*(){if(this.validator=null!=s?s:this.validator,this.schema=e,this.root.innerHTML="",e.title){const t=document.createElement("h3");t.textContent=e.title,a.addDescription(t,e.description,null==e?void 0:e.examples),this.root.appendChild(t)}this.rootObject=document.createElement("div"),this.root.appendChild(this.rootObject),this.rootElement=new a("","root",this.rootObject,this.schema,t,this),yield this.validate()}))}hide(){this.containerElement.innerHTML=""}setValidator(e){this.validator=e}getValue(){var e;return null===(e=this.rootElement)||void 0===e?void 0:e.getValue()}update(){var e;return r(this,void 0,void 0,(function*(){if(!this.rootObject)return;let t=1;null===(e=this.rootObject)||void 0===e||e.querySelectorAll(".line-number").forEach((e=>{e.innerText=t.toString(),t++})),yield this.validate()}))}validate(){var e;return r(this,void 0,void 0,(function*(){if(yield new Promise((e=>window.setTimeout(e,1))),!this.schema||!this.errorMessages)return;const t=this.validator(this.getValue(),this.schema);this.errorMessages.innerHTML="",t.valid||(this.errorMessages.innerHTML=(null!==(e=t.errors)&&void 0!==e?e:[]).map((e=>"string"==typeof e?e:e.message)).join("\n")),yield this.pushUndoState()}))}pushUndoState(){return r(this,void 0,void 0,(function*(){if(this.undoing)return;this.undoing=!0,yield new Promise((e=>window.setTimeout(e,1)));const e=this.getValue();this.undoStack.length>0&&JSON.stringify(e)===JSON.stringify(this.undoStack[0])?this.undoing=!1:(this.undoStack.unshift(e),this.redoStack=[],console.log(this.undoStack,this.redoStack),this.undoing=!1,this.updateUndoRedoButtons())}))}undo(){return r(this,void 0,void 0,(function*(){if(this.undoStack.length<2||this.undoing||!this.schema)return;this.undoing=!0,this.redoStack.unshift(this.getValue()),this.undoStack.splice(0,1);const e=this.undoStack[0];yield this.load(this.schema,e,this.validator),this.undoing=!1,this.updateUndoRedoButtons()}))}redo(){return r(this,void 0,void 0,(function*(){if(this.redoStack.length<1||this.undoing||!this.schema)return;this.undoing=!0;const e=this.redoStack.splice(0,1)[0];this.undoStack.unshift(e),yield this.load(this.schema,e,this.validator),this.undoing=!1,this.updateUndoRedoButtons()}))}updateUndoRedoButtons(){this.undoButton.disabled=this.undoStack.length<2,this.redoButton.disabled=this.redoStack.length<1}createCss(e){const t=document.createElement("style");e.appendChild(t),t.innerHTML="\n            .json-tool-btn\n             {\n                border: 1px black solid;\n                cursor: pointer;\n                display: block;\n             }\n              .json-tool-block > .json-tool-btn {\n                margin-top: -17px;\n                margin-left: -40px;\n                position: absolute;\n                opacity: 0;\n              }\n              .json-tool-block:hover > .json-tool-btn\n              {\n                opacity: 1;\n              }\n              .json-tool-value > .json-tool-btn {\n                margin-left: 10px;\n                display: inline-block;\n                position: absolute;\n                opacity :0;\n              }\n              .json-tool-value:hover > .json-tool-btn\n              {\n                opacity :1;\n              }\n              .json-tool-key > .json-tool-btns {\n                margin-left: -36px;\n                display: inline-block;\n                position: absolute;\n                width: 32px;\n                text-align: right;\n                opacity: 0;\n              }\n              .json-tool-key:hover > .json-tool-btns\n              {\n                opacity: 1;\n              }\n\n              .json-tool-key > .json-tool-btns > .json-tool-btn {\n                display: inline-block;\n                margin-right: 2px;\n              }\n              .json-tool-types > .json-tool-type\n              {\n                padding:0;\n                margin:0;\n                border:0;\n              }\n              .json-tool-value > .json-tool-types\n              {\n                float:right;\n                opacity: 0;\n              }\n              .json-tool-value.json-tool-object > .json-tool-types\n              {\n                float:none;\n                position: absolute;\n                margin-left: 15px;\n              }\n              .json-tool-value:hover > .json-tool-types\n              {\n                opacity: 1;\n              }\n\n              .json-tool-block.opened > .json-tool-key {display: block}\n              .json-tool-block.closed > .json-tool-key {display: none}\n\n              .line-number\n              {\n                position: absolute;\n                left: 0;\n                text-align: right;\n                width: 20px;\n              }\n              .json-tool-value.json-tool-object > .line-number\n              {\n                margin-top: -15px;\n              }\n              .json-tool input, .json-tool select, .json-tool textarea\n              {\n                border: 0;\n                background-color: #ece9e9;\n                padding: 0;\n                margin: 1px;\n              }\n\n                .json-tool-errors {\n                    color: red;\n                    white-space: pre;\n                    font-family: monospace;\n                    line-height: 2em;\n                    font-weight: bold;\n                    font-size: 1.2em;\n                }\n"}};class a{constructor(e,t,r,s,o,n){this.arrayElements=[],this.objectElements={},this.element=r,this.setStyle(),this.schema=s,this.parent=n,this.key=e,this.path=t,this.currentValues={},this.types=s?a.getDefaultAvailableTypes(s):[];const i=a.getType(o);if(this.currentType="","undefined"!==i)this.currentType=i,this.types.push(i),this.setCurrentTypeValue(o);else if(this.schema){const e=a.getDefaultValue(this.schema);this.currentType=e.type,this.setCurrentTypeValue(e.value)}this.types=[...new Set(this.types)],this.updateElement()}update(){this.parent.update()}validate(){this.parent.validate()}getPath(e){for(let t=0;t<this.arrayElements.length;t++)if(this.arrayElements[t]===e)return`${this.path}.${t}`;for(const t in this.objectElements)if(this.objectElements[t]===e)return`${this.path}.${t}`;return`${this.path}.?`}getState(){return this.parent.getState()}deleteChild(e){if("string"==typeof e){const t=this.getValue();delete t[e],this.setCurrentTypeValue(t),this.updateElement()}else if("number"==typeof e){const t=[...this.getValue()];t.splice(e,1),this.setCurrentTypeValue(t),this.updateElement()}}setCurrentTypeValue(e){this.currentValues[this.currentType]=void 0!==e?JSON.parse(JSON.stringify(e)):void 0,this.validate&&this.validate()}static addDescription(e,t,r){r&&(t=`${t?`${t}\n`:""}Examples:\n${r.map((e=>JSON.stringify(e))).join(",\n")}`),t&&(e.title=t,e.style.textDecoration="underline dotted",e.style.cursor="help")}static getType(e){return void 0===e?"undefined":Array.isArray(e)?"array":null===e?"null":typeof e}static isInteger(e){if(!e)return!1;const t=Array.isArray(e.type)?e.type:[e.type];return t.includes("integer")&&!t.includes("number")}static getDefaultAvailableTypes(e){let t=Array.isArray(e.type)?[...e.type]:[e.type];return t=t.map((e=>"integer"===e?"number":e)),t}static getDefaultValue(e){const t=this.getDefaultAvailableTypes(e);return void 0!==e.default?{type:this.getType(e.default),value:e.default}:e.examples&&e.examples.length>0?{type:this.getType(e.examples[0]),value:e.examples[0]}:{type:t[0],value:this.getDefaultValueForType(e,t[0])}}static getDefaultValueForType(e,t){var r,a,s;if("null"===t)return null;if("number"===t)return this.isInteger(e)?Math.ceil(null!==(r=null==e?void 0:e.minimum)&&void 0!==r?r:0):null!==(a=null==e?void 0:e.minimum)&&void 0!==a?a:0;if("string"===t)return(null==e?void 0:e.enum)?e.enum[0]:"color"===(null==e?void 0:e.format)?"#000000":"date"===(null==e?void 0:e.format)?(new Date).toDateString():"";if("boolean"===t)return!1;if("array"===t)return[];if("object"===t){const t={};if(null==e?void 0:e.properties)for(const r of null!==(s=e.required)&&void 0!==s?s:[]){if(!e.properties.hasOwnProperty(r))continue;const a=this.getDefaultValue(e.properties[r]);t[r]=a.value}return t}}updateElement(){var e,t,r,s,o,n,i,l,u,c,h,d,p,m,f,v,y,g,P,b,E,w,_,S,x;this.objectElements={},this.arrayElements=[],this.element.innerHTML="",this.element.style.display="inline-block",this.element.classList.remove("json-tool-object"),this.element.append(this.createLineNumber());const j=this.currentType,T=null!==(e=this.currentValues[j])&&void 0!==e?e:this.currentValues[j]=a.getDefaultValueForType(this.schema,j),$=document.createElement("div");if($.classList.add("json-tool-types"),this.element.append($),this.types.length>1||j!==this.types[0]){const e=document.createElement("select");e.classList.add("json-tool-type");for(const t of this.types){const r=document.createElement("option");r.innerText=t,r.value=t,e.append(r)}e.value=this.currentType,e.onchange=()=>{this.changeType(e.value)},$.append(e)}const F=document.createElement("div");if(F.classList.add("json-tool-btn"),F.style.display="inline-block",F.style.marginLeft="5px",F.innerText="*",F.onclick=()=>{var e;const t=["object","array","boolean","string","number","null","undefined"],r=null!==(e=window.prompt(`Enter new type:\n${t.join(", ")}`))&&void 0!==e?e:"";t.includes(r)&&("undefined"===r?this.parent.deleteChild(this.key):this.changeType(r))},$.append(F),"object"===j){this.element.append(this.createLineNumber(!0)),this.element.style.display="block",this.element.classList.add("json-tool-object"),this.element.append("{");const e=this.createBlock();this.element.append(e);const i=document.createElement("div");i.classList.add("json-tool-btn"),i.innerText="+",this.element.append(i),i.onclick=()=>{const e=prompt("Add new key?");if(e){const t=this.getValue();t[e]=null,this.setCurrentTypeValue(t),this.updateElement()}},this.element.append("}"),this.element.append(this.createLineNumber());for(const a in null!=T?T:{}){const n=this.createObjectKeyValuePair(a,(null===(t=this.schema)||void 0===t?void 0:t.properties)?this.schema.properties[a]:null,T[a]);e.append(n);const i=document.createElement("div");if(n.prepend(i),i.classList.add("json-tool-btns"),(null===(r=this.schema)||void 0===r?void 0:r.properties)&&!this.schema.properties.hasOwnProperty(a)){const e=document.createElement("div");e.classList.add("json-tool-btn"),e.innerText="X",e.onclick=()=>{confirm(`Are you sure you want to delete the key ${a}?`)&&this.deleteChild(a)},i.append(e)}else if(!(null===(o=null===(s=this.schema)||void 0===s?void 0:s.required)||void 0===o?void 0:o.includes(a))){const e=document.createElement("div");e.classList.add("json-tool-btn"),e.innerText="∽",e.onclick=()=>{confirm(`Are you sure you want to delete the key ${a}?`)&&this.deleteChild(a)},i.append(e)}}if(null===(n=this.schema)||void 0===n?void 0:n.properties)for(const t in this.schema.properties){if(null==T?void 0:T.hasOwnProperty(t))continue;const r=this.createObjectKeyValuePair(t,this.schema.properties[t],void 0,!0);e.append(r),r.style.textDecoration="line-through 2px";const s=document.createElement("div");r.prepend(s),s.classList.add("json-tool-btns");const o=document.createElement("div");o.classList.add("json-tool-btn"),o.innerText="≁",o.onclick=()=>{var e;if(null===(e=this.schema)||void 0===e?void 0:e.properties){const e=this.getValue();e[t]=a.getDefaultValue(this.schema.properties[t]).value,this.setCurrentTypeValue(e),this.updateElement()}},s.append(o)}}else if("array"===j){this.element.append(this.createLineNumber(!0)),this.element.style.display="block",this.element.classList.add("json-tool-object"),this.element.append("[");const e=this.createBlock();this.element.append(e);const t=document.createElement("div");t.classList.add("json-tool-btn"),t.innerText="+",this.element.append(t),t.onclick=()=>{var e,t;const r=[...this.getValue()];if(r.length===(null===(e=this.schema)||void 0===e?void 0:e.maxItems)&&!confirm("This array is at max capacity - really add more?"))return;const s=(null===(t=this.schema)||void 0===t?void 0:t.items)?a.getDefaultValue(this.schema.items).value:null;r.push(s),this.currentType=j,this.setCurrentTypeValue(r),this.setIsOpened(!0),this.updateElement()},this.element.append("]"),this.element.append(this.createLineNumber());const r=null!=T?T:[];for(let t=0;t<r.length;t++){const r=t,a=this.createObjectKeyValuePair(t,(null===(i=this.schema)||void 0===i?void 0:i.items)?this.schema.items:null,T[t]);e.append(a);const s=document.createElement("div");a.prepend(s),s.classList.add("json-tool-btns");const o=document.createElement("div");o.classList.add("json-tool-btn"),o.innerText="X",o.onclick=()=>{var e;const t=[...this.getValue()];t.length!==(null===(e=this.schema)||void 0===e?void 0:e.minItems)?confirm(`Are you sure you want to delete element ${r}?`)&&this.deleteChild(r):alert(`${this.path} needs at least ${t.length} elements.`)},s.append(o);const n=document.createElement("div");n.classList.add("json-tool-btn"),n.innerText="ᐃ",n.onclick=()=>{let e=[...this.getValue()];const t=e.splice(r,1);e=e.slice(0,r-1).concat(t).concat(e.slice(r-1)),this.setCurrentTypeValue(e),this.updateElement()},s.append(n);const l=document.createElement("div");l.classList.add("json-tool-btn"),l.innerText="ᐁ",l.onclick=()=>{let e=[...this.getValue()];const t=e.splice(r,1);e=e.slice(0,r+1).concat(t).concat(e.slice(r+1)),this.setCurrentTypeValue(e),this.updateElement()},s.append(l)}}else if("boolean"===j){const e=document.createElement("input");e.type="checkbox",e.checked=T,e.onchange=()=>{this.setCurrentTypeValue(e.checked)},this.element.append(e)}else if("string"===j)if(null===(l=this.schema)||void 0===l?void 0:l.enum){const e=document.createElement("select");for(const t of[...new Set(this.schema.enum.concat(T))]){const r=document.createElement("option");r.innerText=t,r.value=t,e.append(r)}e.value=T,e.onchange=()=>{this.setCurrentTypeValue(e.value)},this.element.append(e)}else if("textarea"===(null===(u=this.schema)||void 0===u?void 0:u.format)){const e=document.createElement("textarea");e.value=T,e.minLength=null!==(h=null===(c=this.schema)||void 0===c?void 0:c.minLength)&&void 0!==h?h:0,e.maxLength=null!==(p=null===(d=this.schema)||void 0===d?void 0:d.maxLength)&&void 0!==p?p:99999999999999,e.onchange=()=>{this.setCurrentTypeValue(e.value)},this.element.append(e)}else if("date"===(null===(m=this.schema)||void 0===m?void 0:m.format)){const e=document.createElement("input");e.type="date",e.onchange=()=>{var t,r;this.setCurrentTypeValue(null!==(r=null===(t=e.valueAsDate)||void 0===t?void 0:t.toDateString())&&void 0!==r?r:"")},this.element.append(e),e.valueAsDate=new Date(T)}else{const e=document.createElement("input");e.type="text",(null===(f=this.schema)||void 0===f?void 0:f.format)&&["password","email","color","url"].includes(this.schema.format)&&(e.type=this.schema.format),e.value=T,e.minLength=null!==(y=null===(v=this.schema)||void 0===v?void 0:v.minLength)&&void 0!==y?y:0,e.maxLength=null!==(P=null===(g=this.schema)||void 0===g?void 0:g.maxLength)&&void 0!==P?P:99999999999999,e.onchange=()=>{this.setCurrentTypeValue(e.value)},this.element.append(e)}else if("null"===j)this.element.append("null");else if("number"===j){const e=document.createElement("input");e.type="number",e.value=T.toString(),e.min=null!==(w=null===(E=null===(b=this.schema)||void 0===b?void 0:b.minimum)||void 0===E?void 0:E.toString())&&void 0!==w?w:"",e.max=null!==(x=null===(S=null===(_=this.schema)||void 0===_?void 0:_.maximum)||void 0===S?void 0:S.toString())&&void 0!==x?x:"",a.isInteger(this.schema)&&(e.step="1"),e.onchange=()=>{this.setCurrentTypeValue(parseFloat(e.value))},this.element.append(e)}else this.element.append(`[${j}] : ${T}`);this.update()}createLineNumber(e=!1){const t=document.createElement("div");return t.classList.add("line-number"),e&&(t.style.marginTop="0"),t}isOpened(){var e;return null===(e=this.parent.getState()[`${this.path}_opened`])||void 0===e||e}setIsOpened(e){this.parent.getState()[`${this.path}_opened`]=e}createBlock(){const e=document.createElement("div");e.classList.add("json-tool-block"),e.style.paddingLeft="25px",e.style.borderLeft="1px dashed black",e.style.marginLeft="3px";const t=document.createElement("div");"root"!==this.path&&e.append(t),t.classList.add("json-tool-btn");const r=r=>{t.innerText=r?"ᐯ":"ᐳ",e.classList.remove("opened","closed"),e.classList.add(r?"opened":"closed")};return t.onclick=()=>{const e=!this.isOpened();this.setIsOpened(e),r(e)},r(this.isOpened()),e}createObjectKeyValuePair(e,t,r,s=!1){var o;const n=document.createElement("div"),i=e;e="number"==typeof e?(null==t?void 0:t.title)?`${t.title} ${e}`:e:null!==(o=null==t?void 0:t.title)&&void 0!==o?o:e;const l=document.createElement("span");if(l.innerText=e.toString(),a.addDescription(l,null==t?void 0:t.description,null==t?void 0:t.examples),n.append(l),n.classList.add("json-tool-key"),n.append(": "),!s){const e=document.createElement("div"),s=new a(i,`${this.path}.${i}`,e,t,r,this);"array"===this.currentType?this.arrayElements.push(s):"object"===this.currentType&&(this.objectElements[i]=s),n.append(e)}return n}changeType(e){var t;this.currentType=e,this.currentValues.hasOwnProperty(e)||(void 0!==(null===(t=this.schema)||void 0===t?void 0:t.default)&&a.getType(this.schema.default)===e?this.setCurrentTypeValue(this.schema.default):this.setCurrentTypeValue(a.getDefaultValueForType(this.schema,e))),this.updateElement()}setStyle(){this.element.style.whiteSpace="pre",this.element.classList.add("json-tool-value")}getValue(){var e;let t;if("array"===this.currentType)t=this.arrayElements.map((e=>e.getValue()));else if("object"===this.currentType){const e={};for(const t in this.objectElements)e[t]=this.objectElements[t].getValue();t=e}else t=null!==(e=this.currentValues[this.currentType])&&void 0!==e?e:a.getDefaultValueForType(this.schema,this.currentType);return this.currentValues[this.currentType]=t,t}}},7271:function(e,t){"use strict";var r=this&&this.__awaiter||function(e,t,r,a){return new(r||(r=Promise))((function(s,o){function n(e){try{l(a.next(e))}catch(e){o(e)}}function i(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(n,i)}l((a=a.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var r,a,s,o,n={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(i){return function(l){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,i[0]&&(n=0)),n;)try{if(r=1,a&&(s=2&i[0]?a.return:i[0]?a.throw||((s=a.return)&&s.call(a),0):a.next)&&!(s=s.call(a,i[1])).done)return s;switch(a=0,s&&(i=[2&i[0],s.value]),i[0]){case 0:case 1:s=i;break;case 4:return n.label++,{value:i[1],done:!1};case 5:n.label++,a=i[1],i=[0];continue;case 7:i=n.ops.pop(),n.trys.pop();continue;default:if(!((s=(s=n.trys).length>0&&s[s.length-1])||6!==i[0]&&2!==i[0])){n=0;continue}if(3===i[0]&&(!s||i[1]>s[0]&&i[1]<s[3])){n.label=i[1];break}if(6===i[0]&&n.label<s[1]){n.label=s[1],s=i;break}if(s&&n.label<s[2]){n.label=s[2],n.ops.push(i);break}s[2]&&n.ops.pop(),n.trys.pop();continue}i=t.call(e,n)}catch(e){i=[6,e],a=0}finally{r=s=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.ApiUtils=void 0;var s=function(){function e(){}return e.run=function(e,t){return r(this,void 0,void 0,(function(){var r,s;return a(this,(function(a){switch(a.label){case 0:return[4,fetch(e,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)})];case 1:return[4,(r=a.sent()).json()];case 2:return s=a.sent(),[2,{status:r.status,body:s}]}}))}))},e}();t.ApiUtils=s},6571:function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.Schema=void 0;var tsch_1=__webpack_require__(6936),ajv_1=__importDefault(__webpack_require__(5096)),Schema=function(){function Schema(e,t,r,a,s){this.schemaFile=e,this.schemaContent=t,this.regex=Schema.getRegex(r),this.jsonSchema=a,this.tsch=s}return Schema.prototype.getSchemaFile=function(){return this.schemaFile},Schema.prototype.getSchemaContent=function(){return this.schemaContent},Schema.prototype.getRegex=function(){return this.regex},Schema.prototype.validate=function(e){var t;if(this.tsch)return this.tsch.validate(e);if(this.jsonSchema){var r=(new ajv_1.default).compile(this.jsonSchema),a=r(e),s=a?[]:(null!==(t=r.errors)&&void 0!==t?t:[]).map((function(e){var t;return"".concat(e.dataPath," ").concat(null!==(t=e.message)&&void 0!==t?t:"")}));return{valid:!!a,errors:s}}return{valid:!0,errors:[]}},Schema.prototype.getJsonSchema=function(){return this.tsch?this.tsch.getJsonSchemaProperty():this.jsonSchema},Schema.parseSchema=function(file,content,result){result||(result=[]);var addJsonSchema=function(e,t){return Schema.addJsonSchema(null!=result?result:[],file,content,e,t)},addTsch=function(e,t){return Schema.addTsch(null!=result?result:[],file,content,e,t)},tsch=tsch_1.tsch;try{eval(content)}catch(e){console.warn("Exception during ".concat(file),e)}return result},Schema.getRegex=function(e){return new RegExp("^"+e.split("*").map((function(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")})).join(".*")+"$")},Schema.addJsonSchema=function(e,t,r,a,s){e.push(new Schema(t,r,a,s))},Schema.addTsch=function(e,t,r,a,s){e.push(new Schema(t,r,a,void 0,s))},Schema}();exports.Schema=Schema},4102:function(e,t,r){"use strict";var a=this&&this.__awaiter||function(e,t,r,a){return new(r||(r=Promise))((function(s,o){function n(e){try{l(a.next(e))}catch(e){o(e)}}function i(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(n,i)}l((a=a.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var r,a,s,o,n={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(i){return function(l){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,i[0]&&(n=0)),n;)try{if(r=1,a&&(s=2&i[0]?a.return:i[0]?a.throw||((s=a.return)&&s.call(a),0):a.next)&&!(s=s.call(a,i[1])).done)return s;switch(a=0,s&&(i=[2&i[0],s.value]),i[0]){case 0:case 1:s=i;break;case 4:return n.label++,{value:i[1],done:!1};case 5:n.label++,a=i[1],i=[0];continue;case 7:i=n.ops.pop(),n.trys.pop();continue;default:if(!((s=(s=n.trys).length>0&&s[s.length-1])||6!==i[0]&&2!==i[0])){n=0;continue}if(3===i[0]&&(!s||i[1]>s[0]&&i[1]<s[3])){n.label=i[1];break}if(6===i[0]&&n.label<s[1]){n.label=s[1],s=i;break}if(s&&n.label<s[2]){n.label=s[2],n.ops.push(i);break}s[2]&&n.ops.pop(),n.trys.pop();continue}i=t.call(e,n)}catch(e){i=[6,e],a=0}finally{r=s=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.ServerUtils=void 0;var o=r(7271),n=r(6571),i=function(){function e(){}return e.list=function(){return a(this,void 0,void 0,(function(){return s(this,(function(e){switch(e.label){case 0:return[4,o.ApiUtils.run("/api",{command:"list"})];case 1:return[2,e.sent()]}}))}))},e.load=function(e,t){return a(this,void 0,void 0,(function(){var r;return s(this,(function(a){switch(a.label){case 0:return[4,o.ApiUtils.run("/api",{command:"load",schema:e,json:t})];case 1:return(r=a.sent()).body.schemaContent?(r.body.schema=n.Schema.parseSchema(e,r.body.schemaContent)[0],[2,r]):[2,r]}}))}))},e.save=function(e,t,r){return a(this,void 0,void 0,(function(){return s(this,(function(a){switch(a.label){case 0:return[4,o.ApiUtils.run("/api",{command:"save",schema:e,json:t,value:r})];case 1:return[2,a.sent()]}}))}))},e}();t.ServerUtils=i},4973:function(e,t,r){"use strict";var a=this&&this.__awaiter||function(e,t,r,a){return new(r||(r=Promise))((function(s,o){function n(e){try{l(a.next(e))}catch(e){o(e)}}function i(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(n,i)}l((a=a.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var r,a,s,o,n={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(i){return function(l){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,i[0]&&(n=0)),n;)try{if(r=1,a&&(s=2&i[0]?a.return:i[0]?a.throw||((s=a.return)&&s.call(a),0):a.next)&&!(s=s.call(a,i[1])).done)return s;switch(a=0,s&&(i=[2&i[0],s.value]),i[0]){case 0:case 1:s=i;break;case 4:return n.label++,{value:i[1],done:!1};case 5:n.label++,a=i[1],i=[0];continue;case 7:i=n.ops.pop(),n.trys.pop();continue;default:if(!((s=(s=n.trys).length>0&&s[s.length-1])||6!==i[0]&&2!==i[0])){n=0;continue}if(3===i[0]&&(!s||i[1]>s[0]&&i[1]<s[3])){n.label=i[1];break}if(6===i[0]&&n.label<s[1]){n.label=s[1],s=i;break}if(s&&n.label<s[2]){n.label=s[2],n.ops.push(i);break}s[2]&&n.ops.pop(),n.trys.pop();continue}i=t.call(e,n)}catch(e){i=[6,e],a=0}finally{r=s=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.Client=void 0;var o=r(4102),n=r(8831),i=function(){function e(){var e=this;this.schemas={},this.schema=null,this.jsonTool=null,this.schemaFile=null,this.jsonFile=null;var t=document.querySelector("#menu");this.jsonToolRoot=document.querySelector("#json-tool"),this.select=document.createElement("select"),t.appendChild(this.select),this.select.onchange=function(){return e.onFileChange()},this.buttons=document.createElement("div");var r=document.createElement("button");r.innerText="Save changes",r.onclick=function(){return e.save()};var a=document.createElement("button");a.innerText="Discard changes",a.onclick=function(){return e.close()},this.buttons.appendChild(r),this.buttons.appendChild(a),t.appendChild(this.buttons),this.setJsonToolVisible(!1)}return e.prototype.close=function(){this.setJsonToolVisible(!1)},e.prototype.setJsonToolVisible=function(e){var t;this.select.style.display=e?"none":"",this.buttons.style.display=e?"":"none",e||(null===(t=this.jsonTool)||void 0===t||t.hide(),this.loadFiles())},e.prototype.onFileChange=function(){return a(this,void 0,void 0,(function(){var e,t,r,a;return s(this,(function(s){return e=this.select.value,t=e.split("@"),r=t[0],a=t[1],this.loadFile(r,a),[2]}))}))},e.prototype.loadFile=function(e,t){return a(this,void 0,void 0,(function(){var r,a;return s(this,(function(s){switch(s.label){case 0:return[4,o.ServerUtils.load(e,t)];case 1:return(r=s.sent()).body.schema&&(this.schema=r.body.schema,(a=r.body.schema.getJsonSchema())&&(this.schemaFile=e,this.jsonFile=t,this.setJsonToolVisible(!0),this.jsonTool=new n.JsonTool(this.jsonToolRoot),this.jsonTool.load(a,r.body.value,(function(e){return r.body.schema.validate(e)})))),[2]}}))}))},e.prototype.save=function(){return a(this,void 0,void 0,(function(){var e,t;return s(this,(function(r){switch(r.label){case 0:return this.schema&&this.jsonTool&&this.jsonFile&&this.schemaFile?(e=this.jsonTool.getValue(),this.schema.validate(e).valid?[4,o.ServerUtils.save(this.schemaFile,this.jsonFile,e)]:[2,alert("Please fix all errors before saving!")]):[2];case 1:return 200===(t=r.sent()).status?this.setJsonToolVisible(!1):alert("Failed to save: ".concat(t.body.msg)),[2]}}))}))},e.prototype.loadFiles=function(){return a(this,void 0,void 0,(function(){var e,t,r,a,n,i,l;return s(this,(function(s){switch(s.label){case 0:return[4,o.ServerUtils.list()];case 1:if(200!==(e=s.sent()).status)return[2];for(r in this.schemas=e.body.schemas,this.select.innerHTML="",(t=document.createElement("option")).disabled=!0,t.selected=!0,t.innerText="==Choose file==",this.select.appendChild(t),this.schemas)for(a=0,n=this.schemas[r];a<n.length;a++)i=n[a],(l=document.createElement("option")).value="".concat(r,"@").concat(i),l.innerText=i,this.select.appendChild(l);return[2]}}))}))},e}();t.Client=i,new i},5290:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TschArray=t.TschObject=t.TschUnion=t.TschUndefined=t.TschNull=t.TschBoolean=t.TschNumber=t.TschString=t.TschType=void 0;class r{constructor(e,t){this.path=e,this.pathString=r.formatPath(e),this.rawMessage=t,this.message=`${this.pathString}: ${t}`}static formatPath(e){return e.length<1?"root":e.join(".")}}class a{constructor(e){this._ts=null,this._type=e,this._title=null,this._description=null,this._default=null,this._examples=null}union(e){return new u(this,e)}optional(){return new u(this,new l)}nullable(){return new u(this,new i)}clone(){const e=this.newInstance();return e._title=this._title,e._description=this._description,e._default=this._default,e._examples=this._examples?[...this._examples]:null,e}title(e){const t=this.clone();return t._title=e,t}description(e){const t=this.clone();return t._description=e,t}default(e){const t=this.clone();return t._default=e,t}examples(e){const t=this.clone();return t._examples=[...e],t}getJsonSchemaProperty(){const e={type:this._type};return this._title&&(e.title=this._title),this._description&&(e.description=this._description),this._default&&(e.default=this._default),this._examples&&(e.examples=this._examples),e}validate(e){const t=[];return this.validateInternal([],e,t),{valid:0==t.length,errors:t}}validateInternal(e,t,a){this.isCorrectType(t)?this.validateCorrectType(e,t,a):a.push(new r(e,`Value has to be of type ${this.getTypeName()}`))}isOptional(){return!1}isNullable(){return!1}}t.TschType=a;class s extends a{constructor(){super("string"),this._format=null,this._enum=null,this._minLength=null,this._maxLength=null}newInstance(){return new s}clone(){const e=super.clone();return e._format=this._format,e._enum=this._enum,e._minLength=this._minLength,e._maxLength=this._maxLength,e}getJsonSchemaProperty(){const e=super.getJsonSchemaProperty();return this._format&&(e.format=this._format),this._enum&&(e.enum=this._enum),this._minLength&&(e.minLength=this._minLength),this._maxLength&&(e.maxLength=this._maxLength),e}minLength(e){const t=this.clone();return t._minLength=e,t}maxLength(e){const t=this.clone();return t._maxLength=e,t}enumeration(e){const t=this.clone();return t._enum=[...e],t}format(e){const t=this.clone();return t._format=e,t}color(){return this.format("color")}date(){return this.format("date")}email(){return this.format("email")}password(){return this.format("password")}textarea(){return this.format("textarea")}url(){return this.format("url")}isCorrectType(e){return"string"==typeof e}getTypeName(){return"string"}validateCorrectType(e,t,a){this._enum&&!this._enum.includes(t)&&a.push(new r(e,`Value has to be one of the following: ${this._enum.join(", ")}`)),"number"==typeof this._minLength&&t.length<this._minLength&&a.push(new r(e,`Value must be longer than ${this._minLength} characters.`)),"number"==typeof this._maxLength&&t.length>this._maxLength&&a.push(new r(e,`Value must be shorter than ${this._maxLength} characters.`)),"color"!==this._format||/^#?[0-9a-f]{3,6}$/i.test(t)||a.push(new r(e,"Value must be a color hex code.")),"date"===this._format&&Number.isNaN(Date.parse(t))&&a.push(new r(e,"Value must be a date.")),"email"!==this._format||/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(t)||a.push(new r(e,"Value must be an email.")),"url"!==this._format||/^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$/.test(t)||a.push(new r(e,"Value must be a URL."))}}t.TschString=s;class o extends a{constructor(){super("number"),this._integer=!1,this._min=null,this._max=null}newInstance(){return new o}clone(){const e=super.clone();return e._integer=this._integer,e._min=this._min,e._max=this._max,e}integer(){const e=this.clone();return e._integer=!0,e}min(e){const t=this.clone();return t._min=e,t}max(e){const t=this.clone();return t._max=e,t}getJsonSchemaProperty(){const e=super.getJsonSchemaProperty();return this._integer&&(e.type="integer"),null!==this._min&&(e.minimum=this._min),null!==this._max&&(e.maximum=this._max),e}isCorrectType(e){return"number"==typeof e}getTypeName(){return"number"}validateCorrectType(e,t,a){this._integer&&!Number.isInteger(t)&&a.push(new r(e,"Value has to be an integer.")),"number"==typeof this._min&&t<this._min&&a.push(new r(e,`Value must be at least ${this._min}.`)),"number"==typeof this._max&&t>this._max&&a.push(new r(e,`Value must be at less than ${this._max}.`))}}t.TschNumber=o;class n extends a{constructor(){super("boolean")}newInstance(){return new n}clone(){return super.clone()}isCorrectType(e){return"boolean"==typeof e}getTypeName(){return"boolean"}validateCorrectType(e,t,r){}}t.TschBoolean=n;class i extends a{constructor(){super("null")}newInstance(){return new i}clone(){return super.clone()}isCorrectType(e){return null===e}getTypeName(){return"null"}validateCorrectType(e,t,r){}}t.TschNull=i;class l extends a{constructor(){super("undefined")}newInstance(){return new l}clone(){return super.clone()}isCorrectType(e){return void 0===e}getTypeName(){return"undefined"}validateCorrectType(e,t,r){}}t.TschUndefined=l;class u extends a{constructor(e,t){super(`union_${e._type}_${t._type}`),this.type1=e,this.type2=t}Type1Internal(){return this.type1}Type2Internal(){return this.type2}newInstance(){return new u(this.type1.clone(),this.type2.clone())}clone(){const e=super.clone();return e.type1=this.Type1Internal().clone(),e.type2=this.Type2Internal().clone(),e}getJsonSchemaProperty(){var e,t,r,a;const s="undefined"===this.Type1Internal()._type?{}:this.type1.getJsonSchemaProperty(),o="undefined"===this.Type2Internal()._type?{}:this.type2.getJsonSchemaProperty(),n=Object.assign(Object.assign({},s),o);return n.type=[...Array.isArray(s.type)?s.type:[s.type],...Array.isArray(o.type)?o.type:[o.type]].filter((e=>!!e&&"undefined"!==e)),n.type.length<2&&(n.type=n.type[0]),s.properties&&o.properties&&(n.properties=Object.assign(Object.assign({},null!==(e=s.properties)&&void 0!==e?e:{}),null!==(t=o.properties)&&void 0!==t?t:{}),s.required&&o.required?n.required=s.required.filter((e=>{var t;return null===(t=o.required)||void 0===t?void 0:t.includes(e)})):n.required=null!==(a=null!==(r=s.required)&&void 0!==r?r:o.required)&&void 0!==a?a:[]),this._title&&(n.title=this._title),this._description&&(n.description=this._description),this._default&&(n.default=this._default),n}isNullable(){return"null"===this.Type1Internal()._type||"null"===this.Type2Internal()._type||this.Type1Internal().isNullable()||this.Type2Internal().isNullable()}isOptional(){return"undefined"===this.Type1Internal()._type||"undefined"===this.Type2Internal()._type||this.Type1Internal().isOptional()||this.Type2Internal().isOptional()}isCorrectType(e){return this.Type1Internal().isCorrectType(e)||this.Type2Internal().isCorrectType(e)}getTypeName(){return`${this.type1.getTypeName()} or ${this.type2.getTypeName()}`}validateCorrectType(e,t,r){this.Type1Internal().isCorrectType(t)&&this.Type1Internal().validateInternal(e,t,r),this.Type2Internal().isCorrectType(t)&&this.Type2Internal().validateInternal(e,t,r)}}t.TschUnion=u;class c extends a{constructor(e){super("object"),this.objectShape=null!=e?e:{}}newInstance(){return new c(this.objectShape)}clone(){const e=super.clone();return e.objectShape=this.objectShape,e}shape(e){const t=this.clone();return t.objectShape=e,t}getJsonSchemaProperty(){const e=super.getJsonSchemaProperty();e.required=Object.keys(this.objectShape).filter((e=>!this.objectShape[e].isOptional())),e.properties={};for(const t in this.objectShape)e.properties[t]=this.objectShape[t].getJsonSchemaProperty();return e}isCorrectType(e){return"object"==typeof e&&null!==e&&!Array.isArray(e)}getTypeName(){return"object"}validateCorrectType(e,t,a){for(const s in this.objectShape){const o=this.objectShape[s];o.isOptional()||t.hasOwnProperty(s)||a.push(new r(e,`Property ${s} of type ${o.getTypeName()} is required.`)),t.hasOwnProperty(s)&&o.validateInternal([...e,s],t[s],a)}}}t.TschObject=c;class h extends a{constructor(e){super("array"),this.elementType=null!=e?e:new l,this._format=null,this._minElementCount=null,this._maxElementCount=null,this._unique=!1}newInstance(){return new h(this.elementType)}clone(){const e=super.clone();return e.elementType=this.elementType,e._format=this._format,e._unique=this._unique,e._minElementCount=this._minElementCount,e._maxElementCount=this._maxElementCount,e}getJsonSchemaProperty(){const e=super.getJsonSchemaProperty();return e.items=this.elementType.getJsonSchemaProperty(),this._format&&(e.format=this._format),this._unique&&(e.uniqueItems=this._unique),this._minElementCount&&(e.minItems=this._minElementCount),this._maxElementCount&&(e.maxItems=this._maxElementCount),e}element(e){const t=this.clone();return t.elementType=e,t}table(){const e=this.clone();return e._format="table",e}minElements(e){const t=this.clone();return t._minElementCount=e,t}maxElements(e){const t=this.clone();return t._maxElementCount=e,t}unique(){const e=this.clone();return e._unique=!0,e}isCorrectType(e){return"object"==typeof e&&null!==e&&Array.isArray(e)}getTypeName(){return`array of ${this.elementType.getTypeName()}`}validateCorrectType(e,t,a){const s=this.elementType,o=new Set;"number"==typeof this._minElementCount&&t.length<this._minElementCount&&a.push(new r(e,`Array must contain at least ${this._minElementCount} elements.`)),"number"==typeof this._maxElementCount&&t.length>this._maxElementCount&&a.push(new r(e,`Array must contain at most ${this._maxElementCount} elements.`));for(let n=0;n<t.length;n++){const i=t[n];if(s.validateInternal([...e,n.toString()],i,a),this._unique){const t=JSON.stringify(i);o.has(t)&&a.push(new r(e,"All values have to be unique.")),o.add(t)}}}}t.TschArray=h},6936:function(e,t,r){"use strict";var a=this&&this.__createBinding||(Object.create?function(e,t,r,a){void 0===a&&(a=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,a,s)}:function(e,t,r,a){void 0===a&&(a=r),e[a]=t[r]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&a(t,e,r);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.tsch=void 0;const n=o(r(2958));t.tsch=n},2958:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.array=t.object=t.boolean=t.number=t.string=void 0;const a=r(5290);t.string=function(){return new a.TschString},t.number=function(){return new a.TschNumber},t.boolean=function(){return new a.TschBoolean},t.object=function(e){return new a.TschObject(e)},t.array=function(e){return new a.TschArray(e)}},540:function(e,t){!function(e){"use strict";function t(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];if(t.length>1){t[0]=t[0].slice(0,-1);for(var a=t.length-1,s=1;s<a;++s)t[s]=t[s].slice(1,-1);return t[a]=t[a].slice(1),t.join("")}return t[0]}function r(e){return"(?:"+e+")"}function a(e){return void 0===e?"undefined":null===e?"null":Object.prototype.toString.call(e).split(" ").pop().split("]").shift().toLowerCase()}function s(e){return e.toUpperCase()}function o(e){var a="[A-Za-z]",s="[0-9]",o=t(s,"[A-Fa-f]"),n=r(r("%[EFef]"+o+"%"+o+o+"%"+o+o)+"|"+r("%[89A-Fa-f]"+o+"%"+o+o)+"|"+r("%"+o+o)),i="[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",l=t("[\\:\\/\\?\\#\\[\\]\\@]",i),u=e?"[\\uE000-\\uF8FF]":"[]",c=t(a,s,"[\\-\\.\\_\\~]",e?"[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]":"[]"),h=r(a+t(a,s,"[\\+\\-\\.]")+"*"),d=r(r(n+"|"+t(c,i,"[\\:]"))+"*"),p=(r(r("25[0-5]")+"|"+r("2[0-4][0-9]")+"|"+r("1[0-9][0-9]")+"|"+r("[1-9][0-9]")+"|"+s),r(r("25[0-5]")+"|"+r("2[0-4][0-9]")+"|"+r("1[0-9][0-9]")+"|"+r("0?[1-9][0-9]")+"|0?0?"+s)),m=r(p+"\\."+p+"\\."+p+"\\."+p),f=r(o+"{1,4}"),v=r(r(f+"\\:"+f)+"|"+m),y=r(r(f+"\\:")+"{6}"+v),g=r("\\:\\:"+r(f+"\\:")+"{5}"+v),P=r(r(f)+"?\\:\\:"+r(f+"\\:")+"{4}"+v),b=r(r(r(f+"\\:")+"{0,1}"+f)+"?\\:\\:"+r(f+"\\:")+"{3}"+v),E=r(r(r(f+"\\:")+"{0,2}"+f)+"?\\:\\:"+r(f+"\\:")+"{2}"+v),w=r(r(r(f+"\\:")+"{0,3}"+f)+"?\\:\\:"+f+"\\:"+v),_=r(r(r(f+"\\:")+"{0,4}"+f)+"?\\:\\:"+v),S=r(r(r(f+"\\:")+"{0,5}"+f)+"?\\:\\:"+f),x=r(r(r(f+"\\:")+"{0,6}"+f)+"?\\:\\:"),j=r([y,g,P,b,E,w,_,S,x].join("|")),T=r(r(c+"|"+n)+"+"),$=(r(j+"\\%25"+T),r(j+r("\\%25|\\%(?!"+o+"{2})")+T)),F=r("[vV]"+o+"+\\."+t(c,i,"[\\:]")+"+"),D=r("\\["+r($+"|"+j+"|"+F)+"\\]"),O=r(r(n+"|"+t(c,i))+"*"),R=r(D+"|"+m+"(?!"+O+")|"+O),k=r("[0-9]*"),C=r(r(d+"@")+"?"+R+r("\\:"+k)+"?"),I=r(n+"|"+t(c,i,"[\\:\\@]")),A=r(I+"*"),L=r(I+"+"),V=r(r(n+"|"+t(c,i,"[\\@]"))+"+"),N=r(r("\\/"+A)+"*"),q=r("\\/"+r(L+N)+"?"),z=r(V+N),U=r(L+N),Q="(?!"+I+")",M=(r(N+"|"+q+"|"+z+"|"+U+"|"+Q),r(r(I+"|"+t("[\\/\\?]",u))+"*")),H=r(r(I+"|[\\/\\?]")+"*"),J=r(r("\\/\\/"+C+N)+"|"+q+"|"+U+"|"+Q),B=r(h+"\\:"+J+r("\\?"+M)+"?"+r("\\#"+H)+"?"),K=r(r("\\/\\/"+C+N)+"|"+q+"|"+z+"|"+Q),Z=r(K+r("\\?"+M)+"?"+r("\\#"+H)+"?");return r(B+"|"+Z),r(h+"\\:"+J+r("\\?"+M)+"?"),r(r("\\/\\/("+r("("+d+")@")+"?("+R+")"+r("\\:("+k+")")+"?)")+"?("+N+"|"+q+"|"+U+"|"+Q+")"),r("\\?("+M+")"),r("\\#("+H+")"),r(r("\\/\\/("+r("("+d+")@")+"?("+R+")"+r("\\:("+k+")")+"?)")+"?("+N+"|"+q+"|"+z+"|"+Q+")"),r("\\?("+M+")"),r("\\#("+H+")"),r(r("\\/\\/("+r("("+d+")@")+"?("+R+")"+r("\\:("+k+")")+"?)")+"?("+N+"|"+q+"|"+U+"|"+Q+")"),r("\\?("+M+")"),r("\\#("+H+")"),r("("+d+")@"),r("\\:("+k+")"),{NOT_SCHEME:new RegExp(t("[^]",a,s,"[\\+\\-\\.]"),"g"),NOT_USERINFO:new RegExp(t("[^\\%\\:]",c,i),"g"),NOT_HOST:new RegExp(t("[^\\%\\[\\]\\:]",c,i),"g"),NOT_PATH:new RegExp(t("[^\\%\\/\\:\\@]",c,i),"g"),NOT_PATH_NOSCHEME:new RegExp(t("[^\\%\\/\\@]",c,i),"g"),NOT_QUERY:new RegExp(t("[^\\%]",c,i,"[\\:\\@\\/\\?]",u),"g"),NOT_FRAGMENT:new RegExp(t("[^\\%]",c,i,"[\\:\\@\\/\\?]"),"g"),ESCAPE:new RegExp(t("[^]",c,i),"g"),UNRESERVED:new RegExp(c,"g"),OTHER_CHARS:new RegExp(t("[^\\%]",c,l),"g"),PCT_ENCODED:new RegExp(n,"g"),IPV4ADDRESS:new RegExp("^("+m+")$"),IPV6ADDRESS:new RegExp("^\\[?("+j+")"+r(r("\\%25|\\%(?!"+o+"{2})")+"("+T+")")+"?\\]?$")}}var n=o(!1),i=o(!0),l=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var r=[],a=!0,s=!1,o=void 0;try{for(var n,i=e[Symbol.iterator]();!(a=(n=i.next()).done)&&(r.push(n.value),!t||r.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{!a&&i.return&&i.return()}finally{if(s)throw o}}return r}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},u=2147483647,c=36,h=/^xn--/,d=/[^\0-\x7E]/,p=/[\x2E\u3002\uFF0E\uFF61]/g,m={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},f=Math.floor,v=String.fromCharCode;function y(e){throw new RangeError(m[e])}function g(e,t){var r=e.split("@"),a="";return r.length>1&&(a=r[0]+"@",e=r[1]),a+function(e,t){for(var r=[],a=e.length;a--;)r[a]=t(e[a]);return r}((e=e.replace(p,".")).split("."),t).join(".")}function P(e){for(var t=[],r=0,a=e.length;r<a;){var s=e.charCodeAt(r++);if(s>=55296&&s<=56319&&r<a){var o=e.charCodeAt(r++);56320==(64512&o)?t.push(((1023&s)<<10)+(1023&o)+65536):(t.push(s),r--)}else t.push(s)}return t}var b=function(e,t){return e+22+75*(e<26)-((0!=t)<<5)},E=function(e,t,r){var a=0;for(e=r?f(e/700):e>>1,e+=f(e/t);e>455;a+=c)e=f(e/35);return f(a+36*e/(e+38))},w=function(e){var t,r=[],a=e.length,s=0,o=128,n=72,i=e.lastIndexOf("-");i<0&&(i=0);for(var l=0;l<i;++l)e.charCodeAt(l)>=128&&y("not-basic"),r.push(e.charCodeAt(l));for(var h=i>0?i+1:0;h<a;){for(var d=s,p=1,m=c;;m+=c){h>=a&&y("invalid-input");var v=(t=e.charCodeAt(h++))-48<10?t-22:t-65<26?t-65:t-97<26?t-97:c;(v>=c||v>f((u-s)/p))&&y("overflow"),s+=v*p;var g=m<=n?1:m>=n+26?26:m-n;if(v<g)break;var P=c-g;p>f(u/P)&&y("overflow"),p*=P}var b=r.length+1;n=E(s-d,b,0==d),f(s/b)>u-o&&y("overflow"),o+=f(s/b),s%=b,r.splice(s++,0,o)}return String.fromCodePoint.apply(String,r)},_=function(e){var t=[],r=(e=P(e)).length,a=128,s=0,o=72,n=!0,i=!1,l=void 0;try{for(var h,d=e[Symbol.iterator]();!(n=(h=d.next()).done);n=!0){var p=h.value;p<128&&t.push(v(p))}}catch(e){i=!0,l=e}finally{try{!n&&d.return&&d.return()}finally{if(i)throw l}}var m=t.length,g=m;for(m&&t.push("-");g<r;){var w=u,_=!0,S=!1,x=void 0;try{for(var j,T=e[Symbol.iterator]();!(_=(j=T.next()).done);_=!0){var $=j.value;$>=a&&$<w&&(w=$)}}catch(e){S=!0,x=e}finally{try{!_&&T.return&&T.return()}finally{if(S)throw x}}var F=g+1;w-a>f((u-s)/F)&&y("overflow"),s+=(w-a)*F,a=w;var D=!0,O=!1,R=void 0;try{for(var k,C=e[Symbol.iterator]();!(D=(k=C.next()).done);D=!0){var I=k.value;if(I<a&&++s>u&&y("overflow"),I==a){for(var A=s,L=c;;L+=c){var V=L<=o?1:L>=o+26?26:L-o;if(A<V)break;var N=A-V,q=c-V;t.push(v(b(V+N%q,0))),A=f(N/q)}t.push(v(b(A,0))),o=E(s,F,g==m),s=0,++g}}}catch(e){O=!0,R=e}finally{try{!D&&C.return&&C.return()}finally{if(O)throw R}}++s,++a}return t.join("")},S=function(e){return g(e,(function(e){return d.test(e)?"xn--"+_(e):e}))},x=function(e){return g(e,(function(e){return h.test(e)?w(e.slice(4).toLowerCase()):e}))},j={};function T(e){var t=e.charCodeAt(0);return t<16?"%0"+t.toString(16).toUpperCase():t<128?"%"+t.toString(16).toUpperCase():t<2048?"%"+(t>>6|192).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase():"%"+(t>>12|224).toString(16).toUpperCase()+"%"+(t>>6&63|128).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase()}function $(e){for(var t="",r=0,a=e.length;r<a;){var s=parseInt(e.substr(r+1,2),16);if(s<128)t+=String.fromCharCode(s),r+=3;else if(s>=194&&s<224){if(a-r>=6){var o=parseInt(e.substr(r+4,2),16);t+=String.fromCharCode((31&s)<<6|63&o)}else t+=e.substr(r,6);r+=6}else if(s>=224){if(a-r>=9){var n=parseInt(e.substr(r+4,2),16),i=parseInt(e.substr(r+7,2),16);t+=String.fromCharCode((15&s)<<12|(63&n)<<6|63&i)}else t+=e.substr(r,9);r+=9}else t+=e.substr(r,3),r+=3}return t}function F(e,t){function r(e){var r=$(e);return r.match(t.UNRESERVED)?r:e}return e.scheme&&(e.scheme=String(e.scheme).replace(t.PCT_ENCODED,r).toLowerCase().replace(t.NOT_SCHEME,"")),void 0!==e.userinfo&&(e.userinfo=String(e.userinfo).replace(t.PCT_ENCODED,r).replace(t.NOT_USERINFO,T).replace(t.PCT_ENCODED,s)),void 0!==e.host&&(e.host=String(e.host).replace(t.PCT_ENCODED,r).toLowerCase().replace(t.NOT_HOST,T).replace(t.PCT_ENCODED,s)),void 0!==e.path&&(e.path=String(e.path).replace(t.PCT_ENCODED,r).replace(e.scheme?t.NOT_PATH:t.NOT_PATH_NOSCHEME,T).replace(t.PCT_ENCODED,s)),void 0!==e.query&&(e.query=String(e.query).replace(t.PCT_ENCODED,r).replace(t.NOT_QUERY,T).replace(t.PCT_ENCODED,s)),void 0!==e.fragment&&(e.fragment=String(e.fragment).replace(t.PCT_ENCODED,r).replace(t.NOT_FRAGMENT,T).replace(t.PCT_ENCODED,s)),e}function D(e){return e.replace(/^0*(.*)/,"$1")||"0"}function O(e,t){var r=e.match(t.IPV4ADDRESS)||[],a=l(r,2)[1];return a?a.split(".").map(D).join("."):e}function R(e,t){var r=e.match(t.IPV6ADDRESS)||[],a=l(r,3),s=a[1],o=a[2];if(s){for(var n=s.toLowerCase().split("::").reverse(),i=l(n,2),u=i[0],c=i[1],h=c?c.split(":").map(D):[],d=u.split(":").map(D),p=t.IPV4ADDRESS.test(d[d.length-1]),m=p?7:8,f=d.length-m,v=Array(m),y=0;y<m;++y)v[y]=h[y]||d[f+y]||"";p&&(v[m-1]=O(v[m-1],t));var g=v.reduce((function(e,t,r){if(!t||"0"===t){var a=e[e.length-1];a&&a.index+a.length===r?a.length++:e.push({index:r,length:1})}return e}),[]).sort((function(e,t){return t.length-e.length}))[0],P=void 0;if(g&&g.length>1){var b=v.slice(0,g.index),E=v.slice(g.index+g.length);P=b.join(":")+"::"+E.join(":")}else P=v.join(":");return o&&(P+="%"+o),P}return e}var k=/^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i,C=void 0==="".match(/(){0}/)[1];function I(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r={},a=!1!==t.iri?i:n;"suffix"===t.reference&&(e=(t.scheme?t.scheme+":":"")+"//"+e);var s=e.match(k);if(s){C?(r.scheme=s[1],r.userinfo=s[3],r.host=s[4],r.port=parseInt(s[5],10),r.path=s[6]||"",r.query=s[7],r.fragment=s[8],isNaN(r.port)&&(r.port=s[5])):(r.scheme=s[1]||void 0,r.userinfo=-1!==e.indexOf("@")?s[3]:void 0,r.host=-1!==e.indexOf("//")?s[4]:void 0,r.port=parseInt(s[5],10),r.path=s[6]||"",r.query=-1!==e.indexOf("?")?s[7]:void 0,r.fragment=-1!==e.indexOf("#")?s[8]:void 0,isNaN(r.port)&&(r.port=e.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/)?s[4]:void 0)),r.host&&(r.host=R(O(r.host,a),a)),void 0!==r.scheme||void 0!==r.userinfo||void 0!==r.host||void 0!==r.port||r.path||void 0!==r.query?void 0===r.scheme?r.reference="relative":void 0===r.fragment?r.reference="absolute":r.reference="uri":r.reference="same-document",t.reference&&"suffix"!==t.reference&&t.reference!==r.reference&&(r.error=r.error||"URI is not a "+t.reference+" reference.");var o=j[(t.scheme||r.scheme||"").toLowerCase()];if(t.unicodeSupport||o&&o.unicodeSupport)F(r,a);else{if(r.host&&(t.domainHost||o&&o.domainHost))try{r.host=S(r.host.replace(a.PCT_ENCODED,$).toLowerCase())}catch(e){r.error=r.error||"Host's domain name can not be converted to ASCII via punycode: "+e}F(r,n)}o&&o.parse&&o.parse(r,t)}else r.error=r.error||"URI can not be parsed.";return r}function A(e,t){var r=!1!==t.iri?i:n,a=[];return void 0!==e.userinfo&&(a.push(e.userinfo),a.push("@")),void 0!==e.host&&a.push(R(O(String(e.host),r),r).replace(r.IPV6ADDRESS,(function(e,t,r){return"["+t+(r?"%25"+r:"")+"]"}))),"number"!=typeof e.port&&"string"!=typeof e.port||(a.push(":"),a.push(String(e.port))),a.length?a.join(""):void 0}var L=/^\.\.?\//,V=/^\/\.(\/|$)/,N=/^\/\.\.(\/|$)/,q=/^\/?(?:.|\n)*?(?=\/|$)/;function z(e){for(var t=[];e.length;)if(e.match(L))e=e.replace(L,"");else if(e.match(V))e=e.replace(V,"/");else if(e.match(N))e=e.replace(N,"/"),t.pop();else if("."===e||".."===e)e="";else{var r=e.match(q);if(!r)throw new Error("Unexpected dot segment condition");var a=r[0];e=e.slice(a.length),t.push(a)}return t.join("")}function U(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.iri?i:n,a=[],s=j[(t.scheme||e.scheme||"").toLowerCase()];if(s&&s.serialize&&s.serialize(e,t),e.host)if(r.IPV6ADDRESS.test(e.host));else if(t.domainHost||s&&s.domainHost)try{e.host=t.iri?x(e.host):S(e.host.replace(r.PCT_ENCODED,$).toLowerCase())}catch(r){e.error=e.error||"Host's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+r}F(e,r),"suffix"!==t.reference&&e.scheme&&(a.push(e.scheme),a.push(":"));var o=A(e,t);if(void 0!==o&&("suffix"!==t.reference&&a.push("//"),a.push(o),e.path&&"/"!==e.path.charAt(0)&&a.push("/")),void 0!==e.path){var l=e.path;t.absolutePath||s&&s.absolutePath||(l=z(l)),void 0===o&&(l=l.replace(/^\/\//,"/%2F")),a.push(l)}return void 0!==e.query&&(a.push("?"),a.push(e.query)),void 0!==e.fragment&&(a.push("#"),a.push(e.fragment)),a.join("")}function Q(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a={};return arguments[3]||(e=I(U(e,r),r),t=I(U(t,r),r)),!(r=r||{}).tolerant&&t.scheme?(a.scheme=t.scheme,a.userinfo=t.userinfo,a.host=t.host,a.port=t.port,a.path=z(t.path||""),a.query=t.query):(void 0!==t.userinfo||void 0!==t.host||void 0!==t.port?(a.userinfo=t.userinfo,a.host=t.host,a.port=t.port,a.path=z(t.path||""),a.query=t.query):(t.path?("/"===t.path.charAt(0)?a.path=z(t.path):(void 0===e.userinfo&&void 0===e.host&&void 0===e.port||e.path?e.path?a.path=e.path.slice(0,e.path.lastIndexOf("/")+1)+t.path:a.path=t.path:a.path="/"+t.path,a.path=z(a.path)),a.query=t.query):(a.path=e.path,void 0!==t.query?a.query=t.query:a.query=e.query),a.userinfo=e.userinfo,a.host=e.host,a.port=e.port),a.scheme=e.scheme),a.fragment=t.fragment,a}function M(e,t){return e&&e.toString().replace(t&&t.iri?i.PCT_ENCODED:n.PCT_ENCODED,$)}var H={scheme:"http",domainHost:!0,parse:function(e,t){return e.host||(e.error=e.error||"HTTP URIs must have a host."),e},serialize:function(e,t){var r="https"===String(e.scheme).toLowerCase();return e.port!==(r?443:80)&&""!==e.port||(e.port=void 0),e.path||(e.path="/"),e}},J={scheme:"https",domainHost:H.domainHost,parse:H.parse,serialize:H.serialize};function B(e){return"boolean"==typeof e.secure?e.secure:"wss"===String(e.scheme).toLowerCase()}var K={scheme:"ws",domainHost:!0,parse:function(e,t){var r=e;return r.secure=B(r),r.resourceName=(r.path||"/")+(r.query?"?"+r.query:""),r.path=void 0,r.query=void 0,r},serialize:function(e,t){if(e.port!==(B(e)?443:80)&&""!==e.port||(e.port=void 0),"boolean"==typeof e.secure&&(e.scheme=e.secure?"wss":"ws",e.secure=void 0),e.resourceName){var r=e.resourceName.split("?"),a=l(r,2),s=a[0],o=a[1];e.path=s&&"/"!==s?s:void 0,e.query=o,e.resourceName=void 0}return e.fragment=void 0,e}},Z={scheme:"wss",domainHost:K.domainHost,parse:K.parse,serialize:K.serialize},G={},W="[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]",X="[0-9A-Fa-f]",Y=r(r("%[EFef][0-9A-Fa-f]%"+X+X+"%"+X+X)+"|"+r("%[89A-Fa-f][0-9A-Fa-f]%"+X+X)+"|"+r("%"+X+X)),ee=t("[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]",'[\\"\\\\]'),te=new RegExp(W,"g"),re=new RegExp(Y,"g"),ae=new RegExp(t("[^]","[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]","[\\.]",'[\\"]',ee),"g"),se=new RegExp(t("[^]",W,"[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]"),"g"),oe=se;function ne(e){var t=$(e);return t.match(te)?t:e}var ie={scheme:"mailto",parse:function(e,t){var r=e,a=r.to=r.path?r.path.split(","):[];if(r.path=void 0,r.query){for(var s=!1,o={},n=r.query.split("&"),i=0,l=n.length;i<l;++i){var u=n[i].split("=");switch(u[0]){case"to":for(var c=u[1].split(","),h=0,d=c.length;h<d;++h)a.push(c[h]);break;case"subject":r.subject=M(u[1],t);break;case"body":r.body=M(u[1],t);break;default:s=!0,o[M(u[0],t)]=M(u[1],t)}}s&&(r.headers=o)}r.query=void 0;for(var p=0,m=a.length;p<m;++p){var f=a[p].split("@");if(f[0]=M(f[0]),t.unicodeSupport)f[1]=M(f[1],t).toLowerCase();else try{f[1]=S(M(f[1],t).toLowerCase())}catch(e){r.error=r.error||"Email address's domain name can not be converted to ASCII via punycode: "+e}a[p]=f.join("@")}return r},serialize:function(e,t){var r,a=e,o=null!=(r=e.to)?r instanceof Array?r:"number"!=typeof r.length||r.split||r.setInterval||r.call?[r]:Array.prototype.slice.call(r):[];if(o){for(var n=0,i=o.length;n<i;++n){var l=String(o[n]),u=l.lastIndexOf("@"),c=l.slice(0,u).replace(re,ne).replace(re,s).replace(ae,T),h=l.slice(u+1);try{h=t.iri?x(h):S(M(h,t).toLowerCase())}catch(e){a.error=a.error||"Email address's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+e}o[n]=c+"@"+h}a.path=o.join(",")}var d=e.headers=e.headers||{};e.subject&&(d.subject=e.subject),e.body&&(d.body=e.body);var p=[];for(var m in d)d[m]!==G[m]&&p.push(m.replace(re,ne).replace(re,s).replace(se,T)+"="+d[m].replace(re,ne).replace(re,s).replace(oe,T));return p.length&&(a.query=p.join("&")),a}},le=/^([^\:]+)\:(.*)/,ue={scheme:"urn",parse:function(e,t){var r=e.path&&e.path.match(le),a=e;if(r){var s=t.scheme||a.scheme||"urn",o=r[1].toLowerCase(),n=r[2],i=s+":"+(t.nid||o),l=j[i];a.nid=o,a.nss=n,a.path=void 0,l&&(a=l.parse(a,t))}else a.error=a.error||"URN can not be parsed.";return a},serialize:function(e,t){var r=t.scheme||e.scheme||"urn",a=e.nid,s=r+":"+(t.nid||a),o=j[s];o&&(e=o.serialize(e,t));var n=e,i=e.nss;return n.path=(a||t.nid)+":"+i,n}},ce=/^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/,he={scheme:"urn:uuid",parse:function(e,t){var r=e;return r.uuid=r.nss,r.nss=void 0,t.tolerant||r.uuid&&r.uuid.match(ce)||(r.error=r.error||"UUID is not valid."),r},serialize:function(e,t){var r=e;return r.nss=(e.uuid||"").toLowerCase(),r}};j[H.scheme]=H,j[J.scheme]=J,j[K.scheme]=K,j[Z.scheme]=Z,j[ie.scheme]=ie,j[ue.scheme]=ue,j[he.scheme]=he,e.SCHEMES=j,e.pctEncChar=T,e.pctDecChars=$,e.parse=I,e.removeDotSegments=z,e.serialize=U,e.resolveComponents=Q,e.resolve=function(e,t,r){var a=function(e,t){var r=e;if(t)for(var a in t)r[a]=t[a];return r}({scheme:"null"},r);return U(Q(I(e,a),I(t,a),a,!0),a)},e.normalize=function(e,t){return"string"==typeof e?e=U(I(e,t),t):"object"===a(e)&&(e=I(U(e,t),t)),e},e.equal=function(e,t,r){return"string"==typeof e?e=U(I(e,r),r):"object"===a(e)&&(e=U(e,r)),"string"==typeof t?t=U(I(t,r),r):"object"===a(t)&&(t=U(t,r)),e===t},e.escapeComponent=function(e,t){return e&&e.toString().replace(t&&t.iri?i.ESCAPE:n.ESCAPE,T)},e.unescapeComponent=M,Object.defineProperty(e,"__esModule",{value:!0})}(t)},894:e=>{"use strict";e.exports=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#","description":"Meta-schema for $data reference (JSON Schema extension proposal)","type":"object","required":["$data"],"properties":{"$data":{"type":"string","anyOf":[{"format":"relative-json-pointer"},{"format":"json-pointer"}]}},"additionalProperties":false}')},6680:e=>{"use strict";e.exports=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$id":"http://json-schema.org/draft-07/schema#","title":"Core schema meta-schema","definitions":{"schemaArray":{"type":"array","minItems":1,"items":{"$ref":"#"}},"nonNegativeInteger":{"type":"integer","minimum":0},"nonNegativeIntegerDefault0":{"allOf":[{"$ref":"#/definitions/nonNegativeInteger"},{"default":0}]},"simpleTypes":{"enum":["array","boolean","integer","null","number","object","string"]},"stringArray":{"type":"array","items":{"type":"string"},"uniqueItems":true,"default":[]}},"type":["object","boolean"],"properties":{"$id":{"type":"string","format":"uri-reference"},"$schema":{"type":"string","format":"uri"},"$ref":{"type":"string","format":"uri-reference"},"$comment":{"type":"string"},"title":{"type":"string"},"description":{"type":"string"},"default":true,"readOnly":{"type":"boolean","default":false},"examples":{"type":"array","items":true},"multipleOf":{"type":"number","exclusiveMinimum":0},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"$ref":"#/definitions/nonNegativeInteger"},"minLength":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"pattern":{"type":"string","format":"regex"},"additionalItems":{"$ref":"#"},"items":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/schemaArray"}],"default":true},"maxItems":{"$ref":"#/definitions/nonNegativeInteger"},"minItems":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"uniqueItems":{"type":"boolean","default":false},"contains":{"$ref":"#"},"maxProperties":{"$ref":"#/definitions/nonNegativeInteger"},"minProperties":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"required":{"$ref":"#/definitions/stringArray"},"additionalProperties":{"$ref":"#"},"definitions":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"properties":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"patternProperties":{"type":"object","additionalProperties":{"$ref":"#"},"propertyNames":{"format":"regex"},"default":{}},"dependencies":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/stringArray"}]}},"propertyNames":{"$ref":"#"},"const":true,"enum":{"type":"array","items":true,"minItems":1,"uniqueItems":true},"type":{"anyOf":[{"$ref":"#/definitions/simpleTypes"},{"type":"array","items":{"$ref":"#/definitions/simpleTypes"},"minItems":1,"uniqueItems":true}]},"format":{"type":"string"},"contentMediaType":{"type":"string"},"contentEncoding":{"type":"string"},"if":{"$ref":"#"},"then":{"$ref":"#"},"else":{"$ref":"#"},"allOf":{"$ref":"#/definitions/schemaArray"},"anyOf":{"$ref":"#/definitions/schemaArray"},"oneOf":{"$ref":"#/definitions/schemaArray"},"not":{"$ref":"#"}},"default":true}')}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var r=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(r.exports,r,r.exports,__webpack_require__),r.exports}var __webpack_exports__=__webpack_require__(4973)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,